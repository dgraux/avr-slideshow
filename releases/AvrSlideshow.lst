
AvrSlideshow.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  0000291c  000029b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000291c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000224  00800104  00800104  000029b4  2**0
                  ALLOC
  3 .stab         00005c40  00000000  00000000  000029b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000185d  00000000  00000000  000085f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00009e51  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 cf 07 	jmp	0xf9e	; 0xf9e <__ctors_end>
       4:	0c 94 ec 07 	jmp	0xfd8	; 0xfd8 <__bad_interrupt>
       8:	0c 94 ec 07 	jmp	0xfd8	; 0xfd8 <__bad_interrupt>
       c:	0c 94 ec 07 	jmp	0xfd8	; 0xfd8 <__bad_interrupt>
      10:	0c 94 ec 07 	jmp	0xfd8	; 0xfd8 <__bad_interrupt>
      14:	0c 94 ec 07 	jmp	0xfd8	; 0xfd8 <__bad_interrupt>
      18:	0c 94 ec 07 	jmp	0xfd8	; 0xfd8 <__bad_interrupt>
      1c:	0c 94 ec 07 	jmp	0xfd8	; 0xfd8 <__bad_interrupt>
      20:	0c 94 ec 07 	jmp	0xfd8	; 0xfd8 <__bad_interrupt>
      24:	0c 94 ec 07 	jmp	0xfd8	; 0xfd8 <__bad_interrupt>
      28:	0c 94 ec 07 	jmp	0xfd8	; 0xfd8 <__bad_interrupt>
      2c:	0c 94 51 12 	jmp	0x24a2	; 0x24a2 <__vector_11>
      30:	0c 94 ec 07 	jmp	0xfd8	; 0xfd8 <__bad_interrupt>
      34:	0c 94 ec 07 	jmp	0xfd8	; 0xfd8 <__bad_interrupt>
      38:	0c 94 ec 07 	jmp	0xfd8	; 0xfd8 <__bad_interrupt>
      3c:	0c 94 ec 07 	jmp	0xfd8	; 0xfd8 <__bad_interrupt>
      40:	0c 94 ec 07 	jmp	0xfd8	; 0xfd8 <__bad_interrupt>
      44:	0c 94 ec 07 	jmp	0xfd8	; 0xfd8 <__bad_interrupt>
      48:	0c 94 ec 07 	jmp	0xfd8	; 0xfd8 <__bad_interrupt>
      4c:	0c 94 ec 07 	jmp	0xfd8	; 0xfd8 <__bad_interrupt>
      50:	0c 94 ec 07 	jmp	0xfd8	; 0xfd8 <__bad_interrupt>
      54:	0c 94 ec 07 	jmp	0xfd8	; 0xfd8 <__bad_interrupt>
      58:	0c 94 ec 07 	jmp	0xfd8	; 0xfd8 <__bad_interrupt>
      5c:	0c 94 ec 07 	jmp	0xfd8	; 0xfd8 <__bad_interrupt>
      60:	0c 94 ec 07 	jmp	0xfd8	; 0xfd8 <__bad_interrupt>
      64:	0c 94 ec 07 	jmp	0xfd8	; 0xfd8 <__bad_interrupt>

00000068 <game_previews>:
      68:	7f 20 20 20 7f 7f 20 84 8a 7f 7f 20 81 84 7f 7f     .   .. .... ....
      78:	8d 88 85 7f 7f 85 8a 8d 7f 7f 8d 8f 8b 7f bf bf     ................
      88:	bf bf 7f ca c8 c8 c8 cb c9 bf 20 20 c9 c9 20 ca     ..........  .. .
      98:	c8 cd c9 20 c9 20 bf c9 20 cc c8 cb c9 bf 20 20     ... . .. .....  
      a8:	c6 cc c8 c8 c1 07 20 20 20 20 20 20 20 20 20 20     ......          
      b8:	e5 e5 e5 e5 e5 e5 e6 e2 e1 e5 e5 e5 e5 e5 e5 20     ............... 
      c8:	20 20 20 20 20 20 20 20 20 98 94 94 94 9c 90 20              ...... 
      d8:	20 20 90 90 20 18 20 90 90 1b 03 1a 90 90 20 19       .. . ....... .
      e8:	20 90 90 20 20 20 90 a0 94 94 94 a4                  ..   ......

000000f4 <__c.1762>:
      f4:	50 72 6f 66 69 6c 65 0a 44 65 6d 6f 20 20 20 0a     Profile.Demo   .
     104:	4f 70 74 69 6f 6e 73 0a 43 72 65 64 69 74 73 00     Options.Credits.

00000114 <__c.1576>:
     114:	55 73 65 20 74 68 65 20 20 6a 6f 79 70 61 64 20     Use the  joypad 
     124:	74 6f 66 69 74 20 61 73 20 6d 75 63 68 20 6f 66     tofit as much of
     134:	20 74 68 65 72 65 63 74 61 6e 67 6c 65 20 20 6f      therectangle  o
     144:	6e 20 20 74 68 65 73 63 72 65 65 6e 20 61 73 20     n  thescreen as 
     154:	70 6f 73 73 69 62 6c 65 00                          possible.

0000015d <__c.1585>:
     15d:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
     16d:	20 20 20 20 48 41 4e 41 4b 41 49 20 53 54 55 44         HANAKAI STUD
     17d:	49 4f 20 20 20 20 20 20 20 20 20 32 30 31 33 20     IO         2013 
     18d:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
     19d:	20 20 20 20 20 20 20 20 00                                  .

000001a6 <__c.1567>:
     1a6:	20 54 49 54 4c 45 0a 0d 0a 0a 20 20 20 20 41 20      TITLE....    A 
     1b6:	73 6c 69 64 65 73 68 6f 77 0a 0d 20 20 20 20 77     slideshow..    w
     1c6:	69 74 68 20 61 20 73 69 6d 70 6c 65 20 41 56 52     ith a simple AVR
     1d6:	0a 0d 0a 0a 20 20 20 20 20 20 20 20 20 20 44 61     ....          Da
     1e6:	6d 69 65 6e 20 47 72 61 75 78 0a 0d 20 20 20 20     mien Graux..    
     1f6:	20 20 20 20 20 20 67 69 74 68 75 62 2e 63 6f 6d           github.com
     206:	2f 64 67 72 61 75 78 0a 0d 0a 3e 0a 0d 00           /dgraux...>...

00000214 <__c.1572>:
     214:	20 45 6e 64 20 6f 66 20 0a 0d 0a 20 73 6c 69 64      End of ... slid
     224:	65 73 68 6f 77 0a 0d 0a 20 2e 2e 2e 2e 2e 2e 0a     eshow... .......
     234:	0d 0a 3e 00                                         ..>.

00000238 <__c.1577>:
     238:	20 50 4c 41 4e 20 20 20 20 20 20 20 20 20 20 20      PLAN           
     248:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
     258:	0a 0d 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f     ..______________
     268:	5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f     ________________
     278:	5f 5f 0a 0d 20 2d 20 46 69 72 73 74 20 50 61 72     __.. - First Par
     288:	74 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20     t               
     298:	20 20 20 20 0a 0d 20 2d 20 54 68 65 6e 20 20 20         .. - Then   
     2a8:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
     2b8:	20 20 20 20 20 20 0a 0d 20 2d 20 41 66 74 65 72           .. - After
     2c8:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
     2d8:	20 20 20 20 20 20 20 20 0a 0d 20 2d 20 43 6f 6e             .. - Con
     2e8:	63 6c 75 73 69 6f 6e 2e 2e 2e 20 20 20 20 20 20     clusion...      
     2f8:	20 20 20 20 20 20 20 20 20 20 0a 0d 5f 5f 5f 5f               ..____
     308:	5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f     ________________
     318:	5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 0a 0d 20 44     ____________.. D
     328:	61 6d 69 65 6e 20 47 72 61 75 78 20 20 20 20 20     amien Graux     
     338:	20 20 20 20 20 20 20 20 20 20 20 20 20 31 0a 0d                  1..
	...

00000349 <__c.1582>:
     349:	20 4c 4f 52 45 4d 20 49 50 53 55 4d 20 20 20 20      LOREM IPSUM    
     359:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
     369:	0a 0d 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f     ..______________
     379:	5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f     ________________
     389:	5f 5f 0a 0d 0a 0a 20 2d 20 54 65 78 74 20 68 65     __.... - Text he
     399:	72 65 20 20 20 20 20 20 20 20 20 20 20 20 20 20     re              
     3a9:	20 20 20 20 20 20 0a 0d 0a 0a 20 2d 20 54 65 78           .... - Tex
     3b9:	74 20 68 65 72 65 20 61 6c 73 6f 20 20 20 20 20     t here also     
     3c9:	20 20 20 20 20 20 20 20 20 20 0a 0d 0a 5f 5f 5f               ...___
     3d9:	5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f     ________________
     3e9:	5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 0a 0d 20     _____________.. 
     3f9:	44 61 6d 69 65 6e 20 47 72 61 75 78 20 20 20 20     Damien Graux    
     409:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 0a                    .
     419:	0d 00                                               ..

0000041b <__c.1559>:
     41b:	41 56 52 20 43 6f 6d 70 75 74 65 72 20 31 4b 0a     AVR Computer 1K.
     42b:	0d 0a 41 54 6d 65 67 61 20 31 36 38 0a 0d 0a 42     ..ATmega 168...B
     43b:	41 53 49 43 0a 0d 0a 3e 00                          ASIC...>.

00000444 <__c.1561>:
     444:	31 30 20 50 52 49 4e 54 20 22 41 56 52 20 72 75     10 PRINT "AVR ru
     454:	6c 65 73 21 20 22 3b 00                             les! ";.

0000045c <__c.1563>:
     45c:	0a 0d 3e 00                                         ..>.

00000460 <__c.1565>:
     460:	32 30 20 47 4f 54 4f 20 31 30 00                    20 GOTO 10.

0000046b <__c.1567>:
     46b:	0a 0d 3e 00                                         ..>.

0000046f <__c.1569>:
     46f:	52 55 4e 00                                         RUN.

00000473 <__c.1571>:
     473:	0a 0d 00                                            ...

00000476 <__c.1574>:
     476:	41 56 52 20 72 75 6c 65 73 21 20 00                 AVR rules! .

00000482 <__c.1579>:
     482:	0a 0d 45 73 63 61 70 65 20 61 74 20 6c 69 6e 65     ..Escape at line
     492:	20 31 30 0a 0d 3e 00                                 10..>.

00000499 <__c.1581>:
     499:	43 48 41 49 4e 20 22 44 45 4d 4f 22 00              CHAIN "DEMO".

000004a6 <__c.1586>:
     4a6:	74 76 54 65 78 74 3a 20 42 2f 57 20 74 65 78 74     tvText: B/W text
     4b6:	20 6f 6e 20 61 20 50 41 4c 20 54 56 5f 5f 5f 5f      on a PAL TV____
     4c6:	5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f     ________________
     4d6:	5f 5f 5f 5f 5f 5f 5f 5f 0a 54 68 65 20 64 69 73     ________.The dis
     4e6:	70 6c 61 79 20 69 73 20 6d 61 64 65 20 75 70 20     play is made up 
     4f6:	6f 66 20 31 36 72 6f 77 73 20 6f 66 20 33 32 20     of 16rows of 32 
     506:	63 6f 6c 75 6d 6e 73 2e 20 20 45 61 63 68 20 6f     columns.  Each o
     516:	66 74 68 65 20 63 68 61 72 61 63 74 65 72 73 20     fthe characters 
     526:	69 73 20 36 d7 38 20 70 69 78 65 6c 73 77 68 69     is 6.8 pixelswhi
     536:	63 68 20 67 69 76 65 73 20 75 73 20 61 20 74 6f     ch gives us a to
     546:	74 61 6c 20 70 69 78 65 6c 72 65 73 6f 6c 75 74     tal pixelresolut
     556:	69 6f 6e 20 6f 66 20 31 39 32 d7 31 32 38 2e 0a     ion of 192.128..
     566:	0d 0a 54 68 65 20 20 20 6f 75 74 70 75 74 20 20     ..The   output  
     576:	20 69 73 20 20 69 6e 74 65 72 72 75 70 74 64 72      is  interruptdr
     586:	69 76 65 6e 2c 20 20 20 6c 65 61 76 69 6e 67 20     iven,   leaving 
     596:	20 73 6f 6d 65 20 20 43 50 55 74 69 6d 65 20 20      some  CPUtime  
     5a6:	74 6f 20 74 68 65 20 20 75 73 65 72 20 20 70 72     to the  user  pr
     5b6:	6f 67 72 61 6d 2e 00                                ogram..

000005bd <__c.1599>:
     5bd:	74 76 54 65 78 74 20 00                             tvText .

000005c5 <__c.1624>:
     5c5:	55 73 65 72 2d 64 65 66 69 6e 65 64 20 76 69 65     User-defined vie
     5d5:	77 70 6f 72 74 73 61 6c 6c 6f 77 20 79 6f 75 20     wportsallow you 
     5e5:	74 6f 20 72 65 73 74 72 69 63 74 20 74 68 65 20     to restrict the 
     5f5:	63 75 72 73 6f 72 20 74 6f 20 61 20 72 65 67 69     cursor to a regi
     605:	6f 6e 6f 66 20 74 68 65 20 73 63 72 65 65 6e 2e     onof the screen.
     615:	0a 0d 0a 53 63 72 6f 6c 6c 69 6e 67 20 61 6e 64     ...Scrolling and
     625:	20 63 6c 65 61 72 69 6e 67 6f 70 65 72 61 74 69      clearingoperati
     635:	6f 6e 73 20 6f 6e 6c 79 20 61 66 66 65 63 74 74     ons only affectt
     645:	68 65 20 64 65 66 69 6e 65 64 20 76 69 65 77 70     he defined viewp
     655:	6f 72 74 2e 00                                      ort..

0000065a <__c.1669>:
     65a:	54 68 65 20 6c 69 62 72 61 72 79 20 70 72 6f 76     The library prov
     66a:	69 64 65 73 20 73 75 70 70 6f 72 74 20 66 6f 72     ides support for
     67a:	61 20 66 6c 61 73 68 69 6e 67 20 63 75 72 73 6f     a flashing curso
     68a:	72 2e 00                                            r..

0000068d <__c.1671>:
     68d:	0a 0d 0a 54 68 65 20 63 75 72 73 6f 72 20 63 61     ...The cursor ca
     69d:	6e 20 62 65 20 73 77 69 74 63 68 65 64 20 6f 66     n be switched of
     6ad:	66 2e 0a 0d 0a 00                                   f.....

000006b3 <__c.1673>:
     6b3:	59 6f 75 20 63 61 6e 20 63 68 61 6e 67 65 20 69     You can change i
     6c3:	74 73 20 61 70 70 65 61 72 61 6e 63 65 20 74 6f     ts appearance to
     6d3:	61 6e 79 20 6f 66 20 74 68 65 20 6f 74 68 65 72     any of the other
     6e3:	20 63 68 61 72 61 63 74 65 72 73 2e 00               characters..

000006f0 <__c.1675>:
     6f0:	0a 0d 0a 59 6f 75 20 63 61 6e 20 61 6c 73 6f 20     ...You can also 
     700:	63 68 61 6e 67 65 20 74 68 65 20 72 61 74 65 20     change the rate 
     710:	61 74 20 77 68 69 63 68 20 69 74 20 66 6c 61 73     at which it flas
     720:	68 65 73 2e 20 53 6c 6f 77 2e 2e 2e 00              hes. Slow....

0000072d <__c.1677>:
     72d:	7f 7f 7f 20 74 6f 20 66 61 73 74 21 00              ... to fast!.

0000073a <__c.1714>:
     73a:	49 66 20 20 79 6f 75 20 20 64 69 73 6c 69 6b 65     If  you  dislike
	...

0000074b <__c.1716>:
     74b:	62 6c 61 63 6b 20 20 6f 6e 20 77 68 69 74 65 00     black  on white.

0000075b <__c.1718>:
     75b:	77 68 69 74 65 20 20 6f 6e 20 62 6c 61 63 6b 00     white  on black.

0000076b <__c.1720>:
     76b:	2c 79 6f 75 20 20 63 61 6e 20 20 69 6e 76 65 72     ,you  can  inver
     77b:	74 74 68 65 20 73 63 72 65 65 6e 20 20 77 69 74     tthe screen  wit
     78b:	68 61 20 20 73 69 6e 67 6c 65 20 20 66 6c 61 67     ha  single  flag
     79b:	2e 00                                               ..

0000079d <tvtext_font_data>:
	...
     7a5:	7e 81 a5 81 bd 99 81 7e 7e ff db ff c3 e7 ff 7e     ~......~~......~
     7b5:	6c fe fe fe 7c 38 10 00 10 38 7c fe 7c 38 10 00     l...|8...8|.|8..
     7c5:	38 7c 38 fe fe d6 10 38 10 10 38 7c fe 7c 10 38     8|8....8..8|.|.8
     7d5:	00 00 18 3c 3c 18 00 00 ff ff e7 c3 c3 e7 ff ff     ...<<...........
     7e5:	00 3c 66 42 42 66 3c 00 ff c3 99 bd bd 99 c3 ff     .<fBBf<.........
     7f5:	0f 07 0f 7d cc cc cc 78 3c 66 66 66 3c 18 7e 18     ...}...x<fff<.~.
     805:	1c 1e 1b 1b 1a 38 78 70 7f 63 7f 63 63 67 e6 c0     .....8xp.c.ccg..
     815:	99 5a 3c e7 e7 3c 5a 99 80 e0 f8 fe f8 e0 80 00     .Z<..<Z.........
     825:	02 0e 3e fe 3e 0e 02 00 18 3c 7e 18 18 7e 3c 18     ..>.>....<~..~<.
     835:	66 66 66 66 66 00 66 00 7f db db 7b 1b 1b 1b 00     fffff.f....{....
     845:	1e 31 7c 66 3e 8c 78 00 00 00 00 00 7e 7e 7e 00     .1|f>.x.....~~~.
     855:	18 3c 7e 18 7e 3c 18 ff 18 3c 7e 18 18 18 18 00     .<~.~<...<~.....
     865:	18 18 18 18 7e 3c 18 00 00 18 0c fe 0c 18 00 00     ....~<..........
     875:	00 30 60 fe 60 30 00 00 00 00 c0 c0 c0 fe 00 00     .0`.`0..........
     885:	00 24 66 ff 66 24 00 00 00 18 3c 7e ff ff 00 00     .$f.f$....<~....
     895:	00 ff ff 7e 3c 18 00 00 00 00 00 00 00 00 00 00     ...~<...........
     8a5:	18 18 18 18 18 00 18 00 6c 6c 6c 00 00 00 00 00     ........lll.....
     8b5:	36 36 7f 36 7f 36 36 00 0c 3f 68 3e 0b 7e 18 00     66.6.66..?h>.~..
     8c5:	60 66 0c 18 30 66 06 00 38 6c 6c 38 6d 66 3b 00     `f..0f..8ll8mf;.
     8d5:	18 18 18 00 00 00 00 00 0c 18 30 30 30 18 0c 00     ..........000...
     8e5:	30 18 0c 0c 0c 18 30 00 00 18 7e 3c 7e 18 00 00     0.....0...~<~...
     8f5:	00 18 18 7e 18 18 00 00 00 00 00 00 00 18 18 30     ...~...........0
     905:	00 00 00 7e 00 00 00 00 00 00 00 00 00 18 18 00     ...~............
     915:	00 06 0c 18 30 60 00 00 3c 66 6e 7e 76 66 3c 00     ....0`..<fn~vf<.
     925:	18 38 18 18 18 18 7e 00 3c 66 06 0c 18 30 7e 00     .8....~.<f...0~.
     935:	3c 66 06 1c 06 66 3c 00 0c 1c 3c 6c 7e 0c 0c 00     <f...f<...<l~...
     945:	7e 60 7c 06 06 66 3c 00 1c 30 60 7c 66 66 3c 00     ~`|..f<..0`|ff<.
     955:	7e 06 0c 18 30 30 30 00 3c 66 66 3c 66 66 3c 00     ~...000.<ff<ff<.
     965:	3c 66 66 3e 06 0c 38 00 00 00 18 18 00 18 18 00     <ff>..8.........
     975:	00 00 18 18 00 18 18 30 0c 18 30 60 30 18 0c 00     .......0..0`0...
     985:	00 00 7e 00 7e 00 00 00 30 18 0c 06 0c 18 30 00     ..~.~...0.....0.
     995:	3c 66 0c 18 18 00 18 00 3c 66 6e 6a 6e 60 3c 00     <f......<fnjn`<.
     9a5:	3c 66 66 7e 66 66 66 00 7c 66 66 7c 66 66 7c 00     <ff~fff.|ff|ff|.
     9b5:	3c 66 60 60 60 66 3c 00 78 6c 66 66 66 6c 78 00     <f```f<.xlffflx.
     9c5:	7e 60 60 7c 60 60 7e 00 7e 60 60 7c 60 60 60 00     ~``|``~.~``|```.
     9d5:	3c 66 60 6e 66 66 3c 00 66 66 66 7e 66 66 66 00     <f`nff<.fff~fff.
     9e5:	7e 18 18 18 18 18 7e 00 3e 0c 0c 0c 0c 6c 38 00     ~.....~.>....l8.
     9f5:	66 6c 78 70 78 6c 66 00 60 60 60 60 60 60 7e 00     flxpxlf.``````~.
     a05:	63 77 7f 6b 6b 63 63 00 66 66 76 7e 6e 66 66 00     cw.kkcc.ffv~nff.
     a15:	3c 66 66 66 66 66 3c 00 7c 66 66 7c 60 60 60 00     <fffff<.|ff|```.
     a25:	3c 66 66 66 6a 6c 36 00 7c 66 66 7c 6c 66 66 00     <fffjl6.|ff|lff.
     a35:	3c 66 60 3c 06 66 3c 00 7e 18 18 18 18 18 18 00     <f`<.f<.~.......
     a45:	66 66 66 66 66 66 3c 00 66 66 66 66 66 3c 18 00     ffffff<.fffff<..
     a55:	63 63 6b 6b 7f 77 63 00 66 66 3c 18 3c 66 66 00     cckk.wc.ff<.<ff.
     a65:	66 66 66 3c 18 18 18 00 7e 06 0c 18 30 60 7e 00     fff<....~...0`~.
     a75:	7c 60 60 60 60 60 7c 00 00 60 30 18 0c 06 00 00     |`````|..`0.....
     a85:	3e 06 06 06 06 06 3e 00 18 3c 66 42 00 00 00 00     >.....>..<fB....
     a95:	00 00 00 00 00 00 00 ff 30 18 0c 00 00 00 00 00     ........0.......
     aa5:	00 00 3c 06 3e 66 3e 00 60 60 7c 66 66 66 7c 00     ..<.>f>.``|fff|.
     ab5:	00 00 3c 66 60 66 3c 00 06 06 3e 66 66 66 3e 00     ..<f`f<...>fff>.
     ac5:	00 00 3c 66 7e 60 3c 00 1c 30 30 7c 30 30 30 00     ..<f~`<..00|000.
     ad5:	00 00 3e 66 66 3e 06 3c 60 60 7c 66 66 66 66 00     ..>ff>.<``|ffff.
     ae5:	18 00 38 18 18 18 3c 00 18 00 38 18 18 18 18 70     ..8...<...8....p
     af5:	60 60 66 6c 78 6c 66 00 38 18 18 18 18 18 3c 00     ``flxlf.8.....<.
     b05:	00 00 36 7f 6b 6b 63 00 00 00 7c 66 66 66 66 00     ..6.kkc...|ffff.
     b15:	00 00 3c 66 66 66 3c 00 00 00 7c 66 66 7c 60 60     ..<fff<...|ff|``
     b25:	00 00 3e 66 66 3e 06 07 00 00 6c 76 60 60 60 00     ..>ff>....lv```.
     b35:	00 00 3e 60 3c 06 7c 00 30 30 7c 30 30 30 1c 00     ..>`<.|.00|000..
     b45:	00 00 66 66 66 66 3e 00 00 00 66 66 66 3c 18 00     ..ffff>...fff<..
     b55:	00 00 63 6b 6b 7f 36 00 00 00 66 3c 18 3c 66 00     ..ckk.6...f<.<f.
     b65:	00 00 66 66 66 3e 06 3c 00 00 7e 0c 18 30 7e 00     ..fff>.<..~..0~.
     b75:	0c 18 18 70 18 18 0c 00 18 18 18 18 18 18 18 00     ...p............
     b85:	30 18 18 0e 18 18 30 00 31 6b 46 00 00 00 00 00     0.....0.1kF.....
     b95:	fe fe fe fe fe fe fe fe 00 00 00 00 00 00 00 00     ................
     ba5:	0e 0e 0e 00 00 00 00 00 e0 e0 e0 00 00 00 00 00     ................
     bb5:	ee ee ee 00 00 00 00 00 00 00 00 00 0e 0e 0e 00     ................
     bc5:	0e 0e 0e 00 0e 0e 0e 00 e0 e0 e0 00 0e 0e 0e 00     ................
     bd5:	ee ee ee 00 0e 0e 0e 00 00 00 00 00 e0 e0 e0 00     ................
     be5:	0e 0e 0e 00 e0 e0 e0 00 e0 e0 e0 00 e0 e0 e0 00     ................
     bf5:	ee ee ee 00 e0 e0 e0 00 00 00 00 00 ee ee ee 00     ................
     c05:	0e 0e 0e 00 ee ee ee 00 e0 e0 e0 00 ee ee ee 00     ................
     c15:	ee ee ee 00 ee ee ee 00 18 00 00 18 18 00 00 18     ................
     c25:	18 18 00 00 18 18 00 00 00 18 18 00 00 18 18 00     ................
     c35:	00 00 18 18 00 00 18 18 00 00 00 99 99 00 00 00     ................
     c45:	00 00 00 cc cc 00 00 00 00 00 00 66 66 00 00 00     ...........ff...
     c55:	00 00 00 33 33 00 00 00 00 00 00 19 19 00 00 18     ...33...........
     c65:	00 00 00 0c 0c 00 18 18 00 00 00 06 06 18 18 00     ................
     c75:	00 00 00 03 1b 18 00 00 00 00 00 98 98 00 00 18     ................
     c85:	00 00 00 c0 d8 18 00 00 00 00 00 60 60 18 18 00     ...........``...
     c95:	00 00 00 30 30 00 18 18 18 00 00 19 19 00 00 00     ...00...........
     ca5:	00 00 18 1b 03 00 00 00 00 18 18 06 06 00 00 00     ................
     cb5:	18 18 00 0c 0c 00 00 00 18 00 00 98 98 00 00 00     ................
     cc5:	18 18 00 30 30 00 00 00 00 18 18 60 60 00 00 00     ...00......``...
     cd5:	00 00 18 d8 c0 00 00 00 07 18 20 47 4f 9c 98 98     .......... GO...
     ce5:	c0 30 08 c4 e4 12 13 13 98 98 48 47 20 18 07 03     .0........HG ...
     cf5:	13 13 27 c6 0e 3c f8 e0 ff 00 00 ff ff 00 00 00     ..'..<..........
     d05:	00 00 00 ff 00 00 ff ff 98 98 98 98 98 98 98 98     ................
     d15:	13 13 13 13 13 13 13 13 1c 36 36 1c 00 00 00 00     .........66.....
     d25:	18 18 7e 18 18 7e 00 00 18 24 0c 10 3c 00 00 00     ..~..~...$..<...
     d35:	18 24 08 24 18 00 00 00 0c 18 30 00 00 00 00 00     .$.$......0.....
     d45:	66 66 66 66 7c 60 60 00 7f db db 7b 1b 1b 1b 00     ffff|``....{....
     d55:	00 00 18 18 00 00 00 00 ff fe fc f8 f0 e0 c0 80     ................
     d65:	ff 7f 3f 1f 0f 07 03 01 80 c0 e0 f0 f8 fc fe ff     ..?.............
     d75:	01 03 07 0f 1f 3f 7f ff aa 00 aa 00 aa 00 aa 00     .....?..........
     d85:	aa 55 aa 55 aa 55 aa 55 ff aa ff aa ff aa ff aa     .U.U.U.U........
     d95:	ff ff ff ff ff ff ff ff 00 38 2f ff ff 7f 00 00     .........8/.....
     da5:	00 1c f4 ff ff fe 00 00 18 1c fc bc fc 3c 3c 3c     .............<<<
     db5:	3c 3c 3c 3f 3d 3f 38 18 00 00 fc ff ff fc 00 00     <<<?=?8.........
     dc5:	00 00 3f ff ff 3f 00 00 3c 3c 3c 3c 3c 3c 18 18     ..?..?..<<<<<<..
     dd5:	18 18 3c 3c 3c 3c 3c 3c 00 00 ff e3 c7 ff 00 00     ..<<<<<<........
     de5:	3c 3c 2c 24 24 34 3c 3c 00 00 0f 1f 33 33 3e 3c     <<,$$4<<....33><
     df5:	00 00 f0 f8 cc cc 7c 3c 3c 3e 33 33 1f 0f 00 00     ......|<<>33....
     e05:	3c 7c cc cc f8 f0 00 00 00 00 00 00 00 00 00 00     <|..............
	...
     e25:	0f 0f 0f 0f 00 00 00 00 f0 f0 f0 f0 00 00 00 00     ................
     e35:	ff ff ff ff 00 00 00 00 00 00 00 00 0f 0f 0f 0f     ................
     e45:	0f 0f 0f 0f 0f 0f 0f 0f f0 f0 f0 f0 0f 0f 0f 0f     ................
     e55:	ff ff ff ff 0f 0f 0f 0f 00 00 00 00 f0 f0 f0 f0     ................
     e65:	0f 0f 0f 0f f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0     ................
     e75:	ff ff ff ff f0 f0 f0 f0 00 00 00 00 ff ff ff ff     ................
     e85:	0f 0f 0f 0f ff ff ff ff f0 f0 f0 f0 ff ff ff ff     ................
     e95:	ff ff ff ff ff ff ff ff 00 00 00 00 00 00 00 00     ................
     ea5:	00 00 00 18 18 00 00 00 00 7e 42 42 42 42 7e 00     .........~BBBB~.
     eb5:	00 7e 42 5a 5a 42 7e 00 00 40 04 00 20 00 02 00     .~BZZB~..@.. ...
     ec5:	ff 85 85 ff ff a1 a1 ff 3c 42 a5 81 a5 99 42 3c     ........<B....B<
     ed5:	3c 7e db ff db e7 7e 3c 3f 7f e0 c2 d8 d0 ca 43     <~....~<?......C
     ee5:	00 00 80 80 60 10 60 80 ff c0 a4 90 8f a8 88 88     ....`.`.........
     ef5:	ff 00 00 00 ff 00 00 00 ff 00 00 00 ff 00 00 00     ................
     f05:	ff 03 25 09 f1 15 11 11 40 30 1f 24 52 4b 64 59     ..%.....@0.$RKdY
     f15:	80 80 01 02 02 fe 94 24 8f 88 88 88 88 8f 88 88     .......$........
     f25:	ff 00 00 00 00 ff 00 00 ff 00 00 00 00 ff 00 00     ................
     f35:	f1 11 11 11 11 f1 11 11 4f 64 52 49 7f 7f 5b 75     ........OdRI..[u
     f45:	ff 80 80 80 00 00 00 00 88 88 8f 88 88 88 88 8f     ................
     f55:	00 00 ff 00 00 00 00 ff 00 00 ff 00 00 00 00 ff     ................
     f65:	11 11 f1 11 11 11 11 f1 5b 75 5b 75 5b 75 5a 7f     ........[u[u[uZ.
     f75:	00 00 00 00 c0 60 a0 e0 88 88 a8 8f 90 a4 c0 ff     .....`..........
     f85:	00 00 00 ff 00 00 00 ff 00 00 00 ff 00 00 00 ff     ................
     f95:	11 11 15 f1 09 25 03 ff 00                          .....%...

00000f9e <__ctors_end>:
     f9e:	11 24       	eor	r1, r1
     fa0:	1f be       	out	0x3f, r1	; 63
     fa2:	cf ef       	ldi	r28, 0xFF	; 255
     fa4:	d4 e0       	ldi	r29, 0x04	; 4
     fa6:	de bf       	out	0x3e, r29	; 62
     fa8:	cd bf       	out	0x3d, r28	; 61

00000faa <__do_copy_data>:
     faa:	11 e0       	ldi	r17, 0x01	; 1
     fac:	a0 e0       	ldi	r26, 0x00	; 0
     fae:	b1 e0       	ldi	r27, 0x01	; 1
     fb0:	ec e1       	ldi	r30, 0x1C	; 28
     fb2:	f9 e2       	ldi	r31, 0x29	; 41
     fb4:	02 c0       	rjmp	.+4      	; 0xfba <__do_copy_data+0x10>
     fb6:	05 90       	lpm	r0, Z+
     fb8:	0d 92       	st	X+, r0
     fba:	a4 30       	cpi	r26, 0x04	; 4
     fbc:	b1 07       	cpc	r27, r17
     fbe:	d9 f7       	brne	.-10     	; 0xfb6 <__do_copy_data+0xc>

00000fc0 <__do_clear_bss>:
     fc0:	13 e0       	ldi	r17, 0x03	; 3
     fc2:	a4 e0       	ldi	r26, 0x04	; 4
     fc4:	b1 e0       	ldi	r27, 0x01	; 1
     fc6:	01 c0       	rjmp	.+2      	; 0xfca <.do_clear_bss_start>

00000fc8 <.do_clear_bss_loop>:
     fc8:	1d 92       	st	X+, r1

00000fca <.do_clear_bss_start>:
     fca:	a8 32       	cpi	r26, 0x28	; 40
     fcc:	b1 07       	cpc	r27, r17
     fce:	e1 f7       	brne	.-8      	; 0xfc8 <.do_clear_bss_loop>
     fd0:	0e 94 b2 13 	call	0x2764	; 0x2764 <main>
     fd4:	0c 94 8c 14 	jmp	0x2918	; 0x2918 <_exit>

00000fd8 <__bad_interrupt>:
     fd8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000fdc <draw_game_preview>:

// Number of games.
#define GAME_COUNT            4

// Draws a preview box for a particular game.
void draw_game_preview(uint8_t game, int8_t y_offset) {
     fdc:	cf 93       	push	r28
     fde:	df 93       	push	r29
  uint8_t i = game * 5 * 7;
     fe0:	93 e2       	ldi	r25, 0x23	; 35
     fe2:	89 9f       	mul	r24, r25
     fe4:	80 2d       	mov	r24, r0
     fe6:	11 24       	eor	r1, r1
  int8_t y = y_offset + GAME_PREVIEW_TOP - 1;
     fe8:	6d 5f       	subi	r22, 0xFD	; 253

// Number of games.
#define GAME_COUNT            4

// Draws a preview box for a particular game.
void draw_game_preview(uint8_t game, int8_t y_offset) {
     fea:	90 e2       	ldi	r25, 0x20	; 32
     fec:	69 02       	muls	r22, r25
     fee:	d0 01       	movw	r26, r0
     ff0:	11 24       	eor	r1, r1
     ff2:	40 e0       	ldi	r20, 0x00	; 0
     ff4:	50 e0       	ldi	r21, 0x00	; 0
  uint8_t i = game * 5 * 7;
  int8_t y = y_offset + GAME_PREVIEW_TOP - 1;
  for (int8_t r = -1; r < 8; ++r) {
     ff6:	9f ef       	ldi	r25, 0xFF	; 255

// Number of games.
#define GAME_COUNT            4

// Draws a preview box for a particular game.
void draw_game_preview(uint8_t game, int8_t y_offset) {
     ff8:	a4 5e       	subi	r26, 0xE4	; 228
     ffa:	be 4f       	sbci	r27, 0xFE	; 254
     ffc:	1b c0       	rjmp	.+54     	; 0x1034 <draw_game_preview+0x58>
  uint8_t i = game * 5 * 7;
  int8_t y = y_offset + GAME_PREVIEW_TOP - 1;
  for (int8_t r = -1; r < 8; ++r) {
    for (uint8_t c = 0; c < 5; ++c) {
      char preview_c = (r >= 0 && r < 7) ? pgm_read_byte(game_previews + i++) : ' ';
     ffe:	97 30       	cpi	r25, 0x07	; 7
    1000:	38 f4       	brcc	.+14     	; 0x1010 <draw_game_preview+0x34>
    1002:	e8 2f       	mov	r30, r24
    1004:	f0 e0       	ldi	r31, 0x00	; 0
    1006:	e8 59       	subi	r30, 0x98	; 152
    1008:	ff 4f       	sbci	r31, 0xFF	; 255
    100a:	8f 5f       	subi	r24, 0xFF	; 255
    100c:	74 91       	lpm	r23, Z+
    100e:	01 c0       	rjmp	.+2      	; 0x1012 <draw_game_preview+0x36>
    1010:	70 e2       	ldi	r23, 0x20	; 32
      if (y >= 0 && y < 16) {
    1012:	60 31       	cpi	r22, 0x10	; 16
    1014:	20 f4       	brcc	.+8      	; 0x101e <draw_game_preview+0x42>

// Number of games.
#define GAME_COUNT            4

// Draws a preview box for a particular game.
void draw_game_preview(uint8_t game, int8_t y_offset) {
    1016:	fe 01       	movw	r30, r28
    1018:	e2 0f       	add	r30, r18
    101a:	f3 1f       	adc	r31, r19
  int8_t y = y_offset + GAME_PREVIEW_TOP - 1;
  for (int8_t r = -1; r < 8; ++r) {
    for (uint8_t c = 0; c < 5; ++c) {
      char preview_c = (r >= 0 && r < 7) ? pgm_read_byte(game_previews + i++) : ' ';
      if (y >= 0 && y < 16) {
	tvtext_buffer[y * TVTEXT_BUFFER_WIDTH + c + GAME_PREVIEW_LEFT] = preview_c;
    101c:	74 83       	std	Z+4, r23	; 0x04
    101e:	2f 5f       	subi	r18, 0xFF	; 255
    1020:	3f 4f       	sbci	r19, 0xFF	; 255
// Draws a preview box for a particular game.
void draw_game_preview(uint8_t game, int8_t y_offset) {
  uint8_t i = game * 5 * 7;
  int8_t y = y_offset + GAME_PREVIEW_TOP - 1;
  for (int8_t r = -1; r < 8; ++r) {
    for (uint8_t c = 0; c < 5; ++c) {
    1022:	25 30       	cpi	r18, 0x05	; 5
    1024:	31 05       	cpc	r19, r1
    1026:	59 f7       	brne	.-42     	; 0xffe <draw_game_preview+0x22>
      char preview_c = (r >= 0 && r < 7) ? pgm_read_byte(game_previews + i++) : ' ';
      if (y >= 0 && y < 16) {
	tvtext_buffer[y * TVTEXT_BUFFER_WIDTH + c + GAME_PREVIEW_LEFT] = preview_c;
      }
    }
    ++y;
    1028:	6f 5f       	subi	r22, 0xFF	; 255

// Draws a preview box for a particular game.
void draw_game_preview(uint8_t game, int8_t y_offset) {
  uint8_t i = game * 5 * 7;
  int8_t y = y_offset + GAME_PREVIEW_TOP - 1;
  for (int8_t r = -1; r < 8; ++r) {
    102a:	9f 5f       	subi	r25, 0xFF	; 255
    102c:	40 5e       	subi	r20, 0xE0	; 224
    102e:	5f 4f       	sbci	r21, 0xFF	; 255
    1030:	98 30       	cpi	r25, 0x08	; 8
    1032:	31 f0       	breq	.+12     	; 0x1040 <draw_game_preview+0x64>

// Number of games.
#define GAME_COUNT            4

// Draws a preview box for a particular game.
void draw_game_preview(uint8_t game, int8_t y_offset) {
    1034:	ed 01       	movw	r28, r26
    1036:	c4 0f       	add	r28, r20
    1038:	d5 1f       	adc	r29, r21
    103a:	20 e0       	ldi	r18, 0x00	; 0
    103c:	30 e0       	ldi	r19, 0x00	; 0
    103e:	df cf       	rjmp	.-66     	; 0xffe <draw_game_preview+0x22>
	tvtext_buffer[y * TVTEXT_BUFFER_WIDTH + c + GAME_PREVIEW_LEFT] = preview_c;
      }
    }
    ++y;
  }
}
    1040:	df 91       	pop	r29
    1042:	cf 91       	pop	r28
    1044:	08 95       	ret

00001046 <countdown>:

void countdown(void) {
    1046:	8f 92       	push	r8
    1048:	9f 92       	push	r9
    104a:	bf 92       	push	r11
    104c:	cf 92       	push	r12
    104e:	df 92       	push	r13
    1050:	ff 92       	push	r15
    1052:	0f 93       	push	r16
    1054:	1f 93       	push	r17
    1056:	cf 93       	push	r28
    1058:	df 93       	push	r29
	// Disable the cursor.
	tvtext_flags &= ~_BV(TVTEXT_CURSOR_ENABLED);
    105a:	80 91 14 01 	lds	r24, 0x0114
    105e:	8b 7f       	andi	r24, 0xFB	; 251
    1060:	80 93 14 01 	sts	0x0114, r24
	// Count down from 5 to 0.
	tvtext_wait_vsync();
    1064:	0e 94 2e 12 	call	0x245c	; 0x245c <tvtext_wait_vsync>
    1068:	85 e3       	ldi	r24, 0x35	; 53
    106a:	c8 2e       	mov	r12, r24
			uint8_t pixels = tvtext_get_font_row(countdown + '0', r);
			for (uint8_t c = 0; c < 6; ++c) {
				if (pixels & 0x80) {
					for (uint8_t y = 0; y < 2; ++y) {
						for (uint8_t x = 0; x < 3; ++x) {
							tvtext_buffer[(r * 2 + y + 1) * 32 + (c * 3) + x + 8] = 127;
    106c:	9f e7       	ldi	r25, 0x7F	; 127
    106e:	f9 2e       	mov	r15, r25
						}
						tvtext_buffer[(r * 2 + y + 2) * 32 + (c * 3) + 3 + 8] = 188;
    1070:	2c eb       	ldi	r18, 0xBC	; 188
    1072:	d2 2e       	mov	r13, r18
	// Disable the cursor.
	tvtext_flags &= ~_BV(TVTEXT_CURSOR_ENABLED);
	// Count down from 5 to 0.
	tvtext_wait_vsync();
	for (int8_t countdown = 5; countdown >= 0; --countdown) {
		tvtext_clear();
    1074:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <tvtext_clear>
    1078:	00 e0       	ldi	r16, 0x00	; 0
    107a:	10 e0       	ldi	r17, 0x00	; 0
    107c:	81 2c       	mov	r8, r1
    107e:	91 2c       	mov	r9, r1
		for (uint8_t r = 0; r < 7; ++r) {
    1080:	b1 2c       	mov	r11, r1
			uint8_t pixels = tvtext_get_font_row(countdown + '0', r);
    1082:	6b 2d       	mov	r22, r11
    1084:	8c 2d       	mov	r24, r12
    1086:	0e 94 3a 12 	call	0x2474	; 0x2474 <tvtext_get_font_row>
    }
    ++y;
  }
}

void countdown(void) {
    108a:	f4 01       	movw	r30, r8
    108c:	e9 57       	subi	r30, 0x79	; 121
    108e:	fe 4f       	sbci	r31, 0xFE	; 254
    1090:	96 e0       	ldi	r25, 0x06	; 6
	for (int8_t countdown = 5; countdown >= 0; --countdown) {
		tvtext_clear();
		for (uint8_t r = 0; r < 7; ++r) {
			uint8_t pixels = tvtext_get_font_row(countdown + '0', r);
			for (uint8_t c = 0; c < 6; ++c) {
				if (pixels & 0x80) {
    1092:	87 fd       	sbrc	r24, 7
    1094:	06 c0       	rjmp	.+12     	; 0x10a2 <countdown+0x5c>
					}
					for (uint8_t x = 0; x < 3; ++x) {
						tvtext_buffer[(r * 2 + 3) * 32 + (c * 3) + x + 9] = 188;
					}
				}
				pixels <<= 1;
    1096:	88 0f       	add	r24, r24
    1098:	91 50       	subi	r25, 0x01	; 1
    109a:	33 96       	adiw	r30, 0x03	; 3
	tvtext_wait_vsync();
	for (int8_t countdown = 5; countdown >= 0; --countdown) {
		tvtext_clear();
		for (uint8_t r = 0; r < 7; ++r) {
			uint8_t pixels = tvtext_get_font_row(countdown + '0', r);
			for (uint8_t c = 0; c < 6; ++c) {
    109c:	91 11       	cpse	r25, r1
    109e:	f9 cf       	rjmp	.-14     	; 0x1092 <countdown+0x4c>
    10a0:	2a c0       	rjmp	.+84     	; 0x10f6 <countdown+0xb0>
    }
    ++y;
  }
}

void countdown(void) {
    10a2:	df 01       	movw	r26, r30
    10a4:	a3 54       	subi	r26, 0x43	; 67
    10a6:	b1 09       	sbc	r27, r1
			uint8_t pixels = tvtext_get_font_row(countdown + '0', r);
			for (uint8_t c = 0; c < 6; ++c) {
				if (pixels & 0x80) {
					for (uint8_t y = 0; y < 2; ++y) {
						for (uint8_t x = 0; x < 3; ++x) {
							tvtext_buffer[(r * 2 + y + 1) * 32 + (c * 3) + x + 8] = 127;
    10a8:	fc 92       	st	X, r15
    }
    ++y;
  }
}

void countdown(void) {
    10aa:	df 01       	movw	r26, r30
    10ac:	a2 54       	subi	r26, 0x42	; 66
    10ae:	b1 09       	sbc	r27, r1
			uint8_t pixels = tvtext_get_font_row(countdown + '0', r);
			for (uint8_t c = 0; c < 6; ++c) {
				if (pixels & 0x80) {
					for (uint8_t y = 0; y < 2; ++y) {
						for (uint8_t x = 0; x < 3; ++x) {
							tvtext_buffer[(r * 2 + y + 1) * 32 + (c * 3) + x + 8] = 127;
    10b0:	fc 92       	st	X, r15
    }
    ++y;
  }
}

void countdown(void) {
    10b2:	df 01       	movw	r26, r30
    10b4:	a1 54       	subi	r26, 0x41	; 65
    10b6:	b1 09       	sbc	r27, r1
			uint8_t pixels = tvtext_get_font_row(countdown + '0', r);
			for (uint8_t c = 0; c < 6; ++c) {
				if (pixels & 0x80) {
					for (uint8_t y = 0; y < 2; ++y) {
						for (uint8_t x = 0; x < 3; ++x) {
							tvtext_buffer[(r * 2 + y + 1) * 32 + (c * 3) + x + 8] = 127;
    10b8:	fc 92       	st	X, r15
    }
    ++y;
  }
}

void countdown(void) {
    10ba:	df 01       	movw	r26, r30
    10bc:	90 97       	sbiw	r26, 0x20	; 32
				if (pixels & 0x80) {
					for (uint8_t y = 0; y < 2; ++y) {
						for (uint8_t x = 0; x < 3; ++x) {
							tvtext_buffer[(r * 2 + y + 1) * 32 + (c * 3) + x + 8] = 127;
						}
						tvtext_buffer[(r * 2 + y + 2) * 32 + (c * 3) + 3 + 8] = 188;
    10be:	dc 92       	st	X, r13
    }
    ++y;
  }
}

void countdown(void) {
    10c0:	df 01       	movw	r26, r30
    10c2:	93 97       	sbiw	r26, 0x23	; 35
			uint8_t pixels = tvtext_get_font_row(countdown + '0', r);
			for (uint8_t c = 0; c < 6; ++c) {
				if (pixels & 0x80) {
					for (uint8_t y = 0; y < 2; ++y) {
						for (uint8_t x = 0; x < 3; ++x) {
							tvtext_buffer[(r * 2 + y + 1) * 32 + (c * 3) + x + 8] = 127;
    10c4:	fc 92       	st	X, r15
    }
    ++y;
  }
}

void countdown(void) {
    10c6:	df 01       	movw	r26, r30
    10c8:	92 97       	sbiw	r26, 0x22	; 34
			uint8_t pixels = tvtext_get_font_row(countdown + '0', r);
			for (uint8_t c = 0; c < 6; ++c) {
				if (pixels & 0x80) {
					for (uint8_t y = 0; y < 2; ++y) {
						for (uint8_t x = 0; x < 3; ++x) {
							tvtext_buffer[(r * 2 + y + 1) * 32 + (c * 3) + x + 8] = 127;
    10ca:	fc 92       	st	X, r15
    }
    ++y;
  }
}

void countdown(void) {
    10cc:	df 01       	movw	r26, r30
    10ce:	91 97       	sbiw	r26, 0x21	; 33
			uint8_t pixels = tvtext_get_font_row(countdown + '0', r);
			for (uint8_t c = 0; c < 6; ++c) {
				if (pixels & 0x80) {
					for (uint8_t y = 0; y < 2; ++y) {
						for (uint8_t x = 0; x < 3; ++x) {
							tvtext_buffer[(r * 2 + y + 1) * 32 + (c * 3) + x + 8] = 127;
    10d0:	fc 92       	st	X, r15
						}
						tvtext_buffer[(r * 2 + y + 2) * 32 + (c * 3) + 3 + 8] = 188;
    10d2:	d0 82       	st	Z, r13
    }
    ++y;
  }
}

void countdown(void) {
    10d4:	df 01       	movw	r26, r30
    10d6:	a0 0f       	add	r26, r16
    10d8:	b1 1f       	adc	r27, r17
    10da:	a8 0d       	add	r26, r8
    10dc:	b9 1d       	adc	r27, r9
    10de:	9d 01       	movw	r18, r26
    10e0:	22 50       	subi	r18, 0x02	; 2
    10e2:	31 09       	sbc	r19, r1
							tvtext_buffer[(r * 2 + y + 1) * 32 + (c * 3) + x + 8] = 127;
						}
						tvtext_buffer[(r * 2 + y + 2) * 32 + (c * 3) + 3 + 8] = 188;
					}
					for (uint8_t x = 0; x < 3; ++x) {
						tvtext_buffer[(r * 2 + 3) * 32 + (c * 3) + x + 9] = 188;
    10e4:	e9 01       	movw	r28, r18
    10e6:	d8 82       	st	Y, r13
    }
    ++y;
  }
}

void countdown(void) {
    10e8:	9d 01       	movw	r18, r26
    10ea:	21 50       	subi	r18, 0x01	; 1
    10ec:	31 09       	sbc	r19, r1
							tvtext_buffer[(r * 2 + y + 1) * 32 + (c * 3) + x + 8] = 127;
						}
						tvtext_buffer[(r * 2 + y + 2) * 32 + (c * 3) + 3 + 8] = 188;
					}
					for (uint8_t x = 0; x < 3; ++x) {
						tvtext_buffer[(r * 2 + 3) * 32 + (c * 3) + x + 9] = 188;
    10ee:	e9 01       	movw	r28, r18
    10f0:	d8 82       	st	Y, r13
    10f2:	dc 92       	st	X, r13
    10f4:	d0 cf       	rjmp	.-96     	; 0x1096 <countdown+0x50>
	tvtext_flags &= ~_BV(TVTEXT_CURSOR_ENABLED);
	// Count down from 5 to 0.
	tvtext_wait_vsync();
	for (int8_t countdown = 5; countdown >= 0; --countdown) {
		tvtext_clear();
		for (uint8_t r = 0; r < 7; ++r) {
    10f6:	b3 94       	inc	r11
    10f8:	d0 e4       	ldi	r29, 0x40	; 64
    10fa:	8d 0e       	add	r8, r29
    10fc:	91 1c       	adc	r9, r1
    10fe:	00 54       	subi	r16, 0x40	; 64
    1100:	11 09       	sbc	r17, r1
    1102:	87 e0       	ldi	r24, 0x07	; 7
    1104:	b8 12       	cpse	r11, r24
    1106:	bd cf       	rjmp	.-134    	; 0x1082 <countdown+0x3c>
					}
				}
				pixels <<= 1;
			}
		}
		delay_ms(500);
    1108:	84 ef       	ldi	r24, 0xF4	; 244
    110a:	91 e0       	ldi	r25, 0x01	; 1
    110c:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <delay_ms>
    1110:	ca 94       	dec	r12
void countdown(void) {
	// Disable the cursor.
	tvtext_flags &= ~_BV(TVTEXT_CURSOR_ENABLED);
	// Count down from 5 to 0.
	tvtext_wait_vsync();
	for (int8_t countdown = 5; countdown >= 0; --countdown) {
    1112:	cf e2       	ldi	r28, 0x2F	; 47
    1114:	cc 12       	cpse	r12, r28
    1116:	ae cf       	rjmp	.-164    	; 0x1074 <countdown+0x2e>
			}
		}
		delay_ms(500);
	}
	// Enable the cursor.
	tvtext_flags |= _BV(TVTEXT_CURSOR_ENABLED);
    1118:	80 91 14 01 	lds	r24, 0x0114
    111c:	84 60       	ori	r24, 0x04	; 4
    111e:	80 93 14 01 	sts	0x0114, r24
}
    1122:	df 91       	pop	r29
    1124:	cf 91       	pop	r28
    1126:	1f 91       	pop	r17
    1128:	0f 91       	pop	r16
    112a:	ff 90       	pop	r15
    112c:	df 90       	pop	r13
    112e:	cf 90       	pop	r12
    1130:	bf 90       	pop	r11
    1132:	9f 90       	pop	r9
    1134:	8f 90       	pop	r8
    1136:	08 95       	ret

00001138 <setup>:
#define INSTRUCTIONS_LEFT   ((TVTEXT_BUFFER_WIDTH-(INSTRUCTIONS_WIDTH+2))/2)
#define INSTRUCTIONS_TOP    ((TVTEXT_BUFFER_HEIGHT-(INSTRUCTIONS_HEIGHT+2))/2)
#define INSTRUCTIONS_RIGHT  (INSTRUCTIONS_LEFT+INSTRUCTIONS_WIDTH+1)
#define INSTRUCTIONS_BOTTOM (INSTRUCTIONS_TOP+INSTRUCTIONS_HEIGHT+1)

void setup(void) {
    1138:	cf 93       	push	r28
    113a:	df 93       	push	r29
	
	// Draw the instructions.
	scroll_out_instant();
    113c:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <scroll_out_instant>
	tvtext_clear();
    1140:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <tvtext_clear>
	draw_rounded_rectangle(0, 0, TVTEXT_BUFFER_WIDTH - 1, TVTEXT_BUFFER_HEIGHT - 1);
    1144:	2f e0       	ldi	r18, 0x0F	; 15
    1146:	4f e1       	ldi	r20, 0x1F	; 31
    1148:	60 e0       	ldi	r22, 0x00	; 0
    114a:	80 e0       	ldi	r24, 0x00	; 0
    114c:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <draw_rounded_rectangle>
	draw_animated_rectangle(1, 1, TVTEXT_BUFFER_WIDTH - 2, TVTEXT_BUFFER_HEIGHT - 2);
    1150:	2e e0       	ldi	r18, 0x0E	; 14
    1152:	4e e1       	ldi	r20, 0x1E	; 30
    1154:	61 e0       	ldi	r22, 0x01	; 1
    1156:	81 e0       	ldi	r24, 0x01	; 1
    1158:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <draw_animated_rectangle>

	tvtext_set_viewport(INSTRUCTIONS_LEFT + 1, INSTRUCTIONS_TOP + 1, INSTRUCTIONS_RIGHT - 1, INSTRUCTIONS_BOTTOM - 1);
    115c:	29 e0       	ldi	r18, 0x09	; 9
    115e:	48 e1       	ldi	r20, 0x18	; 24
    1160:	66 e0       	ldi	r22, 0x06	; 6
    1162:	87 e0       	ldi	r24, 0x07	; 7
    1164:	0e 94 02 10 	call	0x2004	; 0x2004 <tvtext_set_viewport>
	tvtext_puts_P(PSTR(
    1168:	84 e1       	ldi	r24, 0x14	; 20
    116a:	91 e0       	ldi	r25, 0x01	; 1
    116c:	0e 94 14 12 	call	0x2428	; 0x2428 <tvtext_puts_P>
		"Use the  joypad to"
		"fit as much of the"
		"rectangle  on  the"
		"screen as possible"
	));
	tvtext_reset_viewport_cursor_home();
    1170:	0e 94 38 10 	call	0x2070	; 0x2070 <tvtext_reset_viewport_cursor_home>
	scroll_in();
    1174:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <scroll_in>

	uint8_t old_joypad = ~PINC & JOY_ALL;
    1178:	c6 b1       	in	r28, 0x06	; 6
    117a:	c0 95       	com	r28
    117c:	cf 73       	andi	r28, 0x3F	; 63
			}
			if (joypad & JOY_DOWN) {
				++tvtext_offset_y;
			}
			if (joypad & JOY_FIRE2) {
				tvtext_flags ^= _BV(TVTEXT_INVERTED);
    117e:	d0 e1       	ldi	r29, 0x10	; 16
	scroll_in();

	uint8_t old_joypad = ~PINC & JOY_ALL;
	uint8_t joypad;
	do {
		tvtext_wait_vsync();
    1180:	0e 94 2e 12 	call	0x245c	; 0x245c <tvtext_wait_vsync>
		draw_animated_rectangle(1, 1, TVTEXT_BUFFER_WIDTH - 2, TVTEXT_BUFFER_HEIGHT - 2);
    1184:	2e e0       	ldi	r18, 0x0E	; 14
    1186:	4e e1       	ldi	r20, 0x1E	; 30
    1188:	61 e0       	ldi	r22, 0x01	; 1
    118a:	81 e0       	ldi	r24, 0x01	; 1
    118c:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <draw_animated_rectangle>

		joypad = ~PINC & JOY_ALL;
    1190:	26 b1       	in	r18, 0x06	; 6
    1192:	20 95       	com	r18
    1194:	32 2f       	mov	r19, r18
    1196:	3f 73       	andi	r19, 0x3F	; 63
		if (joypad != old_joypad) {
    1198:	3c 17       	cp	r19, r28
    119a:	81 f1       	breq	.+96     	; 0x11fc <setup+0xc4>
			old_joypad = joypad;

			if ((joypad & JOY_LEFT) && (tvtext_offset_x > 0)) {
    119c:	20 ff       	sbrs	r18, 0
    119e:	07 c0       	rjmp	.+14     	; 0x11ae <setup+0x76>
    11a0:	80 91 1b 01 	lds	r24, 0x011B
    11a4:	88 23       	and	r24, r24
    11a6:	19 f0       	breq	.+6      	; 0x11ae <setup+0x76>
				--tvtext_offset_x;
    11a8:	81 50       	subi	r24, 0x01	; 1
    11aa:	80 93 1b 01 	sts	0x011B, r24
			}
			if ((joypad & JOY_RIGHT) && (tvtext_offset_x < TVTEXT_OFFSET_X_MAX)) {
    11ae:	21 ff       	sbrs	r18, 1
    11b0:	07 c0       	rjmp	.+14     	; 0x11c0 <setup+0x88>
    11b2:	80 91 1b 01 	lds	r24, 0x011B
    11b6:	83 31       	cpi	r24, 0x13	; 19
    11b8:	18 f4       	brcc	.+6      	; 0x11c0 <setup+0x88>
				++tvtext_offset_x;
    11ba:	8f 5f       	subi	r24, 0xFF	; 255
    11bc:	80 93 1b 01 	sts	0x011B, r24
			}
			if (joypad & JOY_UP) {
    11c0:	22 ff       	sbrs	r18, 2
    11c2:	09 c0       	rjmp	.+18     	; 0x11d6 <setup+0x9e>
				--tvtext_offset_y;
    11c4:	80 91 16 01 	lds	r24, 0x0116
    11c8:	90 91 17 01 	lds	r25, 0x0117
    11cc:	01 97       	sbiw	r24, 0x01	; 1
    11ce:	90 93 17 01 	sts	0x0117, r25
    11d2:	80 93 16 01 	sts	0x0116, r24
			}
			if (joypad & JOY_DOWN) {
    11d6:	23 ff       	sbrs	r18, 3
    11d8:	09 c0       	rjmp	.+18     	; 0x11ec <setup+0xb4>
				++tvtext_offset_y;
    11da:	80 91 16 01 	lds	r24, 0x0116
    11de:	90 91 17 01 	lds	r25, 0x0117
    11e2:	01 96       	adiw	r24, 0x01	; 1
    11e4:	90 93 17 01 	sts	0x0117, r25
    11e8:	80 93 16 01 	sts	0x0116, r24
			}
			if (joypad & JOY_FIRE2) {
    11ec:	25 ff       	sbrs	r18, 5
    11ee:	05 c0       	rjmp	.+10     	; 0x11fa <setup+0xc2>
				tvtext_flags ^= _BV(TVTEXT_INVERTED);
    11f0:	80 91 14 01 	lds	r24, 0x0114
    11f4:	8d 27       	eor	r24, r29
    11f6:	80 93 14 01 	sts	0x0114, r24
				--tvtext_offset_y;
			}
			if (joypad & JOY_DOWN) {
				++tvtext_offset_y;
			}
			if (joypad & JOY_FIRE2) {
    11fa:	c3 2f       	mov	r28, r19
				tvtext_flags ^= _BV(TVTEXT_INVERTED);
			}
		}

	} while (!(joypad & JOY_FIRE1));
    11fc:	24 ff       	sbrs	r18, 4
    11fe:	c0 cf       	rjmp	.-128    	; 0x1180 <setup+0x48>
	scroll_out();
    1200:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <scroll_out>
	tvtext_clear();
    1204:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <tvtext_clear>
	scroll_in_instant();

}
    1208:	df 91       	pop	r29
    120a:	cf 91       	pop	r28
		}

	} while (!(joypad & JOY_FIRE1));
	scroll_out();
	tvtext_clear();
	scroll_in_instant();
    120c:	0c 94 13 0d 	jmp	0x1a26	; 0x1a26 <scroll_in_instant>

00001210 <credit>:
}

void credit(void) {
	
	// Draw the instructions.
	scroll_out_instant();
    1210:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <scroll_out_instant>
	tvtext_clear();
    1214:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <tvtext_clear>
	draw_rounded_rectangle(0, 0, TVTEXT_BUFFER_WIDTH - 1, TVTEXT_BUFFER_HEIGHT - 1);
    1218:	2f e0       	ldi	r18, 0x0F	; 15
    121a:	4f e1       	ldi	r20, 0x1F	; 31
    121c:	60 e0       	ldi	r22, 0x00	; 0
    121e:	80 e0       	ldi	r24, 0x00	; 0
    1220:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <draw_rounded_rectangle>
	draw_animated_rectangle(1, 1, TVTEXT_BUFFER_WIDTH - 2, TVTEXT_BUFFER_HEIGHT - 2);
    1224:	2e e0       	ldi	r18, 0x0E	; 14
    1226:	4e e1       	ldi	r20, 0x1E	; 30
    1228:	61 e0       	ldi	r22, 0x01	; 1
    122a:	81 e0       	ldi	r24, 0x01	; 1
    122c:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <draw_animated_rectangle>

	tvtext_set_viewport(INSTRUCTIONS_LEFT + 1, INSTRUCTIONS_TOP + 1, INSTRUCTIONS_RIGHT - 1, INSTRUCTIONS_BOTTOM - 1);
    1230:	29 e0       	ldi	r18, 0x09	; 9
    1232:	48 e1       	ldi	r20, 0x18	; 24
    1234:	66 e0       	ldi	r22, 0x06	; 6
    1236:	87 e0       	ldi	r24, 0x07	; 7
    1238:	0e 94 02 10 	call	0x2004	; 0x2004 <tvtext_set_viewport>
	tvtext_puts_P(PSTR(
    123c:	8d e5       	ldi	r24, 0x5D	; 93
    123e:	91 e0       	ldi	r25, 0x01	; 1
    1240:	0e 94 14 12 	call	0x2428	; 0x2428 <tvtext_puts_P>
		"                  "
		"  HANAKAI STUDIO  "
		"       2013       "
		"                  "
	));
	tvtext_reset_viewport_cursor_home();
    1244:	0e 94 38 10 	call	0x2070	; 0x2070 <tvtext_reset_viewport_cursor_home>
	scroll_in();
    1248:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <scroll_in>

	uint8_t joypad;
	do {
		tvtext_wait_vsync();
    124c:	0e 94 2e 12 	call	0x245c	; 0x245c <tvtext_wait_vsync>
		draw_animated_rectangle(1, 1, TVTEXT_BUFFER_WIDTH - 2, TVTEXT_BUFFER_HEIGHT - 2);
    1250:	2e e0       	ldi	r18, 0x0E	; 14
    1252:	4e e1       	ldi	r20, 0x1E	; 30
    1254:	61 e0       	ldi	r22, 0x01	; 1
    1256:	81 e0       	ldi	r24, 0x01	; 1
    1258:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <draw_animated_rectangle>
		joypad = ~PINC & JOY_ALL;
	} while (!(joypad & JOY_FIRE1));
    125c:	34 99       	sbic	0x06, 4	; 6
    125e:	f6 cf       	rjmp	.-20     	; 0x124c <credit+0x3c>
	scroll_out();
    1260:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <scroll_out>
	tvtext_clear();
    1264:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <tvtext_clear>
	scroll_in_instant();
    1268:	0c 94 13 0d 	jmp	0x1a26	; 0x1a26 <scroll_in_instant>

0000126c <title>:
// Number of slides.
#define SLIDE_COUNT 4

// Title slide
void title(void) {
  tvtext_puts_P(PSTR(
    126c:	86 ea       	ldi	r24, 0xA6	; 166
    126e:	91 e0       	ldi	r25, 0x01	; 1
    1270:	0c 94 14 12 	jmp	0x2428	; 0x2428 <tvtext_puts_P>

00001274 <end>:
		     ));  
}

// End slide
void end(void) {
  tvtext_puts_P(PSTR(
    1274:	84 e1       	ldi	r24, 0x14	; 20
    1276:	92 e0       	ldi	r25, 0x02	; 2
    1278:	0c 94 14 12 	jmp	0x2428	; 0x2428 <tvtext_puts_P>

0000127c <plan>:
		     ));  
}

// Slide number 1
void plan(void) {
	tvtext_puts_P(PSTR(
    127c:	88 e3       	ldi	r24, 0x38	; 56
    127e:	92 e0       	ldi	r25, 0x02	; 2
    1280:	0c 94 14 12 	jmp	0x2428	; 0x2428 <tvtext_puts_P>

00001284 <lorem>:
	));
}

// Slide 2
void lorem(void) {
	tvtext_puts_P(PSTR(
    1284:	89 e4       	ldi	r24, 0x49	; 73
    1286:	93 e0       	ldi	r25, 0x03	; 3
    1288:	0c 94 14 12 	jmp	0x2428	; 0x2428 <tvtext_puts_P>

0000128c <slides1>:
		" Damien Graux                   \n\r"
	));
}


void slides1(void) {
    128c:	1f 93       	push	r17
    128e:	cf 93       	push	r28
    1290:	df 93       	push	r29

  // Selected game index.
  uint8_t selected_slide = 0;

  // Clean the screen and launch the title slide.
  tvtext_clear();
    1292:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <tvtext_clear>
  title();
    1296:	0e 94 36 09 	call	0x126c	; 0x126c <title>

  // Simple text display to test the program
  //test_basic();

  // Selected game index.
  uint8_t selected_slide = 0;
    129a:	c0 e0       	ldi	r28, 0x00	; 0
  tvtext_clear();
  title();

  for (;;) {
    // Wait for all keys to be released.
    while (~JOY_PIN & JOY_ALL);
    129c:	86 b1       	in	r24, 0x06	; 6
    129e:	90 e0       	ldi	r25, 0x00	; 0
    12a0:	80 95       	com	r24
    12a2:	90 95       	com	r25
    12a4:	8f 73       	andi	r24, 0x3F	; 63
    12a6:	99 27       	eor	r25, r25
    12a8:	89 2b       	or	r24, r25
    12aa:	c1 f7       	brne	.-16     	; 0x129c <slides1+0x10>

    // Preload the joypad input value.
    uint8_t joypad = ~JOY_PIN & JOY_ALL;
    12ac:	d6 b1       	in	r29, 0x06	; 6
    12ae:	d0 95       	com	r29
    12b0:	df 73       	andi	r29, 0x3F	; 63
    uint8_t old_joypad = joypad;

    // Used to animate the swapping of game graphics.
    int8_t swap_slide_scroll = 0;
    12b2:	10 e0       	ldi	r17, 0x00	; 0

    
    while (choosing_slide) {
		
      // Wait for sync.
      tvtext_wait_vsync();
    12b4:	0e 94 2e 12 	call	0x245c	; 0x245c <tvtext_wait_vsync>

      // Poll the joypad.
      joypad = ~JOY_PIN & JOY_ALL;
    12b8:	86 b1       	in	r24, 0x06	; 6
    12ba:	80 95       	com	r24
    12bc:	8f 73       	andi	r24, 0x3F	; 63
      if ((joypad == old_joypad) || (swap_slide_scroll != 0)) {
    12be:	8d 17       	cp	r24, r29
    12c0:	11 f0       	breq	.+4      	; 0x12c6 <slides1+0x3a>
    12c2:	11 23       	and	r17, r17
    12c4:	11 f0       	breq	.+4      	; 0x12ca <slides1+0x3e>
	joypad = JOY_NONE;
    12c6:	80 e0       	ldi	r24, 0x00	; 0
    12c8:	01 c0       	rjmp	.+2      	; 0x12cc <slides1+0x40>
      // Wait for sync.
      tvtext_wait_vsync();

      // Poll the joypad.
      joypad = ~JOY_PIN & JOY_ALL;
      if ((joypad == old_joypad) || (swap_slide_scroll != 0)) {
    12ca:	d8 2f       	mov	r29, r24
      } else {
	old_joypad = joypad;
      }

      // Handle the joypad.
      if (joypad & JOY_UP) {
    12cc:	82 ff       	sbrs	r24, 2
    12ce:	06 c0       	rjmp	.+12     	; 0x12dc <slides1+0x50>
	// Handle start of slideshow: do nothing if start
	if (selected_slide!=0){
    12d0:	cc 23       	and	r28, r28
    12d2:	21 f0       	breq	.+8      	; 0x12dc <slides1+0x50>
	  --selected_slide;
    12d4:	c1 50       	subi	r28, 0x01	; 1
	  swap_slide_scroll = -16;
	  choosing_slide = 0;
    12d6:	90 e0       	ldi	r25, 0x00	; 0
      // Handle the joypad.
      if (joypad & JOY_UP) {
	// Handle start of slideshow: do nothing if start
	if (selected_slide!=0){
	  --selected_slide;
	  swap_slide_scroll = -16;
    12d8:	10 ef       	ldi	r17, 0xF0	; 240
    12da:	01 c0       	rjmp	.+2      	; 0x12de <slides1+0x52>
      }

      // Handle the joypad.
      if (joypad & JOY_UP) {
	// Handle start of slideshow: do nothing if start
	if (selected_slide!=0){
    12dc:	91 e0       	ldi	r25, 0x01	; 1
	  --selected_slide;
	  swap_slide_scroll = -16;
	  choosing_slide = 0;
	}
      }
      if (joypad & JOY_DOWN) {
    12de:	83 ff       	sbrs	r24, 3
    12e0:	05 c0       	rjmp	.+10     	; 0x12ec <slides1+0x60>
	// Handle end of slideshow: do nothing if end 
	if (selected_slide<(SLIDE_COUNT-1)){
    12e2:	c3 30       	cpi	r28, 0x03	; 3
    12e4:	18 f4       	brcc	.+6      	; 0x12ec <slides1+0x60>
	  ++selected_slide;
    12e6:	cf 5f       	subi	r28, 0xFF	; 255
	  swap_slide_scroll = +16;
	  choosing_slide = 0;
    12e8:	90 e0       	ldi	r25, 0x00	; 0
      }
      if (joypad & JOY_DOWN) {
	// Handle end of slideshow: do nothing if end 
	if (selected_slide<(SLIDE_COUNT-1)){
	  ++selected_slide;
	  swap_slide_scroll = +16;
    12ea:	10 e1       	ldi	r17, 0x10	; 16
	  choosing_slide = 0;
	}
      }
      if (joypad & JOY_FIRE1) {
    12ec:	84 ff       	sbrs	r24, 4
    12ee:	09 c0       	rjmp	.+18     	; 0x1302 <slides1+0x76>
	// Handle end of slideshow: escape if end 
	if (selected_slide<(SLIDE_COUNT-1)){
    12f0:	c3 30       	cpi	r28, 0x03	; 3
    12f2:	10 f4       	brcc	.+4      	; 0x12f8 <slides1+0x6c>
	  ++selected_slide;
    12f4:	cf 5f       	subi	r28, 0xFF	; 255
    12f6:	07 c0       	rjmp	.+14     	; 0x1306 <slides1+0x7a>
    case 3:
      end();
      break;
    }
  }
}
    12f8:	df 91       	pop	r29
    12fa:	cf 91       	pop	r28
    12fc:	1f 91       	pop	r17
	  ++selected_slide;
	  swap_slide_scroll = +16;
	  choosing_slide = 0;
	}
	else{
	  tvtext_clear();
    12fe:	0c 94 d6 0f 	jmp	0x1fac	; 0x1fac <tvtext_clear>

    // We're still choosing a slide...
    uint8_t choosing_slide = 1;

    
    while (choosing_slide) {
    1302:	91 11       	cpse	r25, r1
    1304:	d7 cf       	rjmp	.-82     	; 0x12b4 <slides1+0x28>
      }

    }

    // Scroll out the slide.
    scroll_out();
    1306:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <scroll_out>
    tvtext_clear();
    130a:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <tvtext_clear>
    tvtext_offset_y -= (128 + 8) * 2;
    130e:	80 91 16 01 	lds	r24, 0x0116
    1312:	90 91 17 01 	lds	r25, 0x0117
    1316:	80 51       	subi	r24, 0x10	; 16
    1318:	91 40       	sbci	r25, 0x01	; 1
    131a:	90 93 17 01 	sts	0x0117, r25
    131e:	80 93 16 01 	sts	0x0116, r24
    
    // Run the selected slide.
    switch (selected_slide) {
    1322:	c1 30       	cpi	r28, 0x01	; 1
    1324:	51 f0       	breq	.+20     	; 0x133a <slides1+0xae>
    1326:	30 f0       	brcs	.+12     	; 0x1334 <slides1+0xa8>
    1328:	c2 30       	cpi	r28, 0x02	; 2
    132a:	51 f0       	breq	.+20     	; 0x1340 <slides1+0xb4>
    132c:	c3 30       	cpi	r28, 0x03	; 3
    132e:	09 f0       	breq	.+2      	; 0x1332 <slides1+0xa6>
    1330:	b5 cf       	rjmp	.-150    	; 0x129c <slides1+0x10>
    1332:	09 c0       	rjmp	.+18     	; 0x1346 <slides1+0xba>
    case 0:
      title();
    1334:	0e 94 36 09 	call	0x126c	; 0x126c <title>
      break;
    1338:	b1 cf       	rjmp	.-158    	; 0x129c <slides1+0x10>
    case 1:
      plan();
    133a:	0e 94 3e 09 	call	0x127c	; 0x127c <plan>
      break;
    133e:	ae cf       	rjmp	.-164    	; 0x129c <slides1+0x10>
    case 2:
      lorem();
    1340:	0e 94 42 09 	call	0x1284	; 0x1284 <lorem>
      break;
    1344:	ab cf       	rjmp	.-170    	; 0x129c <slides1+0x10>
    case 3:
      end();
    1346:	0e 94 3a 09 	call	0x1274	; 0x1274 <end>
      break;
    134a:	a8 cf       	rjmp	.-176    	; 0x129c <slides1+0x10>

0000134c <demo_basic>:
#include "tvtext.h"
#include "common.h"
#include "demo.h"

// A BBC BASIC-like demo.
void demo_basic(void) {
    134c:	cf 93       	push	r28
    134e:	df 93       	push	r29

	// Display a BBC Micro-like prompt.
	tvtext_clear();
    1350:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <tvtext_clear>
	tvtext_puts_P(PSTR(
    1354:	8b e1       	ldi	r24, 0x1B	; 27
    1356:	94 e0       	ldi	r25, 0x04	; 4
    1358:	0e 94 14 12 	call	0x2428	; 0x2428 <tvtext_puts_P>
		"\n"
		"BASIC\n\r"
		"\n"
		">"
	));
	delay_ms(2000);
    135c:	80 ed       	ldi	r24, 0xD0	; 208
    135e:	97 e0       	ldi	r25, 0x07	; 7
    1360:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <delay_ms>

	// Simulate typing in a BASIC program.
	type_string_P(PSTR("10 PRINT \"AVR rules! \";"));
    1364:	84 e4       	ldi	r24, 0x44	; 68
    1366:	94 e0       	ldi	r25, 0x04	; 4
    1368:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <type_string_P>
	delay_ms(100);
    136c:	84 e6       	ldi	r24, 0x64	; 100
    136e:	90 e0       	ldi	r25, 0x00	; 0
    1370:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <delay_ms>
	tvtext_puts_P(PSTR("\n\r>"));
    1374:	8c e5       	ldi	r24, 0x5C	; 92
    1376:	94 e0       	ldi	r25, 0x04	; 4
    1378:	0e 94 14 12 	call	0x2428	; 0x2428 <tvtext_puts_P>
	delay_ms(500);
    137c:	84 ef       	ldi	r24, 0xF4	; 244
    137e:	91 e0       	ldi	r25, 0x01	; 1
    1380:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <delay_ms>
	type_string_P(PSTR("20 GOTO 10"));
    1384:	80 e6       	ldi	r24, 0x60	; 96
    1386:	94 e0       	ldi	r25, 0x04	; 4
    1388:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <type_string_P>
	delay_ms(100);
    138c:	84 e6       	ldi	r24, 0x64	; 100
    138e:	90 e0       	ldi	r25, 0x00	; 0
    1390:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <delay_ms>
	tvtext_puts_P(PSTR("\n\r>"));
    1394:	8b e6       	ldi	r24, 0x6B	; 107
    1396:	94 e0       	ldi	r25, 0x04	; 4
    1398:	0e 94 14 12 	call	0x2428	; 0x2428 <tvtext_puts_P>
	delay_ms(500);
    139c:	84 ef       	ldi	r24, 0xF4	; 244
    139e:	91 e0       	ldi	r25, 0x01	; 1
    13a0:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <delay_ms>
	type_string_P(PSTR("RUN"));
    13a4:	8f e6       	ldi	r24, 0x6F	; 111
    13a6:	94 e0       	ldi	r25, 0x04	; 4
    13a8:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <type_string_P>
	delay_ms(1000);
    13ac:	88 ee       	ldi	r24, 0xE8	; 232
    13ae:	93 e0       	ldi	r25, 0x03	; 3
    13b0:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <delay_ms>
	
	// "Run" the simulated BASIC program.
	tvtext_puts_P(PSTR("\n\r"));
    13b4:	83 e7       	ldi	r24, 0x73	; 115
    13b6:	94 e0       	ldi	r25, 0x04	; 4
    13b8:	0e 94 14 12 	call	0x2428	; 0x2428 <tvtext_puts_P>
    13bc:	c9 ec       	ldi	r28, 0xC9	; 201
    13be:	d0 e0       	ldi	r29, 0x00	; 0
	for(int i = 200; i >= 0; --i) {
		tvtext_puts_P(PSTR("AVR rules! "));
    13c0:	86 e7       	ldi	r24, 0x76	; 118
    13c2:	94 e0       	ldi	r25, 0x04	; 4
    13c4:	0e 94 14 12 	call	0x2428	; 0x2428 <tvtext_puts_P>
		tvtext_wait_vsync();
    13c8:	0e 94 2e 12 	call	0x245c	; 0x245c <tvtext_wait_vsync>
    13cc:	21 97       	sbiw	r28, 0x01	; 1
	type_string_P(PSTR("RUN"));
	delay_ms(1000);
	
	// "Run" the simulated BASIC program.
	tvtext_puts_P(PSTR("\n\r"));
	for(int i = 200; i >= 0; --i) {
    13ce:	c1 f7       	brne	.-16     	; 0x13c0 <demo_basic+0x74>
		tvtext_puts_P(PSTR("AVR rules! "));
		tvtext_wait_vsync();
	}

	// "Break" out of the program to skip to the next part of the demo.
	tvtext_puts_P(PSTR("\n\rEscape at line 10\n\r>"));
    13d0:	82 e8       	ldi	r24, 0x82	; 130
    13d2:	94 e0       	ldi	r25, 0x04	; 4
    13d4:	0e 94 14 12 	call	0x2428	; 0x2428 <tvtext_puts_P>
	delay_ms(1000);
    13d8:	88 ee       	ldi	r24, 0xE8	; 232
    13da:	93 e0       	ldi	r25, 0x03	; 3
    13dc:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <delay_ms>
	type_string_P(PSTR("CHAIN \"DEMO\""));
    13e0:	89 e9       	ldi	r24, 0x99	; 153
    13e2:	94 e0       	ldi	r25, 0x04	; 4
    13e4:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <type_string_P>
	delay_ms(1000);
    13e8:	88 ee       	ldi	r24, 0xE8	; 232
    13ea:	93 e0       	ldi	r25, 0x03	; 3

}
    13ec:	df 91       	pop	r29
    13ee:	cf 91       	pop	r28

	// "Break" out of the program to skip to the next part of the demo.
	tvtext_puts_P(PSTR("\n\rEscape at line 10\n\r>"));
	delay_ms(1000);
	type_string_P(PSTR("CHAIN \"DEMO\""));
	delay_ms(1000);
    13f0:	0c 94 bc 0e 	jmp	0x1d78	; 0x1d78 <delay_ms>

000013f4 <demo_info>:

}

// Displays a screen of information about the library.
void demo_info(void) {
    13f4:	cf 93       	push	r28
    13f6:	df 93       	push	r29

	// Hide the screen off the bottom of the display.
	tvtext_offset_y = 256 + 16;
    13f8:	80 e1       	ldi	r24, 0x10	; 16
    13fa:	91 e0       	ldi	r25, 0x01	; 1
    13fc:	90 93 17 01 	sts	0x0117, r25
    1400:	80 93 16 01 	sts	0x0116, r24

	// We don't want the screen to automatically scroll, and we don't want a flashing cursor.
	tvtext_flags &= ~(_BV(TVTEXT_AUTO_SCROLL) | _BV(TVTEXT_CURSOR_ENABLED));
    1404:	80 91 14 01 	lds	r24, 0x0114
    1408:	89 7f       	andi	r24, 0xF9	; 249
    140a:	80 93 14 01 	sts	0x0114, r24

	// Border of blocks.
	tvtext_cleared = 0x7F;
    140e:	8f e7       	ldi	r24, 0x7F	; 127
    1410:	80 93 10 01 	sts	0x0110, r24
	tvtext_clear();
    1414:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <tvtext_clear>
	tvtext_cleared = ' ';
    1418:	80 e2       	ldi	r24, 0x20	; 32
    141a:	80 93 10 01 	sts	0x0110, r24
	
	// Middle hole.
	tvtext_set_viewport(1, 14, 30, 1);
    141e:	21 e0       	ldi	r18, 0x01	; 1
    1420:	4e e1       	ldi	r20, 0x1E	; 30
    1422:	6e e0       	ldi	r22, 0x0E	; 14
    1424:	81 e0       	ldi	r24, 0x01	; 1
    1426:	0e 94 02 10 	call	0x2004	; 0x2004 <tvtext_set_viewport>
	tvtext_clear();
    142a:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <tvtext_clear>

	// Reduce viewport further for padding!
	tvtext_set_viewport(2, 13, 29, 2);
    142e:	22 e0       	ldi	r18, 0x02	; 2
    1430:	4d e1       	ldi	r20, 0x1D	; 29
    1432:	6d e0       	ldi	r22, 0x0D	; 13
    1434:	82 e0       	ldi	r24, 0x02	; 2
    1436:	0e 94 02 10 	call	0x2004	; 0x2004 <tvtext_set_viewport>

	// Main copy.
	tvtext_puts_P(PSTR(
    143a:	86 ea       	ldi	r24, 0xA6	; 166
    143c:	94 e0       	ldi	r25, 0x04	; 4
    143e:	0e 94 14 12 	call	0x2428	; 0x2428 <tvtext_puts_P>
		"driven,   leaving  some  CPU"
		"time  to the  user  program."
	));

	// Scroll the copy in.	
	while (tvtext_offset_y != 0) {
    1442:	0b c0       	rjmp	.+22     	; 0x145a <demo_info+0x66>
		tvtext_wait_vsync();
    1444:	0e 94 2e 12 	call	0x245c	; 0x245c <tvtext_wait_vsync>
		tvtext_offset_y -= 2;
    1448:	80 91 16 01 	lds	r24, 0x0116
    144c:	90 91 17 01 	lds	r25, 0x0117
    1450:	02 97       	sbiw	r24, 0x02	; 2
    1452:	90 93 17 01 	sts	0x0117, r25
    1456:	80 93 16 01 	sts	0x0116, r24
		"driven,   leaving  some  CPU"
		"time  to the  user  program."
	));

	// Scroll the copy in.	
	while (tvtext_offset_y != 0) {
    145a:	80 91 16 01 	lds	r24, 0x0116
    145e:	90 91 17 01 	lds	r25, 0x0117
    1462:	89 2b       	or	r24, r25
    1464:	79 f7       	brne	.-34     	; 0x1444 <demo_info+0x50>
		tvtext_wait_vsync();
		tvtext_offset_y -= 2;
	}

	// Let that sink in...
	delay_ms(8000);
    1466:	80 e4       	ldi	r24, 0x40	; 64
    1468:	9f e1       	ldi	r25, 0x1F	; 31
    146a:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <delay_ms>

	// Reset the viewport.
	tvtext_reset_viewport_cursor_home();
    146e:	0e 94 38 10 	call	0x2070	; 0x2070 <tvtext_reset_viewport_cursor_home>
    1472:	c0 e2       	ldi	r28, 0x20	; 32
    1474:	d0 e0       	ldi	r29, 0x00	; 0

	// Scroll the copy off the left of the screen.
	for (int i = 0; i < 32; ++i) {
		tvtext_scroll_left();
    1476:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <tvtext_scroll_left>
		delay_ms(40);
    147a:	88 e2       	ldi	r24, 0x28	; 40
    147c:	90 e0       	ldi	r25, 0x00	; 0
    147e:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <delay_ms>
    1482:	21 97       	sbiw	r28, 0x01	; 1

	// Reset the viewport.
	tvtext_reset_viewport_cursor_home();

	// Scroll the copy off the left of the screen.
	for (int i = 0; i < 32; ++i) {
    1484:	c1 f7       	brne	.-16     	; 0x1476 <demo_info+0x82>
		tvtext_scroll_left();
		delay_ms(40);
	}
	// Restore the cursor and auto-scrolling.
	tvtext_flags |= _BV(TVTEXT_AUTO_SCROLL) | _BV(TVTEXT_CURSOR_ENABLED);
    1486:	80 91 14 01 	lds	r24, 0x0114
    148a:	86 60       	ori	r24, 0x06	; 6
    148c:	80 93 14 01 	sts	0x0114, r24
}
    1490:	df 91       	pop	r29
    1492:	cf 91       	pop	r28
    1494:	08 95       	ret

00001496 <demo_viewport>:

void demo_viewport(void) {
    1496:	1f 93       	push	r17
    1498:	cf 93       	push	r28
    149a:	df 93       	push	r29
	// Disable the cursor and auto-scrolling.
	tvtext_flags &= ~(_BV(TVTEXT_AUTO_SCROLL) | _BV(TVTEXT_CURSOR_ENABLED));
    149c:	80 91 14 01 	lds	r24, 0x0114
    14a0:	89 7f       	andi	r24, 0xF9	; 249
    14a2:	80 93 14 01 	sts	0x0114, r24
	// Draw the background.
	tvtext_clear();
    14a6:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <tvtext_clear>
    14aa:	c9 e4       	ldi	r28, 0x49	; 73
	for (uint8_t i = 0; i < 73; ++i) {
		tvtext_puts_P(PSTR("tvText "));
    14ac:	8d eb       	ldi	r24, 0xBD	; 189
    14ae:	95 e0       	ldi	r25, 0x05	; 5
    14b0:	0e 94 14 12 	call	0x2428	; 0x2428 <tvtext_puts_P>
    14b4:	c1 50       	subi	r28, 0x01	; 1
void demo_viewport(void) {
	// Disable the cursor and auto-scrolling.
	tvtext_flags &= ~(_BV(TVTEXT_AUTO_SCROLL) | _BV(TVTEXT_CURSOR_ENABLED));
	// Draw the background.
	tvtext_clear();
	for (uint8_t i = 0; i < 73; ++i) {
    14b6:	d1 f7       	brne	.-12     	; 0x14ac <demo_viewport+0x16>
		tvtext_puts_P(PSTR("tvText "));
	}
	tvtext_putc('t');
    14b8:	84 e7       	ldi	r24, 0x74	; 116
    14ba:	0e 94 d6 10 	call	0x21ac	; 0x21ac <tvtext_putc>
	delay_ms(1000);
    14be:	88 ee       	ldi	r24, 0xE8	; 232
    14c0:	93 e0       	ldi	r25, 0x03	; 3
    14c2:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <delay_ms>
    14c6:	cf e5       	ldi	r28, 0x5F	; 95
    14c8:	d1 e0       	ldi	r29, 0x01	; 1
	
	// Draw the viewport border.
	for (uint8_t i = 3; i <= 28; ++i) { // Top
		tvtext_buffer[2 * 32 + i] = 127;
    14ca:	1f e7       	ldi	r17, 0x7F	; 127
    14cc:	19 93       	st	Y+, r17
		tvtext_wait_vsync();
    14ce:	0e 94 2e 12 	call	0x245c	; 0x245c <tvtext_wait_vsync>
	}
	tvtext_putc('t');
	delay_ms(1000);
	
	// Draw the viewport border.
	for (uint8_t i = 3; i <= 28; ++i) { // Top
    14d2:	81 e0       	ldi	r24, 0x01	; 1
    14d4:	c9 37       	cpi	r28, 0x79	; 121
    14d6:	d8 07       	cpc	r29, r24
    14d8:	c9 f7       	brne	.-14     	; 0x14cc <demo_viewport+0x36>
    14da:	c8 e9       	ldi	r28, 0x98	; 152
    14dc:	d1 e0       	ldi	r29, 0x01	; 1
		tvtext_buffer[2 * 32 + i] = 127;
		tvtext_wait_vsync();
	}
	for (uint8_t i = 3; i <= 12; ++i) { // Right
		tvtext_buffer[i * 32 + 28] = 127;
    14de:	1f e7       	ldi	r17, 0x7F	; 127
    14e0:	18 83       	st	Y, r17
		tvtext_wait_vsync();
    14e2:	0e 94 2e 12 	call	0x245c	; 0x245c <tvtext_wait_vsync>
    14e6:	a0 96       	adiw	r28, 0x20	; 32
	// Draw the viewport border.
	for (uint8_t i = 3; i <= 28; ++i) { // Top
		tvtext_buffer[2 * 32 + i] = 127;
		tvtext_wait_vsync();
	}
	for (uint8_t i = 3; i <= 12; ++i) { // Right
    14e8:	82 e0       	ldi	r24, 0x02	; 2
    14ea:	c8 3d       	cpi	r28, 0xD8	; 216
    14ec:	d8 07       	cpc	r29, r24
    14ee:	c1 f7       	brne	.-16     	; 0x14e0 <demo_viewport+0x4a>
    14f0:	c9 ed       	ldi	r28, 0xD9	; 217
    14f2:	d2 e0       	ldi	r29, 0x02	; 2
		tvtext_buffer[i * 32 + 28] = 127;
		tvtext_wait_vsync();
	}
	for (uint8_t i = 28; i >= 3; --i) { // Bottom
		tvtext_buffer[13 * 32 + i] = 127;
    14f4:	1f e7       	ldi	r17, 0x7F	; 127
    14f6:	1a 93       	st	-Y, r17
		tvtext_wait_vsync();
    14f8:	0e 94 2e 12 	call	0x245c	; 0x245c <tvtext_wait_vsync>
	}
	for (uint8_t i = 3; i <= 12; ++i) { // Right
		tvtext_buffer[i * 32 + 28] = 127;
		tvtext_wait_vsync();
	}
	for (uint8_t i = 28; i >= 3; --i) { // Bottom
    14fc:	82 e0       	ldi	r24, 0x02	; 2
    14fe:	cf 3b       	cpi	r28, 0xBF	; 191
    1500:	d8 07       	cpc	r29, r24
    1502:	c9 f7       	brne	.-14     	; 0x14f6 <demo_viewport+0x60>
    1504:	cf e9       	ldi	r28, 0x9F	; 159
    1506:	d2 e0       	ldi	r29, 0x02	; 2
		tvtext_buffer[13 * 32 + i] = 127;
		tvtext_wait_vsync();
	}
	for (uint8_t i = 12; i >= 3; --i) { // Left
		tvtext_buffer[i * 32 + 3] = 127;
    1508:	1f e7       	ldi	r17, 0x7F	; 127
    150a:	18 83       	st	Y, r17
		tvtext_wait_vsync();
    150c:	0e 94 2e 12 	call	0x245c	; 0x245c <tvtext_wait_vsync>
    1510:	a0 97       	sbiw	r28, 0x20	; 32
	}
	for (uint8_t i = 28; i >= 3; --i) { // Bottom
		tvtext_buffer[13 * 32 + i] = 127;
		tvtext_wait_vsync();
	}
	for (uint8_t i = 12; i >= 3; --i) { // Left
    1512:	81 e0       	ldi	r24, 0x01	; 1
    1514:	cf 35       	cpi	r28, 0x5F	; 95
    1516:	d8 07       	cpc	r29, r24
    1518:	c1 f7       	brne	.-16     	; 0x150a <demo_viewport+0x74>
		tvtext_buffer[i * 32 + 3] = 127;
		tvtext_wait_vsync();
	}
	delay_ms(500);
    151a:	84 ef       	ldi	r24, 0xF4	; 244
    151c:	91 e0       	ldi	r25, 0x01	; 1
    151e:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <delay_ms>
    1522:	cc e0       	ldi	r28, 0x0C	; 12

	// Unzip the central portion.
	for (uint8_t i = 0; i < 12; ++i) {
		delay_ms(80);
    1524:	80 e5       	ldi	r24, 0x50	; 80
    1526:	90 e0       	ldi	r25, 0x00	; 0
    1528:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <delay_ms>
		// Unzip left half.
		tvtext_set_viewport(4, 12, 15, 3);
    152c:	23 e0       	ldi	r18, 0x03	; 3
    152e:	4f e0       	ldi	r20, 0x0F	; 15
    1530:	6c e0       	ldi	r22, 0x0C	; 12
    1532:	84 e0       	ldi	r24, 0x04	; 4
    1534:	0e 94 02 10 	call	0x2004	; 0x2004 <tvtext_set_viewport>
		tvtext_scroll_left();
    1538:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <tvtext_scroll_left>
		// Unzip right half.
		tvtext_set_viewport(16, 12, 27, 3);
    153c:	23 e0       	ldi	r18, 0x03	; 3
    153e:	4b e1       	ldi	r20, 0x1B	; 27
    1540:	6c e0       	ldi	r22, 0x0C	; 12
    1542:	80 e1       	ldi	r24, 0x10	; 16
    1544:	0e 94 02 10 	call	0x2004	; 0x2004 <tvtext_set_viewport>
		tvtext_scroll_right();
    1548:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <tvtext_scroll_right>
    154c:	c1 50       	subi	r28, 0x01	; 1
		tvtext_wait_vsync();
	}
	delay_ms(500);

	// Unzip the central portion.
	for (uint8_t i = 0; i < 12; ++i) {
    154e:	51 f7       	brne	.-44     	; 0x1524 <demo_viewport+0x8e>
		tvtext_set_viewport(16, 12, 27, 3);
		tvtext_scroll_right();
	}

	// Set the new viewport.
	tvtext_set_viewport(5, 11, 26, 4);
    1550:	24 e0       	ldi	r18, 0x04	; 4
    1552:	4a e1       	ldi	r20, 0x1A	; 26
    1554:	6b e0       	ldi	r22, 0x0B	; 11
    1556:	85 e0       	ldi	r24, 0x05	; 5
    1558:	0e 94 02 10 	call	0x2004	; 0x2004 <tvtext_set_viewport>
	tvtext_clear();
    155c:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <tvtext_clear>
	// Restore the cursor and auto-scrolling.
	tvtext_flags |= _BV(TVTEXT_CURSOR_ENABLED) | _BV(TVTEXT_AUTO_SCROLL);
    1560:	80 91 14 01 	lds	r24, 0x0114
    1564:	86 60       	ori	r24, 0x06	; 6
    1566:	80 93 14 01 	sts	0x0114, r24

	delay_ms(500);	
    156a:	84 ef       	ldi	r24, 0xF4	; 244
    156c:	91 e0       	ldi	r25, 0x01	; 1
    156e:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <delay_ms>
	type_string_P(PSTR(
    1572:	85 ec       	ldi	r24, 0xC5	; 197
    1574:	95 e0       	ldi	r25, 0x05	; 5
    1576:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <type_string_P>
		"Scrolling and clearing"
		"operations only affect"
		"the defined viewport."
	));

	delay_ms(4000);
    157a:	80 ea       	ldi	r24, 0xA0	; 160
    157c:	9f e0       	ldi	r25, 0x0F	; 15
    157e:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <delay_ms>

	// Disable the cursor.
	tvtext_flags &= ~_BV(TVTEXT_CURSOR_ENABLED);
    1582:	80 91 14 01 	lds	r24, 0x0114
    1586:	8b 7f       	andi	r24, 0xFB	; 251
    1588:	80 93 14 01 	sts	0x0114, r24
    158c:	c8 e0       	ldi	r28, 0x08	; 8

	// Scroll the message away.
	for (uint8_t i = 0; i < 8; ++i) {
		delay_ms(80);
    158e:	80 e5       	ldi	r24, 0x50	; 80
    1590:	90 e0       	ldi	r25, 0x00	; 0
    1592:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <delay_ms>
		tvtext_scroll_up();
    1596:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <tvtext_scroll_up>
    159a:	c1 50       	subi	r28, 0x01	; 1

	// Disable the cursor.
	tvtext_flags &= ~_BV(TVTEXT_CURSOR_ENABLED);

	// Scroll the message away.
	for (uint8_t i = 0; i < 8; ++i) {
    159c:	c1 f7       	brne	.-16     	; 0x158e <demo_viewport+0xf8>
		delay_ms(80);
		tvtext_scroll_up();
	}
	// Restore the full viewport.
	tvtext_reset_viewport_cursor_home();
    159e:	0e 94 38 10 	call	0x2070	; 0x2070 <tvtext_reset_viewport_cursor_home>
	// Scroll the screen away.
	delay_ms(500);
    15a2:	84 ef       	ldi	r24, 0xF4	; 244
    15a4:	91 e0       	ldi	r25, 0x01	; 1
    15a6:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <delay_ms>
    15aa:	c0 e1       	ldi	r28, 0x10	; 16
	for (uint8_t i = 0; i < 16; ++i) {
		delay_ms(80);
    15ac:	80 e5       	ldi	r24, 0x50	; 80
    15ae:	90 e0       	ldi	r25, 0x00	; 0
    15b0:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <delay_ms>
		tvtext_scroll_down();
    15b4:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <tvtext_scroll_down>
    15b8:	c1 50       	subi	r28, 0x01	; 1
	}
	// Restore the full viewport.
	tvtext_reset_viewport_cursor_home();
	// Scroll the screen away.
	delay_ms(500);
	for (uint8_t i = 0; i < 16; ++i) {
    15ba:	c1 f7       	brne	.-16     	; 0x15ac <demo_viewport+0x116>
		delay_ms(80);
		tvtext_scroll_down();
	}

	// Enable the cursor.
	tvtext_flags |= _BV(TVTEXT_CURSOR_ENABLED);
    15bc:	80 91 14 01 	lds	r24, 0x0114
    15c0:	84 60       	ori	r24, 0x04	; 4
    15c2:	80 93 14 01 	sts	0x0114, r24
}
    15c6:	df 91       	pop	r29
    15c8:	cf 91       	pop	r28
    15ca:	1f 91       	pop	r17
    15cc:	08 95       	ret

000015ce <demo_countdown>:

void demo_countdown(void) {
    15ce:	8f 92       	push	r8
    15d0:	9f 92       	push	r9
    15d2:	bf 92       	push	r11
    15d4:	cf 92       	push	r12
    15d6:	df 92       	push	r13
    15d8:	ff 92       	push	r15
    15da:	0f 93       	push	r16
    15dc:	1f 93       	push	r17
    15de:	cf 93       	push	r28
    15e0:	df 93       	push	r29
	// Disable the cursor.
	tvtext_flags &= ~_BV(TVTEXT_CURSOR_ENABLED);
    15e2:	80 91 14 01 	lds	r24, 0x0114
    15e6:	8b 7f       	andi	r24, 0xFB	; 251
    15e8:	80 93 14 01 	sts	0x0114, r24
	// Count down from 5 to 0.
	tvtext_wait_vsync();
    15ec:	0e 94 2e 12 	call	0x245c	; 0x245c <tvtext_wait_vsync>
    15f0:	85 e3       	ldi	r24, 0x35	; 53
    15f2:	c8 2e       	mov	r12, r24
			uint8_t pixels = tvtext_get_font_row(countdown + '0', r);
			for (uint8_t c = 0; c < 6; ++c) {
				if (pixels & 0x80) {
					for (uint8_t y = 0; y < 2; ++y) {
						for (uint8_t x = 0; x < 3; ++x) {
							tvtext_buffer[(r * 2 + y + 1) * 32 + (c * 3) + x + 8] = 127;
    15f4:	9f e7       	ldi	r25, 0x7F	; 127
    15f6:	f9 2e       	mov	r15, r25
						}
						tvtext_buffer[(r * 2 + y + 2) * 32 + (c * 3) + 3 + 8] = 188;
    15f8:	2c eb       	ldi	r18, 0xBC	; 188
    15fa:	d2 2e       	mov	r13, r18
	// Disable the cursor.
	tvtext_flags &= ~_BV(TVTEXT_CURSOR_ENABLED);
	// Count down from 5 to 0.
	tvtext_wait_vsync();
	for (int8_t countdown = 5; countdown >= 0; --countdown) {
		tvtext_clear();
    15fc:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <tvtext_clear>
    1600:	00 e0       	ldi	r16, 0x00	; 0
    1602:	10 e0       	ldi	r17, 0x00	; 0
    1604:	81 2c       	mov	r8, r1
    1606:	91 2c       	mov	r9, r1
		for (uint8_t r = 0; r < 7; ++r) {
    1608:	b1 2c       	mov	r11, r1
			uint8_t pixels = tvtext_get_font_row(countdown + '0', r);
    160a:	6b 2d       	mov	r22, r11
    160c:	8c 2d       	mov	r24, r12
    160e:	0e 94 3a 12 	call	0x2474	; 0x2474 <tvtext_get_font_row>

	// Enable the cursor.
	tvtext_flags |= _BV(TVTEXT_CURSOR_ENABLED);
}

void demo_countdown(void) {
    1612:	f4 01       	movw	r30, r8
    1614:	e9 57       	subi	r30, 0x79	; 121
    1616:	fe 4f       	sbci	r31, 0xFE	; 254
    1618:	96 e0       	ldi	r25, 0x06	; 6
	for (int8_t countdown = 5; countdown >= 0; --countdown) {
		tvtext_clear();
		for (uint8_t r = 0; r < 7; ++r) {
			uint8_t pixels = tvtext_get_font_row(countdown + '0', r);
			for (uint8_t c = 0; c < 6; ++c) {
				if (pixels & 0x80) {
    161a:	87 fd       	sbrc	r24, 7
    161c:	06 c0       	rjmp	.+12     	; 0x162a <demo_countdown+0x5c>
					}
					for (uint8_t x = 0; x < 3; ++x) {
						tvtext_buffer[(r * 2 + 3) * 32 + (c * 3) + x + 9] = 188;
					}
				}
				pixels <<= 1;
    161e:	88 0f       	add	r24, r24
    1620:	91 50       	subi	r25, 0x01	; 1
    1622:	33 96       	adiw	r30, 0x03	; 3
	tvtext_wait_vsync();
	for (int8_t countdown = 5; countdown >= 0; --countdown) {
		tvtext_clear();
		for (uint8_t r = 0; r < 7; ++r) {
			uint8_t pixels = tvtext_get_font_row(countdown + '0', r);
			for (uint8_t c = 0; c < 6; ++c) {
    1624:	91 11       	cpse	r25, r1
    1626:	f9 cf       	rjmp	.-14     	; 0x161a <demo_countdown+0x4c>
    1628:	2a c0       	rjmp	.+84     	; 0x167e <demo_countdown+0xb0>

	// Enable the cursor.
	tvtext_flags |= _BV(TVTEXT_CURSOR_ENABLED);
}

void demo_countdown(void) {
    162a:	df 01       	movw	r26, r30
    162c:	a3 54       	subi	r26, 0x43	; 67
    162e:	b1 09       	sbc	r27, r1
			uint8_t pixels = tvtext_get_font_row(countdown + '0', r);
			for (uint8_t c = 0; c < 6; ++c) {
				if (pixels & 0x80) {
					for (uint8_t y = 0; y < 2; ++y) {
						for (uint8_t x = 0; x < 3; ++x) {
							tvtext_buffer[(r * 2 + y + 1) * 32 + (c * 3) + x + 8] = 127;
    1630:	fc 92       	st	X, r15

	// Enable the cursor.
	tvtext_flags |= _BV(TVTEXT_CURSOR_ENABLED);
}

void demo_countdown(void) {
    1632:	df 01       	movw	r26, r30
    1634:	a2 54       	subi	r26, 0x42	; 66
    1636:	b1 09       	sbc	r27, r1
			uint8_t pixels = tvtext_get_font_row(countdown + '0', r);
			for (uint8_t c = 0; c < 6; ++c) {
				if (pixels & 0x80) {
					for (uint8_t y = 0; y < 2; ++y) {
						for (uint8_t x = 0; x < 3; ++x) {
							tvtext_buffer[(r * 2 + y + 1) * 32 + (c * 3) + x + 8] = 127;
    1638:	fc 92       	st	X, r15

	// Enable the cursor.
	tvtext_flags |= _BV(TVTEXT_CURSOR_ENABLED);
}

void demo_countdown(void) {
    163a:	df 01       	movw	r26, r30
    163c:	a1 54       	subi	r26, 0x41	; 65
    163e:	b1 09       	sbc	r27, r1
			uint8_t pixels = tvtext_get_font_row(countdown + '0', r);
			for (uint8_t c = 0; c < 6; ++c) {
				if (pixels & 0x80) {
					for (uint8_t y = 0; y < 2; ++y) {
						for (uint8_t x = 0; x < 3; ++x) {
							tvtext_buffer[(r * 2 + y + 1) * 32 + (c * 3) + x + 8] = 127;
    1640:	fc 92       	st	X, r15

	// Enable the cursor.
	tvtext_flags |= _BV(TVTEXT_CURSOR_ENABLED);
}

void demo_countdown(void) {
    1642:	df 01       	movw	r26, r30
    1644:	90 97       	sbiw	r26, 0x20	; 32
				if (pixels & 0x80) {
					for (uint8_t y = 0; y < 2; ++y) {
						for (uint8_t x = 0; x < 3; ++x) {
							tvtext_buffer[(r * 2 + y + 1) * 32 + (c * 3) + x + 8] = 127;
						}
						tvtext_buffer[(r * 2 + y + 2) * 32 + (c * 3) + 3 + 8] = 188;
    1646:	dc 92       	st	X, r13

	// Enable the cursor.
	tvtext_flags |= _BV(TVTEXT_CURSOR_ENABLED);
}

void demo_countdown(void) {
    1648:	df 01       	movw	r26, r30
    164a:	93 97       	sbiw	r26, 0x23	; 35
			uint8_t pixels = tvtext_get_font_row(countdown + '0', r);
			for (uint8_t c = 0; c < 6; ++c) {
				if (pixels & 0x80) {
					for (uint8_t y = 0; y < 2; ++y) {
						for (uint8_t x = 0; x < 3; ++x) {
							tvtext_buffer[(r * 2 + y + 1) * 32 + (c * 3) + x + 8] = 127;
    164c:	fc 92       	st	X, r15

	// Enable the cursor.
	tvtext_flags |= _BV(TVTEXT_CURSOR_ENABLED);
}

void demo_countdown(void) {
    164e:	df 01       	movw	r26, r30
    1650:	92 97       	sbiw	r26, 0x22	; 34
			uint8_t pixels = tvtext_get_font_row(countdown + '0', r);
			for (uint8_t c = 0; c < 6; ++c) {
				if (pixels & 0x80) {
					for (uint8_t y = 0; y < 2; ++y) {
						for (uint8_t x = 0; x < 3; ++x) {
							tvtext_buffer[(r * 2 + y + 1) * 32 + (c * 3) + x + 8] = 127;
    1652:	fc 92       	st	X, r15

	// Enable the cursor.
	tvtext_flags |= _BV(TVTEXT_CURSOR_ENABLED);
}

void demo_countdown(void) {
    1654:	df 01       	movw	r26, r30
    1656:	91 97       	sbiw	r26, 0x21	; 33
			uint8_t pixels = tvtext_get_font_row(countdown + '0', r);
			for (uint8_t c = 0; c < 6; ++c) {
				if (pixels & 0x80) {
					for (uint8_t y = 0; y < 2; ++y) {
						for (uint8_t x = 0; x < 3; ++x) {
							tvtext_buffer[(r * 2 + y + 1) * 32 + (c * 3) + x + 8] = 127;
    1658:	fc 92       	st	X, r15
						}
						tvtext_buffer[(r * 2 + y + 2) * 32 + (c * 3) + 3 + 8] = 188;
    165a:	d0 82       	st	Z, r13

	// Enable the cursor.
	tvtext_flags |= _BV(TVTEXT_CURSOR_ENABLED);
}

void demo_countdown(void) {
    165c:	df 01       	movw	r26, r30
    165e:	a0 0f       	add	r26, r16
    1660:	b1 1f       	adc	r27, r17
    1662:	a8 0d       	add	r26, r8
    1664:	b9 1d       	adc	r27, r9
    1666:	9d 01       	movw	r18, r26
    1668:	22 50       	subi	r18, 0x02	; 2
    166a:	31 09       	sbc	r19, r1
							tvtext_buffer[(r * 2 + y + 1) * 32 + (c * 3) + x + 8] = 127;
						}
						tvtext_buffer[(r * 2 + y + 2) * 32 + (c * 3) + 3 + 8] = 188;
					}
					for (uint8_t x = 0; x < 3; ++x) {
						tvtext_buffer[(r * 2 + 3) * 32 + (c * 3) + x + 9] = 188;
    166c:	e9 01       	movw	r28, r18
    166e:	d8 82       	st	Y, r13

	// Enable the cursor.
	tvtext_flags |= _BV(TVTEXT_CURSOR_ENABLED);
}

void demo_countdown(void) {
    1670:	9d 01       	movw	r18, r26
    1672:	21 50       	subi	r18, 0x01	; 1
    1674:	31 09       	sbc	r19, r1
							tvtext_buffer[(r * 2 + y + 1) * 32 + (c * 3) + x + 8] = 127;
						}
						tvtext_buffer[(r * 2 + y + 2) * 32 + (c * 3) + 3 + 8] = 188;
					}
					for (uint8_t x = 0; x < 3; ++x) {
						tvtext_buffer[(r * 2 + 3) * 32 + (c * 3) + x + 9] = 188;
    1676:	e9 01       	movw	r28, r18
    1678:	d8 82       	st	Y, r13
    167a:	dc 92       	st	X, r13
    167c:	d0 cf       	rjmp	.-96     	; 0x161e <demo_countdown+0x50>
	tvtext_flags &= ~_BV(TVTEXT_CURSOR_ENABLED);
	// Count down from 5 to 0.
	tvtext_wait_vsync();
	for (int8_t countdown = 5; countdown >= 0; --countdown) {
		tvtext_clear();
		for (uint8_t r = 0; r < 7; ++r) {
    167e:	b3 94       	inc	r11
    1680:	d0 e4       	ldi	r29, 0x40	; 64
    1682:	8d 0e       	add	r8, r29
    1684:	91 1c       	adc	r9, r1
    1686:	00 54       	subi	r16, 0x40	; 64
    1688:	11 09       	sbc	r17, r1
    168a:	87 e0       	ldi	r24, 0x07	; 7
    168c:	b8 12       	cpse	r11, r24
    168e:	bd cf       	rjmp	.-134    	; 0x160a <demo_countdown+0x3c>
					}
				}
				pixels <<= 1;
			}
		}
		delay_ms(500);
    1690:	84 ef       	ldi	r24, 0xF4	; 244
    1692:	91 e0       	ldi	r25, 0x01	; 1
    1694:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <delay_ms>
    1698:	ca 94       	dec	r12
void demo_countdown(void) {
	// Disable the cursor.
	tvtext_flags &= ~_BV(TVTEXT_CURSOR_ENABLED);
	// Count down from 5 to 0.
	tvtext_wait_vsync();
	for (int8_t countdown = 5; countdown >= 0; --countdown) {
    169a:	cf e2       	ldi	r28, 0x2F	; 47
    169c:	cc 12       	cpse	r12, r28
    169e:	ae cf       	rjmp	.-164    	; 0x15fc <demo_countdown+0x2e>
			}
		}
		delay_ms(500);
	}
	// Enable the cursor.
	tvtext_flags |= _BV(TVTEXT_CURSOR_ENABLED);
    16a0:	80 91 14 01 	lds	r24, 0x0114
    16a4:	84 60       	ori	r24, 0x04	; 4
    16a6:	80 93 14 01 	sts	0x0114, r24
}
    16aa:	df 91       	pop	r29
    16ac:	cf 91       	pop	r28
    16ae:	1f 91       	pop	r17
    16b0:	0f 91       	pop	r16
    16b2:	ff 90       	pop	r15
    16b4:	df 90       	pop	r13
    16b6:	cf 90       	pop	r12
    16b8:	bf 90       	pop	r11
    16ba:	9f 90       	pop	r9
    16bc:	8f 90       	pop	r8
    16be:	08 95       	ret

000016c0 <demo_cursor>:

void demo_cursor(void) {
    16c0:	7f 92       	push	r7
    16c2:	8f 92       	push	r8
    16c4:	9f 92       	push	r9
    16c6:	af 92       	push	r10
    16c8:	bf 92       	push	r11
    16ca:	cf 92       	push	r12
    16cc:	df 92       	push	r13
    16ce:	ff 92       	push	r15
    16d0:	0f 93       	push	r16
    16d2:	1f 93       	push	r17
    16d4:	cf 93       	push	r28
    16d6:	df 93       	push	r29
	tvtext_clear();
    16d8:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <tvtext_clear>
	tvtext_flags &= ~_BV(TVTEXT_CURSOR_ENABLED);
    16dc:	80 91 14 01 	lds	r24, 0x0114
    16e0:	8b 7f       	andi	r24, 0xFB	; 251
    16e2:	80 93 14 01 	sts	0x0114, r24
    16e6:	3c e1       	ldi	r19, 0x1C	; 28
    16e8:	a3 2e       	mov	r10, r19
    16ea:	31 e0       	ldi	r19, 0x01	; 1
    16ec:	b3 2e       	mov	r11, r19
    16ee:	cc e3       	ldi	r28, 0x3C	; 60
    16f0:	d1 e0       	ldi	r29, 0x01	; 1
    16f2:	4c ef       	ldi	r20, 0xFC	; 252
    16f4:	c4 2e       	mov	r12, r20
    16f6:	42 e0       	ldi	r20, 0x02	; 2
    16f8:	d4 2e       	mov	r13, r20
    16fa:	0c e1       	ldi	r16, 0x1C	; 28
    16fc:	13 e0       	ldi	r17, 0x03	; 3
	for (uint8_t c = 0; c < 32; ++c) {
		tvtext_wait_vsync();
		tvtext_buffer[c] = 6; // Spades
    16fe:	56 e0       	ldi	r21, 0x06	; 6
    1700:	75 2e       	mov	r7, r21
		tvtext_buffer[c + 32] = 3; // Hearts
    1702:	63 e0       	ldi	r22, 0x03	; 3
    1704:	86 2e       	mov	r8, r22
		tvtext_buffer[31 - c + 32 * 14] = 4; // Diamonds
    1706:	74 e0       	ldi	r23, 0x04	; 4
    1708:	97 2e       	mov	r9, r23
		tvtext_buffer[31 - c + 32 * 15] = 5; // Clubs
    170a:	e5 e0       	ldi	r30, 0x05	; 5
    170c:	fe 2e       	mov	r15, r30

void demo_cursor(void) {
	tvtext_clear();
	tvtext_flags &= ~_BV(TVTEXT_CURSOR_ENABLED);
	for (uint8_t c = 0; c < 32; ++c) {
		tvtext_wait_vsync();
    170e:	0e 94 2e 12 	call	0x245c	; 0x245c <tvtext_wait_vsync>
		tvtext_buffer[c] = 6; // Spades
    1712:	f5 01       	movw	r30, r10
    1714:	71 92       	st	Z+, r7
    1716:	5f 01       	movw	r10, r30
		tvtext_buffer[c + 32] = 3; // Hearts
    1718:	89 92       	st	Y+, r8
		tvtext_buffer[31 - c + 32 * 14] = 4; // Diamonds
    171a:	f6 01       	movw	r30, r12
    171c:	92 92       	st	-Z, r9
    171e:	6f 01       	movw	r12, r30
		tvtext_buffer[31 - c + 32 * 15] = 5; // Clubs
    1720:	f8 01       	movw	r30, r16
    1722:	f2 92       	st	-Z, r15
    1724:	8f 01       	movw	r16, r30
}

void demo_cursor(void) {
	tvtext_clear();
	tvtext_flags &= ~_BV(TVTEXT_CURSOR_ENABLED);
	for (uint8_t c = 0; c < 32; ++c) {
    1726:	f1 e0       	ldi	r31, 0x01	; 1
    1728:	cc 35       	cpi	r28, 0x5C	; 92
    172a:	df 07       	cpc	r29, r31
    172c:	81 f7       	brne	.-32     	; 0x170e <demo_cursor+0x4e>
		tvtext_buffer[31 - c + 32 * 14] = 4; // Diamonds
		tvtext_buffer[31 - c + 32 * 15] = 5; // Clubs
	}

	// Enable the cursor.
	tvtext_flags |= _BV(TVTEXT_CURSOR_ENABLED);
    172e:	80 91 14 01 	lds	r24, 0x0114
    1732:	84 60       	ori	r24, 0x04	; 4
    1734:	80 93 14 01 	sts	0x0114, r24
	tvtext_cursor_move(0, 3);
    1738:	63 e0       	ldi	r22, 0x03	; 3
    173a:	80 e0       	ldi	r24, 0x00	; 0
    173c:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <tvtext_cursor_move>
	type_string_P(PSTR(
    1740:	8a e5       	ldi	r24, 0x5A	; 90
    1742:	96 e0       	ldi	r25, 0x06	; 6
    1744:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <type_string_P>
		"The library provides support for"
		"a flashing cursor."
	));
	delay_ms(2000);
    1748:	80 ed       	ldi	r24, 0xD0	; 208
    174a:	97 e0       	ldi	r25, 0x07	; 7
    174c:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <delay_ms>
	tvtext_flags &= ~_BV(TVTEXT_CURSOR_ENABLED);
    1750:	80 91 14 01 	lds	r24, 0x0114
    1754:	8b 7f       	andi	r24, 0xFB	; 251
    1756:	80 93 14 01 	sts	0x0114, r24
	type_string_P(PSTR(
    175a:	8d e8       	ldi	r24, 0x8D	; 141
    175c:	96 e0       	ldi	r25, 0x06	; 6
    175e:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <type_string_P>
		"\n\r\nThe cursor can be switched off.\n\r\n"
	));
	delay_ms(2000);
    1762:	80 ed       	ldi	r24, 0xD0	; 208
    1764:	97 e0       	ldi	r25, 0x07	; 7
    1766:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <delay_ms>
	tvtext_flags |= _BV(TVTEXT_CURSOR_ENABLED);
    176a:	80 91 14 01 	lds	r24, 0x0114
    176e:	84 60       	ori	r24, 0x04	; 4
    1770:	80 93 14 01 	sts	0x0114, r24
	tvtext_cursor = 13;
    1774:	8d e0       	ldi	r24, 0x0D	; 13
    1776:	80 93 19 01 	sts	0x0119, r24
	type_string_P(PSTR(
    177a:	83 eb       	ldi	r24, 0xB3	; 179
    177c:	96 e0       	ldi	r25, 0x06	; 6
    177e:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <type_string_P>
		"You can change its appearance to"
		"any of the other characters."
	));
	delay_ms(2000);
    1782:	80 ed       	ldi	r24, 0xD0	; 208
    1784:	97 e0       	ldi	r25, 0x07	; 7
    1786:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <delay_ms>
	tvtext_cursor = '_';
    178a:	8f e5       	ldi	r24, 0x5F	; 95
    178c:	80 93 19 01 	sts	0x0119, r24
	type_string_P(PSTR(
    1790:	80 ef       	ldi	r24, 0xF0	; 240
    1792:	96 e0       	ldi	r25, 0x06	; 6
    1794:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <type_string_P>
		"\n\r\nYou can also change the rate at "
		"which it flashes. Slow..."
	));
	tvtext_cursor_flash_period = 50;
    1798:	82 e3       	ldi	r24, 0x32	; 50
    179a:	80 93 1a 01 	sts	0x011A, r24
	tvtext_cursor_reset_flash();
    179e:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <tvtext_cursor_reset_flash>
	delay_ms(4000);
    17a2:	80 ea       	ldi	r24, 0xA0	; 160
    17a4:	9f e0       	ldi	r25, 0x0F	; 15
    17a6:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <delay_ms>
	type_string_P(PSTR("\x7F\x7F\x7F" " to fast!"));
    17aa:	8d e2       	ldi	r24, 0x2D	; 45
    17ac:	97 e0       	ldi	r25, 0x07	; 7
    17ae:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <type_string_P>
	tvtext_cursor_flash_period = 4;
    17b2:	84 e0       	ldi	r24, 0x04	; 4
    17b4:	80 93 1a 01 	sts	0x011A, r24
	tvtext_cursor_reset_flash();
    17b8:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <tvtext_cursor_reset_flash>
	delay_ms(4000);
    17bc:	80 ea       	ldi	r24, 0xA0	; 160
    17be:	9f e0       	ldi	r25, 0x0F	; 15
    17c0:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <delay_ms>
	tvtext_cursor_flash_period = 16;
    17c4:	80 e1       	ldi	r24, 0x10	; 16
    17c6:	80 93 1a 01 	sts	0x011A, r24

	// Clear the screen with a wave.
	tvtext_flags &= ~_BV(TVTEXT_CURSOR_ENABLED);
    17ca:	80 91 14 01 	lds	r24, 0x0114
    17ce:	8b 7f       	andi	r24, 0xFB	; 251
    17d0:	80 93 14 01 	sts	0x0114, r24
	for (uint8_t c = 0; c < 54; ++c) {
    17d4:	c0 e0       	ldi	r28, 0x00	; 0
		delay_ms(40);
    17d6:	88 e2       	ldi	r24, 0x28	; 40
    17d8:	90 e0       	ldi	r25, 0x00	; 0
    17da:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <delay_ms>
    17de:	7c 2f       	mov	r23, r28
    17e0:	80 e0       	ldi	r24, 0x00	; 0
    17e2:	90 e0       	ldi	r25, 0x00	; 0
    17e4:	84 30       	cpi	r24, 0x04	; 4
    17e6:	29 f0       	breq	.+10     	; 0x17f2 <demo_cursor+0x132>
	}
	// Enable the cursor.
	tvtext_flags |= _BV(TVTEXT_CURSOR_ENABLED);
}

void demo_cursor(void) {
    17e8:	fc 01       	movw	r30, r24
    17ea:	e0 50       	subi	r30, 0x00	; 0
    17ec:	ff 4f       	sbci	r31, 0xFF	; 255
    17ee:	a0 81       	ld	r26, Z
    17f0:	01 c0       	rjmp	.+2      	; 0x17f4 <demo_cursor+0x134>
	tvtext_cursor_flash_period = 16;

	// Clear the screen with a wave.
	tvtext_flags &= ~_BV(TVTEXT_CURSOR_ENABLED);
	for (uint8_t c = 0; c < 54; ++c) {
		delay_ms(40);
    17f2:	a0 e2       	ldi	r26, 0x20	; 32
				case 3:
					wave_char = 188; // 25%
					break;
			}
			int8_t wave_pos = c - wave;
			if (wave_pos >=0 && wave_pos < 48) {
    17f4:	70 33       	cpi	r23, 0x30	; 48
    17f6:	d8 f0       	brcs	.+54     	; 0x182e <demo_cursor+0x16e>
    17f8:	01 96       	adiw	r24, 0x01	; 1
    17fa:	71 50       	subi	r23, 0x01	; 1

	// Clear the screen with a wave.
	tvtext_flags &= ~_BV(TVTEXT_CURSOR_ENABLED);
	for (uint8_t c = 0; c < 54; ++c) {
		delay_ms(40);
		for (uint8_t wave = 0; wave < 5; ++wave) {
    17fc:	85 30       	cpi	r24, 0x05	; 5
    17fe:	91 05       	cpc	r25, r1
    1800:	89 f7       	brne	.-30     	; 0x17e4 <demo_cursor+0x124>
    1802:	1e c0       	rjmp	.+60     	; 0x1840 <demo_cursor+0x180>
    1804:	47 2f       	mov	r20, r23
    1806:	46 1b       	sub	r20, r22
			int8_t wave_pos = c - wave;
			if (wave_pos >=0 && wave_pos < 48) {
				for (uint8_t i = 0; i <= wave_pos; ++i) {
					int8_t y = i;
					int8_t x = (wave_pos - i);
					if (x >= 0 && x < 32 && y >= 0 && y < 16) {
    1808:	40 32       	cpi	r20, 0x20	; 32
    180a:	78 f4       	brcc	.+30     	; 0x182a <demo_cursor+0x16a>
    180c:	67 fd       	sbrc	r22, 7
    180e:	0d c0       	rjmp	.+26     	; 0x182a <demo_cursor+0x16a>
    1810:	60 31       	cpi	r22, 0x10	; 16
    1812:	5c f4       	brge	.+22     	; 0x182a <demo_cursor+0x16a>
						tvtext_buffer[y * 32 + x] = wave_char;
    1814:	50 e2       	ldi	r21, 0x20	; 32
    1816:	65 02       	muls	r22, r21
    1818:	f0 01       	movw	r30, r0
    181a:	11 24       	eor	r1, r1
    181c:	e4 5e       	subi	r30, 0xE4	; 228
    181e:	fe 4f       	sbci	r31, 0xFE	; 254
    1820:	e4 0f       	add	r30, r20
    1822:	f1 1d       	adc	r31, r1
    1824:	47 fd       	sbrc	r20, 7
    1826:	fa 95       	dec	r31
    1828:	a0 83       	st	Z, r26
					wave_char = 188; // 25%
					break;
			}
			int8_t wave_pos = c - wave;
			if (wave_pos >=0 && wave_pos < 48) {
				for (uint8_t i = 0; i <= wave_pos; ++i) {
    182a:	6f 5f       	subi	r22, 0xFF	; 255
    182c:	03 c0       	rjmp	.+6      	; 0x1834 <demo_cursor+0x174>
				case 3:
					wave_char = 188; // 25%
					break;
			}
			int8_t wave_pos = c - wave;
			if (wave_pos >=0 && wave_pos < 48) {
    182e:	60 e0       	ldi	r22, 0x00	; 0
				for (uint8_t i = 0; i <= wave_pos; ++i) {
    1830:	27 2f       	mov	r18, r23
    1832:	30 e0       	ldi	r19, 0x00	; 0
    1834:	46 2f       	mov	r20, r22
    1836:	50 e0       	ldi	r21, 0x00	; 0
    1838:	24 17       	cp	r18, r20
    183a:	35 07       	cpc	r19, r21
    183c:	1c f7       	brge	.-58     	; 0x1804 <demo_cursor+0x144>
    183e:	dc cf       	rjmp	.-72     	; 0x17f8 <demo_cursor+0x138>
	delay_ms(4000);
	tvtext_cursor_flash_period = 16;

	// Clear the screen with a wave.
	tvtext_flags &= ~_BV(TVTEXT_CURSOR_ENABLED);
	for (uint8_t c = 0; c < 54; ++c) {
    1840:	cf 5f       	subi	r28, 0xFF	; 255
    1842:	c6 33       	cpi	r28, 0x36	; 54
    1844:	41 f6       	brne	.-112    	; 0x17d6 <demo_cursor+0x116>
			}
		}
	}

	// Enable the cursor.
	tvtext_flags |= _BV(TVTEXT_CURSOR_ENABLED);
    1846:	80 91 14 01 	lds	r24, 0x0114
    184a:	84 60       	ori	r24, 0x04	; 4
    184c:	80 93 14 01 	sts	0x0114, r24

}
    1850:	df 91       	pop	r29
    1852:	cf 91       	pop	r28
    1854:	1f 91       	pop	r17
    1856:	0f 91       	pop	r16
    1858:	ff 90       	pop	r15
    185a:	df 90       	pop	r13
    185c:	cf 90       	pop	r12
    185e:	bf 90       	pop	r11
    1860:	af 90       	pop	r10
    1862:	9f 90       	pop	r9
    1864:	8f 90       	pop	r8
    1866:	7f 90       	pop	r7
    1868:	08 95       	ret

0000186a <demo_invert_fade_up_blocks>:


void demo_invert_fade_up_blocks(void) {
    186a:	08 95       	ret

0000186c <demo_invert>:
				break;
		}
	}
}

void demo_invert(void) {
    186c:	cf 92       	push	r12
    186e:	df 92       	push	r13
    1870:	ff 92       	push	r15
    1872:	0f 93       	push	r16
    1874:	1f 93       	push	r17
    1876:	cf 93       	push	r28
    1878:	df 93       	push	r29

	// Display the message.
	tvtext_set_viewport(8, 15, 23, 5);
    187a:	25 e0       	ldi	r18, 0x05	; 5
    187c:	47 e1       	ldi	r20, 0x17	; 23
    187e:	6f e0       	ldi	r22, 0x0F	; 15
    1880:	88 e0       	ldi	r24, 0x08	; 8
    1882:	0e 94 02 10 	call	0x2004	; 0x2004 <tvtext_set_viewport>
	type_string_P(PSTR("If  you  dislike"));
    1886:	8a e3       	ldi	r24, 0x3A	; 58
    1888:	97 e0       	ldi	r25, 0x07	; 7
    188a:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <type_string_P>
	if (tvtext_flags & _BV(TVTEXT_INVERTED)) {
    188e:	80 91 14 01 	lds	r24, 0x0114
    1892:	84 ff       	sbrs	r24, 4
    1894:	03 c0       	rjmp	.+6      	; 0x189c <demo_invert+0x30>
		type_string_P(PSTR("black  on white"));
    1896:	8b e4       	ldi	r24, 0x4B	; 75
    1898:	97 e0       	ldi	r25, 0x07	; 7
    189a:	02 c0       	rjmp	.+4      	; 0x18a0 <demo_invert+0x34>
	} else {
		type_string_P(PSTR("white  on black"));
    189c:	8b e5       	ldi	r24, 0x5B	; 91
    189e:	97 e0       	ldi	r25, 0x07	; 7
    18a0:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <type_string_P>
	}
	type_string_P(PSTR(
    18a4:	8b e6       	ldi	r24, 0x6B	; 107
    18a6:	97 e0       	ldi	r25, 0x07	; 7
    18a8:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <type_string_P>
	                  ","
		"you  can  invert"
		"the screen  with"
		"a  single  flag."
	));
	delay_ms(1000);
    18ac:	88 ee       	ldi	r24, 0xE8	; 232
    18ae:	93 e0       	ldi	r25, 0x03	; 3
    18b0:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <delay_ms>

	// Disable the cursor.
	tvtext_flags &= ~_BV(TVTEXT_CURSOR_ENABLED);
    18b4:	80 91 14 01 	lds	r24, 0x0114
    18b8:	8b 7f       	andi	r24, 0xFB	; 251
    18ba:	80 93 14 01 	sts	0x0114, r24

	// Restore the full viewport.
	tvtext_reset_viewport_cursor_home();
    18be:	0e 94 38 10 	call	0x2070	; 0x2070 <tvtext_reset_viewport_cursor_home>
    18c2:	c1 e0       	ldi	r28, 0x01	; 1
    18c4:	d0 e0       	ldi	r29, 0x00	; 0
			delay_ms(40);
			// "Fade up" any existing data on the screen.
			demo_invert_fade_up_blocks();
			// Add a new block to fade up.
			{
				uint8_t x_start = (row & 2) ? (30 - col) : col;
    18c6:	be e1       	ldi	r27, 0x1E	; 30
    18c8:	db 2e       	mov	r13, r27
				for (uint8_t x = x_start; x < x_start + 2; ++x) {
					for (uint8_t y = row; y < row + 2; ++y) {
						tvtext_buffer[y * 32 + x] = 188; // 25%
    18ca:	1c eb       	ldi	r17, 0xBC	; 188
    18cc:	c1 2e       	mov	r12, r17
    18ce:	2e c0       	rjmp	.+92     	; 0x192c <demo_invert+0xc0>
	tvtext_reset_viewport_cursor_home();

	// Fill in the screen in a snake-like fashion.
	for (uint8_t row = 0; row < 16; row += 2) {
		for (uint8_t col = 0; col < 32; col += 2) {
			delay_ms(40);
    18d0:	88 e2       	ldi	r24, 0x28	; 40
    18d2:	90 e0       	ldi	r25, 0x00	; 0
    18d4:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <delay_ms>
			// "Fade up" any existing data on the screen.
			demo_invert_fade_up_blocks();
			// Add a new block to fade up.
			{
				uint8_t x_start = (row & 2) ? (30 - col) : col;
    18d8:	ff 20       	and	r15, r15
    18da:	19 f0       	breq	.+6      	; 0x18e2 <demo_invert+0x76>
    18dc:	4d 2d       	mov	r20, r13
    18de:	41 1b       	sub	r20, r17
    18e0:	01 c0       	rjmp	.+2      	; 0x18e4 <demo_invert+0x78>
    18e2:	41 2f       	mov	r20, r17
				for (uint8_t x = x_start; x < x_start + 2; ++x) {
    18e4:	24 2f       	mov	r18, r20
    18e6:	30 e0       	ldi	r19, 0x00	; 0
    18e8:	2f 5f       	subi	r18, 0xFF	; 255
    18ea:	3f 4f       	sbci	r19, 0xFF	; 255
    18ec:	0f c0       	rjmp	.+30     	; 0x190c <demo_invert+0xa0>
					for (uint8_t y = row; y < row + 2; ++y) {
						tvtext_buffer[y * 32 + x] = 188; // 25%
    18ee:	a5 e0       	ldi	r26, 0x05	; 5
    18f0:	ee 0f       	add	r30, r30
    18f2:	ff 1f       	adc	r31, r31
    18f4:	aa 95       	dec	r26
    18f6:	e1 f7       	brne	.-8      	; 0x18f0 <demo_invert+0x84>
    18f8:	e8 0f       	add	r30, r24
    18fa:	f9 1f       	adc	r31, r25
    18fc:	c0 82       	st	Z, r12
			demo_invert_fade_up_blocks();
			// Add a new block to fade up.
			{
				uint8_t x_start = (row & 2) ? (30 - col) : col;
				for (uint8_t x = x_start; x < x_start + 2; ++x) {
					for (uint8_t y = row; y < row + 2; ++y) {
    18fe:	5f 5f       	subi	r21, 0xFF	; 255
    1900:	e5 2f       	mov	r30, r21
    1902:	f0 e0       	ldi	r31, 0x00	; 0
    1904:	ce 17       	cp	r28, r30
    1906:	df 07       	cpc	r29, r31
    1908:	94 f7       	brge	.-28     	; 0x18ee <demo_invert+0x82>
			// "Fade up" any existing data on the screen.
			demo_invert_fade_up_blocks();
			// Add a new block to fade up.
			{
				uint8_t x_start = (row & 2) ? (30 - col) : col;
				for (uint8_t x = x_start; x < x_start + 2; ++x) {
    190a:	4f 5f       	subi	r20, 0xFF	; 255
    190c:	84 2f       	mov	r24, r20
    190e:	90 e0       	ldi	r25, 0x00	; 0
    1910:	28 17       	cp	r18, r24
    1912:	39 07       	cpc	r19, r25
    1914:	24 f0       	brlt	.+8      	; 0x191e <demo_invert+0xb2>
    1916:	50 2f       	mov	r21, r16
					for (uint8_t y = row; y < row + 2; ++y) {
						tvtext_buffer[y * 32 + x] = 188; // 25%
    1918:	84 5e       	subi	r24, 0xE4	; 228
    191a:	9e 4f       	sbci	r25, 0xFE	; 254
    191c:	f1 cf       	rjmp	.-30     	; 0x1900 <demo_invert+0x94>
	// Restore the full viewport.
	tvtext_reset_viewport_cursor_home();

	// Fill in the screen in a snake-like fashion.
	for (uint8_t row = 0; row < 16; row += 2) {
		for (uint8_t col = 0; col < 32; col += 2) {
    191e:	1e 5f       	subi	r17, 0xFE	; 254
    1920:	10 32       	cpi	r17, 0x20	; 32
    1922:	b1 f6       	brne	.-84     	; 0x18d0 <demo_invert+0x64>
    1924:	22 96       	adiw	r28, 0x02	; 2

	// Restore the full viewport.
	tvtext_reset_viewport_cursor_home();

	// Fill in the screen in a snake-like fashion.
	for (uint8_t row = 0; row < 16; row += 2) {
    1926:	c1 31       	cpi	r28, 0x11	; 17
    1928:	d1 05       	cpc	r29, r1
    192a:	39 f0       	breq	.+14     	; 0x193a <demo_invert+0xce>
				break;
		}
	}
}

void demo_invert(void) {
    192c:	0c 2f       	mov	r16, r28
    192e:	01 50       	subi	r16, 0x01	; 1
    1930:	10 e0       	ldi	r17, 0x00	; 0
			delay_ms(40);
			// "Fade up" any existing data on the screen.
			demo_invert_fade_up_blocks();
			// Add a new block to fade up.
			{
				uint8_t x_start = (row & 2) ? (30 - col) : col;
    1932:	f2 e0       	ldi	r31, 0x02	; 2
    1934:	ff 2e       	mov	r15, r31
    1936:	f0 22       	and	r15, r16
    1938:	cb cf       	rjmp	.-106    	; 0x18d0 <demo_invert+0x64>
			}
		}
	}
	// Fade up the remaining blocks.
	for (uint8_t i = 0; i < 3; ++i) {
		delay_ms(40);
    193a:	88 e2       	ldi	r24, 0x28	; 40
    193c:	90 e0       	ldi	r25, 0x00	; 0
    193e:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <delay_ms>
    1942:	88 e2       	ldi	r24, 0x28	; 40
    1944:	90 e0       	ldi	r25, 0x00	; 0
    1946:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <delay_ms>
    194a:	88 e2       	ldi	r24, 0x28	; 40
    194c:	90 e0       	ldi	r25, 0x00	; 0
    194e:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <delay_ms>
		demo_invert_fade_up_blocks();
	}

	delay_ms(100);
    1952:	84 e6       	ldi	r24, 0x64	; 100
    1954:	90 e0       	ldi	r25, 0x00	; 0
    1956:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <delay_ms>
	tvtext_flags ^= _BV(TVTEXT_INVERTED);
    195a:	80 91 14 01 	lds	r24, 0x0114
    195e:	90 e1       	ldi	r25, 0x10	; 16
    1960:	89 27       	eor	r24, r25
    1962:	80 93 14 01 	sts	0x0114, r24
	tvtext_clear();
    1966:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <tvtext_clear>
	delay_ms(500);
    196a:	84 ef       	ldi	r24, 0xF4	; 244
    196c:	91 e0       	ldi	r25, 0x01	; 1
    196e:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <delay_ms>

	// Enable the cursor.
	tvtext_flags |= _BV(TVTEXT_CURSOR_ENABLED);
    1972:	80 91 14 01 	lds	r24, 0x0114
    1976:	84 60       	ori	r24, 0x04	; 4
    1978:	80 93 14 01 	sts	0x0114, r24
}
    197c:	df 91       	pop	r29
    197e:	cf 91       	pop	r28
    1980:	1f 91       	pop	r17
    1982:	0f 91       	pop	r16
    1984:	ff 90       	pop	r15
    1986:	df 90       	pop	r13
    1988:	cf 90       	pop	r12
    198a:	08 95       	ret

0000198c <demo>:

void demo(void) {

  tvtext_init();
    198c:	0e 94 48 10 	call	0x2090	; 0x2090 <tvtext_init>

  // Wait a couple of seconds to allow the TV to get itself in gear.
  tvtext_flags &= ~_BV(TVTEXT_VISIBLE);
    1990:	80 91 14 01 	lds	r24, 0x0114
    1994:	8e 7f       	andi	r24, 0xFE	; 254
    1996:	80 93 14 01 	sts	0x0114, r24
  delay_ms(2000);
    199a:	80 ed       	ldi	r24, 0xD0	; 208
    199c:	97 e0       	ldi	r25, 0x07	; 7
    199e:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <delay_ms>
  tvtext_flags |= _BV(TVTEXT_VISIBLE);
    19a2:	80 91 14 01 	lds	r24, 0x0114
    19a6:	81 60       	ori	r24, 0x01	; 1
    19a8:	80 93 14 01 	sts	0x0114, r24

  //First loop in white on black !
  demo_basic();
    19ac:	0e 94 a6 09 	call	0x134c	; 0x134c <demo_basic>
  demo_countdown();
    19b0:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <demo_countdown>
  demo_info();
    19b4:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <demo_info>
  demo_viewport();
    19b8:	0e 94 4b 0a 	call	0x1496	; 0x1496 <demo_viewport>
  demo_cursor();
    19bc:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <demo_cursor>
  demo_invert();
    19c0:	0e 94 36 0c 	call	0x186c	; 0x186c <demo_invert>

  //Clean the business before leaving
  tvtext_clear();
    19c4:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <tvtext_clear>
  tvtext_reset_viewport_cursor_home();
    19c8:	0c 94 38 10 	jmp	0x2070	; 0x2070 <tvtext_reset_viewport_cursor_home>

000019cc <scroll_out>:
#include <stdint.h>
#include "tvtext.h"

void scroll_out(void) {
    19cc:	cf 93       	push	r28
    19ce:	c4 e4       	ldi	r28, 0x44	; 68
	for (uint8_t scroll_out = 0; scroll_out < (128 + 8) / 2; ++scroll_out) {
		tvtext_wait_vsync();
    19d0:	0e 94 2e 12 	call	0x245c	; 0x245c <tvtext_wait_vsync>
		tvtext_offset_y += 4;
    19d4:	80 91 16 01 	lds	r24, 0x0116
    19d8:	90 91 17 01 	lds	r25, 0x0117
    19dc:	04 96       	adiw	r24, 0x04	; 4
    19de:	90 93 17 01 	sts	0x0117, r25
    19e2:	80 93 16 01 	sts	0x0116, r24
    19e6:	c1 50       	subi	r28, 0x01	; 1
#include <stdint.h>
#include "tvtext.h"

void scroll_out(void) {
	for (uint8_t scroll_out = 0; scroll_out < (128 + 8) / 2; ++scroll_out) {
    19e8:	99 f7       	brne	.-26     	; 0x19d0 <scroll_out+0x4>
		tvtext_wait_vsync();
		tvtext_offset_y += 4;
	}
}
    19ea:	cf 91       	pop	r28
    19ec:	08 95       	ret

000019ee <scroll_out_instant>:
void scroll_out_instant(void) {
	tvtext_offset_y += (128 + 8) * 2;
    19ee:	80 91 16 01 	lds	r24, 0x0116
    19f2:	90 91 17 01 	lds	r25, 0x0117
    19f6:	80 5f       	subi	r24, 0xF0	; 240
    19f8:	9e 4f       	sbci	r25, 0xFE	; 254
    19fa:	90 93 17 01 	sts	0x0117, r25
    19fe:	80 93 16 01 	sts	0x0116, r24
    1a02:	08 95       	ret

00001a04 <scroll_in>:
}
void scroll_in(void) {
    1a04:	cf 93       	push	r28
    1a06:	c4 e4       	ldi	r28, 0x44	; 68
	for (uint8_t scroll_in = 0; scroll_in < (128 + 8) / 2; ++scroll_in) {
		tvtext_wait_vsync();
    1a08:	0e 94 2e 12 	call	0x245c	; 0x245c <tvtext_wait_vsync>
		tvtext_offset_y -= 4;
    1a0c:	80 91 16 01 	lds	r24, 0x0116
    1a10:	90 91 17 01 	lds	r25, 0x0117
    1a14:	04 97       	sbiw	r24, 0x04	; 4
    1a16:	90 93 17 01 	sts	0x0117, r25
    1a1a:	80 93 16 01 	sts	0x0116, r24
    1a1e:	c1 50       	subi	r28, 0x01	; 1
}
void scroll_out_instant(void) {
	tvtext_offset_y += (128 + 8) * 2;
}
void scroll_in(void) {
	for (uint8_t scroll_in = 0; scroll_in < (128 + 8) / 2; ++scroll_in) {
    1a20:	99 f7       	brne	.-26     	; 0x1a08 <scroll_in+0x4>
		tvtext_wait_vsync();
		tvtext_offset_y -= 4;
	}
}
    1a22:	cf 91       	pop	r28
    1a24:	08 95       	ret

00001a26 <scroll_in_instant>:
void scroll_in_instant(void) {
	tvtext_offset_y -= (128 + 8) * 2;
    1a26:	80 91 16 01 	lds	r24, 0x0116
    1a2a:	90 91 17 01 	lds	r25, 0x0117
    1a2e:	80 51       	subi	r24, 0x10	; 16
    1a30:	91 40       	sbci	r25, 0x01	; 1
    1a32:	90 93 17 01 	sts	0x0117, r25
    1a36:	80 93 16 01 	sts	0x0116, r24
    1a3a:	08 95       	ret

00001a3c <draw_animated_rectangle>:

#include "fontchars.h"
#include "rectangle.h"

// Draws an "animated" rectangle.
void draw_animated_rectangle(uint8_t left, uint8_t top, uint8_t right, uint8_t bottom) {
    1a3c:	2f 92       	push	r2
    1a3e:	3f 92       	push	r3
    1a40:	4f 92       	push	r4
    1a42:	5f 92       	push	r5
    1a44:	6f 92       	push	r6
    1a46:	7f 92       	push	r7
    1a48:	8f 92       	push	r8
    1a4a:	9f 92       	push	r9
    1a4c:	af 92       	push	r10
    1a4e:	bf 92       	push	r11
    1a50:	cf 92       	push	r12
    1a52:	df 92       	push	r13
    1a54:	ff 92       	push	r15
    1a56:	0f 93       	push	r16
    1a58:	1f 93       	push	r17
    1a5a:	cf 93       	push	r28
    1a5c:	df 93       	push	r29
    1a5e:	00 d0       	rcall	.+0      	; 0x1a60 <draw_animated_rectangle+0x24>
    1a60:	00 d0       	rcall	.+0      	; 0x1a62 <draw_animated_rectangle+0x26>
    1a62:	00 d0       	rcall	.+0      	; 0x1a64 <draw_animated_rectangle+0x28>
    1a64:	cd b7       	in	r28, 0x3d	; 61
    1a66:	de b7       	in	r29, 0x3e	; 62
    1a68:	6a 83       	std	Y+2, r22	; 0x02
    1a6a:	f2 2e       	mov	r15, r18
	uint8_t scroll_offset = tvtext_frame_counter / 4;
    1a6c:	20 91 12 01 	lds	r18, 0x0112
    1a70:	30 91 13 01 	lds	r19, 0x0113
    1a74:	37 ff       	sbrs	r19, 7
    1a76:	02 c0       	rjmp	.+4      	; 0x1a7c <draw_animated_rectangle+0x40>
    1a78:	2d 5f       	subi	r18, 0xFD	; 253
    1a7a:	3f 4f       	sbci	r19, 0xFF	; 255
    1a7c:	b9 01       	movw	r22, r18
    1a7e:	75 95       	asr	r23
    1a80:	67 95       	ror	r22
    1a82:	75 95       	asr	r23
    1a84:	67 95       	ror	r22
	scroll_offset &= 3;
    1a86:	63 70       	andi	r22, 0x03	; 3
    1a88:	77 27       	eor	r23, r23
    1a8a:	7e 83       	std	Y+6, r23	; 0x06
    1a8c:	6d 83       	std	Y+5, r22	; 0x05
    1a8e:	69 83       	std	Y+1, r22	; 0x01
	// Top.
	memset(tvtext_buffer + top * TVTEXT_BUFFER_WIDTH + left + 1, FONT_ANIMATED_RECTANGLE_HORIZONTAL + scroll_offset, right - left - 1);
    1a90:	24 2f       	mov	r18, r20
    1a92:	30 e0       	ldi	r19, 0x00	; 0
    1a94:	08 2f       	mov	r16, r24
    1a96:	10 e0       	ldi	r17, 0x00	; 0
    1a98:	49 01       	movw	r8, r18
    1a9a:	80 1a       	sub	r8, r16
    1a9c:	91 0a       	sbc	r9, r17
    1a9e:	24 01       	movw	r4, r8
    1aa0:	71 e0       	ldi	r23, 0x01	; 1
    1aa2:	47 1a       	sub	r4, r23
    1aa4:	51 08       	sbc	r5, r1
    1aa6:	8a 81       	ldd	r24, Y+2	; 0x02
    1aa8:	68 2e       	mov	r6, r24
    1aaa:	71 2c       	mov	r7, r1
    1aac:	53 01       	movw	r10, r6
    1aae:	45 e0       	ldi	r20, 0x05	; 5
    1ab0:	aa 0c       	add	r10, r10
    1ab2:	bb 1c       	adc	r11, r11
    1ab4:	4a 95       	dec	r20
    1ab6:	e1 f7       	brne	.-8      	; 0x1ab0 <draw_animated_rectangle+0x74>
    1ab8:	18 01       	movw	r2, r16
    1aba:	9f ef       	ldi	r25, 0xFF	; 255
    1abc:	29 1a       	sub	r2, r25
    1abe:	39 0a       	sbc	r3, r25
    1ac0:	6d 81       	ldd	r22, Y+5	; 0x05
    1ac2:	7e 81       	ldd	r23, Y+6	; 0x06
    1ac4:	6c 56       	subi	r22, 0x6C	; 108
    1ac6:	7f 4f       	sbci	r23, 0xFF	; 255
    1ac8:	c5 01       	movw	r24, r10
    1aca:	82 0d       	add	r24, r2
    1acc:	93 1d       	adc	r25, r3
    1ace:	a2 01       	movw	r20, r4
    1ad0:	84 5e       	subi	r24, 0xE4	; 228
    1ad2:	9e 4f       	sbci	r25, 0xFE	; 254
    1ad4:	2b 83       	std	Y+3, r18	; 0x03
    1ad6:	3c 83       	std	Y+4, r19	; 0x04
    1ad8:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <memset>
	// Bottom.
	memset(tvtext_buffer + bottom * TVTEXT_BUFFER_WIDTH + left + 1, FONT_ANIMATED_RECTANGLE_HORIZONTAL + (-scroll_offset & 3), right - left - 1);
    1adc:	a0 e2       	ldi	r26, 0x20	; 32
    1ade:	fa 9e       	mul	r15, r26
    1ae0:	60 01       	movw	r12, r0
    1ae2:	11 24       	eor	r1, r1
    1ae4:	6d 81       	ldd	r22, Y+5	; 0x05
    1ae6:	7e 81       	ldd	r23, Y+6	; 0x06
    1ae8:	71 95       	neg	r23
    1aea:	61 95       	neg	r22
    1aec:	71 09       	sbc	r23, r1
    1aee:	63 70       	andi	r22, 0x03	; 3
    1af0:	77 27       	eor	r23, r23
    1af2:	6c 56       	subi	r22, 0x6C	; 108
    1af4:	7f 4f       	sbci	r23, 0xFF	; 255
    1af6:	c6 01       	movw	r24, r12
    1af8:	82 0d       	add	r24, r2
    1afa:	93 1d       	adc	r25, r3
    1afc:	a2 01       	movw	r20, r4
    1afe:	84 5e       	subi	r24, 0xE4	; 228
    1b00:	9e 4f       	sbci	r25, 0xFE	; 254
    1b02:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <memset>
	{
		char* p = tvtext_buffer + (top + 1) * TVTEXT_BUFFER_WIDTH + left;
    1b06:	f3 01       	movw	r30, r6
    1b08:	31 96       	adiw	r30, 0x01	; 1
    1b0a:	55 e0       	ldi	r21, 0x05	; 5
    1b0c:	ee 0f       	add	r30, r30
    1b0e:	ff 1f       	adc	r31, r31
    1b10:	5a 95       	dec	r21
    1b12:	e1 f7       	brne	.-8      	; 0x1b0c <draw_animated_rectangle+0xd0>
    1b14:	e0 0f       	add	r30, r16
    1b16:	f1 1f       	adc	r31, r17
    1b18:	e4 5e       	subi	r30, 0xE4	; 228
    1b1a:	fe 4f       	sbci	r31, 0xFE	; 254
		for (uint8_t row = top + 1; row < bottom; ++row, p += TVTEXT_BUFFER_WIDTH) {
    1b1c:	9a 81       	ldd	r25, Y+2	; 0x02
    1b1e:	9f 5f       	subi	r25, 0xFF	; 255
			// Left.
			*p = FONT_ANIMATED_RECTANGLE_VERTICAL + (-scroll_offset & 3);
    1b20:	89 81       	ldd	r24, Y+1	; 0x01
    1b22:	81 95       	neg	r24
    1b24:	83 70       	andi	r24, 0x03	; 3
    1b26:	80 57       	subi	r24, 0x70	; 112
			// Right.
			*(p + (right - left)) = FONT_ANIMATED_RECTANGLE_VERTICAL + scroll_offset;
    1b28:	49 81       	ldd	r20, Y+1	; 0x01
    1b2a:	40 57       	subi	r20, 0x70	; 112
	memset(tvtext_buffer + top * TVTEXT_BUFFER_WIDTH + left + 1, FONT_ANIMATED_RECTANGLE_HORIZONTAL + scroll_offset, right - left - 1);
	// Bottom.
	memset(tvtext_buffer + bottom * TVTEXT_BUFFER_WIDTH + left + 1, FONT_ANIMATED_RECTANGLE_HORIZONTAL + (-scroll_offset & 3), right - left - 1);
	{
		char* p = tvtext_buffer + (top + 1) * TVTEXT_BUFFER_WIDTH + left;
		for (uint8_t row = top + 1; row < bottom; ++row, p += TVTEXT_BUFFER_WIDTH) {
    1b2c:	2b 81       	ldd	r18, Y+3	; 0x03
    1b2e:	3c 81       	ldd	r19, Y+4	; 0x04
    1b30:	07 c0       	rjmp	.+14     	; 0x1b40 <draw_animated_rectangle+0x104>
			// Left.
			*p = FONT_ANIMATED_RECTANGLE_VERTICAL + (-scroll_offset & 3);
    1b32:	80 83       	st	Z, r24

#include "fontchars.h"
#include "rectangle.h"

// Draws an "animated" rectangle.
void draw_animated_rectangle(uint8_t left, uint8_t top, uint8_t right, uint8_t bottom) {
    1b34:	df 01       	movw	r26, r30
    1b36:	a8 0d       	add	r26, r8
    1b38:	b9 1d       	adc	r27, r9
		char* p = tvtext_buffer + (top + 1) * TVTEXT_BUFFER_WIDTH + left;
		for (uint8_t row = top + 1; row < bottom; ++row, p += TVTEXT_BUFFER_WIDTH) {
			// Left.
			*p = FONT_ANIMATED_RECTANGLE_VERTICAL + (-scroll_offset & 3);
			// Right.
			*(p + (right - left)) = FONT_ANIMATED_RECTANGLE_VERTICAL + scroll_offset;
    1b3a:	4c 93       	st	X, r20
	memset(tvtext_buffer + top * TVTEXT_BUFFER_WIDTH + left + 1, FONT_ANIMATED_RECTANGLE_HORIZONTAL + scroll_offset, right - left - 1);
	// Bottom.
	memset(tvtext_buffer + bottom * TVTEXT_BUFFER_WIDTH + left + 1, FONT_ANIMATED_RECTANGLE_HORIZONTAL + (-scroll_offset & 3), right - left - 1);
	{
		char* p = tvtext_buffer + (top + 1) * TVTEXT_BUFFER_WIDTH + left;
		for (uint8_t row = top + 1; row < bottom; ++row, p += TVTEXT_BUFFER_WIDTH) {
    1b3c:	9f 5f       	subi	r25, 0xFF	; 255
    1b3e:	b0 96       	adiw	r30, 0x20	; 32
    1b40:	9f 15       	cp	r25, r15
    1b42:	b8 f3       	brcs	.-18     	; 0x1b32 <draw_animated_rectangle+0xf6>
			// Right.
			*(p + (right - left)) = FONT_ANIMATED_RECTANGLE_VERTICAL + scroll_offset;
		}
	}
	// Corners.
	tvtext_buffer[top * TVTEXT_BUFFER_WIDTH + left] = FONT_ANIMATED_RECTANGLE_TOP_LEFT + scroll_offset;
    1b44:	04 5e       	subi	r16, 0xE4	; 228
    1b46:	1e 4f       	sbci	r17, 0xFE	; 254
    1b48:	f8 01       	movw	r30, r16
    1b4a:	ea 0d       	add	r30, r10
    1b4c:	fb 1d       	adc	r31, r11
    1b4e:	89 81       	ldd	r24, Y+1	; 0x01
    1b50:	88 56       	subi	r24, 0x68	; 104
    1b52:	80 83       	st	Z, r24
	tvtext_buffer[top * TVTEXT_BUFFER_WIDTH + right] = FONT_ANIMATED_RECTANGLE_TOP_RIGHT + scroll_offset;
    1b54:	24 5e       	subi	r18, 0xE4	; 228
    1b56:	3e 4f       	sbci	r19, 0xFE	; 254
    1b58:	f9 01       	movw	r30, r18
    1b5a:	ea 0d       	add	r30, r10
    1b5c:	fb 1d       	adc	r31, r11
    1b5e:	89 81       	ldd	r24, Y+1	; 0x01
    1b60:	84 56       	subi	r24, 0x64	; 100
    1b62:	80 83       	st	Z, r24
	tvtext_buffer[bottom * TVTEXT_BUFFER_WIDTH + left] = FONT_ANIMATED_RECTANGLE_BOTTOM_LEFT + scroll_offset;
    1b64:	f8 01       	movw	r30, r16
    1b66:	ec 0d       	add	r30, r12
    1b68:	fd 1d       	adc	r31, r13
    1b6a:	89 81       	ldd	r24, Y+1	; 0x01
    1b6c:	80 56       	subi	r24, 0x60	; 96
    1b6e:	80 83       	st	Z, r24
	tvtext_buffer[bottom * TVTEXT_BUFFER_WIDTH + right] = FONT_ANIMATED_RECTANGLE_BOTTOM_RIGHT + scroll_offset;
    1b70:	f9 01       	movw	r30, r18
    1b72:	ec 0d       	add	r30, r12
    1b74:	fd 1d       	adc	r31, r13
    1b76:	89 81       	ldd	r24, Y+1	; 0x01
    1b78:	8c 55       	subi	r24, 0x5C	; 92
    1b7a:	80 83       	st	Z, r24
}
    1b7c:	26 96       	adiw	r28, 0x06	; 6
    1b7e:	0f b6       	in	r0, 0x3f	; 63
    1b80:	f8 94       	cli
    1b82:	de bf       	out	0x3e, r29	; 62
    1b84:	0f be       	out	0x3f, r0	; 63
    1b86:	cd bf       	out	0x3d, r28	; 61
    1b88:	df 91       	pop	r29
    1b8a:	cf 91       	pop	r28
    1b8c:	1f 91       	pop	r17
    1b8e:	0f 91       	pop	r16
    1b90:	ff 90       	pop	r15
    1b92:	df 90       	pop	r13
    1b94:	cf 90       	pop	r12
    1b96:	bf 90       	pop	r11
    1b98:	af 90       	pop	r10
    1b9a:	9f 90       	pop	r9
    1b9c:	8f 90       	pop	r8
    1b9e:	7f 90       	pop	r7
    1ba0:	6f 90       	pop	r6
    1ba2:	5f 90       	pop	r5
    1ba4:	4f 90       	pop	r4
    1ba6:	3f 90       	pop	r3
    1ba8:	2f 90       	pop	r2
    1baa:	08 95       	ret

00001bac <draw_rounded_rectangle>:

// Draws a rounded rectangle.
void draw_rounded_rectangle(uint8_t left, uint8_t top, uint8_t right, uint8_t bottom) {
    1bac:	2f 92       	push	r2
    1bae:	3f 92       	push	r3
    1bb0:	4f 92       	push	r4
    1bb2:	5f 92       	push	r5
    1bb4:	6f 92       	push	r6
    1bb6:	7f 92       	push	r7
    1bb8:	8f 92       	push	r8
    1bba:	9f 92       	push	r9
    1bbc:	af 92       	push	r10
    1bbe:	bf 92       	push	r11
    1bc0:	cf 92       	push	r12
    1bc2:	df 92       	push	r13
    1bc4:	ff 92       	push	r15
    1bc6:	0f 93       	push	r16
    1bc8:	1f 93       	push	r17
    1bca:	cf 93       	push	r28
    1bcc:	df 93       	push	r29
    1bce:	00 d0       	rcall	.+0      	; 0x1bd0 <draw_rounded_rectangle+0x24>
    1bd0:	1f 92       	push	r1
    1bd2:	cd b7       	in	r28, 0x3d	; 61
    1bd4:	de b7       	in	r29, 0x3e	; 62
    1bd6:	36 2f       	mov	r19, r22
    1bd8:	f2 2e       	mov	r15, r18
	memset(tvtext_buffer + top * TVTEXT_BUFFER_WIDTH + left + 1, FONT_ROUNDED_RECTANGLE_TOP, right - left - 1);
    1bda:	24 2e       	mov	r2, r20
    1bdc:	31 2c       	mov	r3, r1
    1bde:	48 2f       	mov	r20, r24
    1be0:	50 e0       	ldi	r21, 0x00	; 0
    1be2:	5b 83       	std	Y+3, r21	; 0x03
    1be4:	4a 83       	std	Y+2, r20	; 0x02
    1be6:	51 01       	movw	r10, r2
    1be8:	a4 1a       	sub	r10, r20
    1bea:	b5 0a       	sbc	r11, r21
    1bec:	35 01       	movw	r6, r10
    1bee:	51 e0       	ldi	r21, 0x01	; 1
    1bf0:	65 1a       	sub	r6, r21
    1bf2:	71 08       	sbc	r7, r1
    1bf4:	86 2e       	mov	r8, r22
    1bf6:	91 2c       	mov	r9, r1
    1bf8:	64 01       	movw	r12, r8
    1bfa:	65 e0       	ldi	r22, 0x05	; 5
    1bfc:	cc 0c       	add	r12, r12
    1bfe:	dd 1c       	adc	r13, r13
    1c00:	6a 95       	dec	r22
    1c02:	e1 f7       	brne	.-8      	; 0x1bfc <draw_rounded_rectangle+0x50>
    1c04:	4a 80       	ldd	r4, Y+2	; 0x02
    1c06:	5b 80       	ldd	r5, Y+3	; 0x03
    1c08:	8f ef       	ldi	r24, 0xFF	; 255
    1c0a:	48 1a       	sub	r4, r24
    1c0c:	58 0a       	sbc	r5, r24
    1c0e:	c6 01       	movw	r24, r12
    1c10:	84 0d       	add	r24, r4
    1c12:	95 1d       	adc	r25, r5
    1c14:	a3 01       	movw	r20, r6
    1c16:	6c ea       	ldi	r22, 0xAC	; 172
    1c18:	70 e0       	ldi	r23, 0x00	; 0
    1c1a:	84 5e       	subi	r24, 0xE4	; 228
    1c1c:	9e 4f       	sbci	r25, 0xFE	; 254
    1c1e:	39 83       	std	Y+1, r19	; 0x01
    1c20:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <memset>
	memset(tvtext_buffer + bottom * TVTEXT_BUFFER_WIDTH + left + 1, FONT_ROUNDED_RECTANGLE_BOTTOM, right - left - 1);
    1c24:	90 e2       	ldi	r25, 0x20	; 32
    1c26:	f9 9e       	mul	r15, r25
    1c28:	80 01       	movw	r16, r0
    1c2a:	11 24       	eor	r1, r1
    1c2c:	c8 01       	movw	r24, r16
    1c2e:	84 0d       	add	r24, r4
    1c30:	95 1d       	adc	r25, r5
    1c32:	a3 01       	movw	r20, r6
    1c34:	6d ea       	ldi	r22, 0xAD	; 173
    1c36:	70 e0       	ldi	r23, 0x00	; 0
    1c38:	84 5e       	subi	r24, 0xE4	; 228
    1c3a:	9e 4f       	sbci	r25, 0xFE	; 254
    1c3c:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <memset>
	{
		char* p = tvtext_buffer + (top + 1) * TVTEXT_BUFFER_WIDTH + left;
    1c40:	f4 01       	movw	r30, r8
    1c42:	31 96       	adiw	r30, 0x01	; 1
    1c44:	75 e0       	ldi	r23, 0x05	; 5
    1c46:	ee 0f       	add	r30, r30
    1c48:	ff 1f       	adc	r31, r31
    1c4a:	7a 95       	dec	r23
    1c4c:	e1 f7       	brne	.-8      	; 0x1c46 <draw_rounded_rectangle+0x9a>
    1c4e:	aa 81       	ldd	r26, Y+2	; 0x02
    1c50:	bb 81       	ldd	r27, Y+3	; 0x03
    1c52:	ea 0f       	add	r30, r26
    1c54:	fb 1f       	adc	r31, r27
    1c56:	e4 5e       	subi	r30, 0xE4	; 228
    1c58:	fe 4f       	sbci	r31, 0xFE	; 254
		for (uint8_t row = top + 1; row < bottom; ++row, p += TVTEXT_BUFFER_WIDTH) {
    1c5a:	39 81       	ldd	r19, Y+1	; 0x01
    1c5c:	63 2f       	mov	r22, r19
    1c5e:	6f 5f       	subi	r22, 0xFF	; 255
			*p = FONT_ROUNDED_RECTANGLE_LEFT;
    1c60:	8e ea       	ldi	r24, 0xAE	; 174
			*(p + (right - left)) = FONT_ROUNDED_RECTANGLE_RIGHT;
    1c62:	9f ea       	ldi	r25, 0xAF	; 175
void draw_rounded_rectangle(uint8_t left, uint8_t top, uint8_t right, uint8_t bottom) {
	memset(tvtext_buffer + top * TVTEXT_BUFFER_WIDTH + left + 1, FONT_ROUNDED_RECTANGLE_TOP, right - left - 1);
	memset(tvtext_buffer + bottom * TVTEXT_BUFFER_WIDTH + left + 1, FONT_ROUNDED_RECTANGLE_BOTTOM, right - left - 1);
	{
		char* p = tvtext_buffer + (top + 1) * TVTEXT_BUFFER_WIDTH + left;
		for (uint8_t row = top + 1; row < bottom; ++row, p += TVTEXT_BUFFER_WIDTH) {
    1c64:	07 c0       	rjmp	.+14     	; 0x1c74 <draw_rounded_rectangle+0xc8>
			*p = FONT_ROUNDED_RECTANGLE_LEFT;
    1c66:	80 83       	st	Z, r24
	tvtext_buffer[bottom * TVTEXT_BUFFER_WIDTH + left] = FONT_ANIMATED_RECTANGLE_BOTTOM_LEFT + scroll_offset;
	tvtext_buffer[bottom * TVTEXT_BUFFER_WIDTH + right] = FONT_ANIMATED_RECTANGLE_BOTTOM_RIGHT + scroll_offset;
}

// Draws a rounded rectangle.
void draw_rounded_rectangle(uint8_t left, uint8_t top, uint8_t right, uint8_t bottom) {
    1c68:	df 01       	movw	r26, r30
    1c6a:	aa 0d       	add	r26, r10
    1c6c:	bb 1d       	adc	r27, r11
	memset(tvtext_buffer + bottom * TVTEXT_BUFFER_WIDTH + left + 1, FONT_ROUNDED_RECTANGLE_BOTTOM, right - left - 1);
	{
		char* p = tvtext_buffer + (top + 1) * TVTEXT_BUFFER_WIDTH + left;
		for (uint8_t row = top + 1; row < bottom; ++row, p += TVTEXT_BUFFER_WIDTH) {
			*p = FONT_ROUNDED_RECTANGLE_LEFT;
			*(p + (right - left)) = FONT_ROUNDED_RECTANGLE_RIGHT;
    1c6e:	9c 93       	st	X, r25
void draw_rounded_rectangle(uint8_t left, uint8_t top, uint8_t right, uint8_t bottom) {
	memset(tvtext_buffer + top * TVTEXT_BUFFER_WIDTH + left + 1, FONT_ROUNDED_RECTANGLE_TOP, right - left - 1);
	memset(tvtext_buffer + bottom * TVTEXT_BUFFER_WIDTH + left + 1, FONT_ROUNDED_RECTANGLE_BOTTOM, right - left - 1);
	{
		char* p = tvtext_buffer + (top + 1) * TVTEXT_BUFFER_WIDTH + left;
		for (uint8_t row = top + 1; row < bottom; ++row, p += TVTEXT_BUFFER_WIDTH) {
    1c70:	6f 5f       	subi	r22, 0xFF	; 255
    1c72:	b0 96       	adiw	r30, 0x20	; 32
    1c74:	6f 15       	cp	r22, r15
    1c76:	b8 f3       	brcs	.-18     	; 0x1c66 <draw_rounded_rectangle+0xba>
			*p = FONT_ROUNDED_RECTANGLE_LEFT;
			*(p + (right - left)) = FONT_ROUNDED_RECTANGLE_RIGHT;
		}
	}
	tvtext_buffer[top * TVTEXT_BUFFER_WIDTH + left] = FONT_ROUNDED_RECTANGLE_TOP_LEFT;
    1c78:	4a 81       	ldd	r20, Y+2	; 0x02
    1c7a:	5b 81       	ldd	r21, Y+3	; 0x03
    1c7c:	44 5e       	subi	r20, 0xE4	; 228
    1c7e:	5e 4f       	sbci	r21, 0xFE	; 254
    1c80:	fa 01       	movw	r30, r20
    1c82:	ec 0d       	add	r30, r12
    1c84:	fd 1d       	adc	r31, r13
    1c86:	88 ea       	ldi	r24, 0xA8	; 168
    1c88:	80 83       	st	Z, r24
	tvtext_buffer[top * TVTEXT_BUFFER_WIDTH + right] = FONT_ROUNDED_RECTANGLE_TOP_RIGHT;
    1c8a:	91 01       	movw	r18, r2
    1c8c:	24 5e       	subi	r18, 0xE4	; 228
    1c8e:	3e 4f       	sbci	r19, 0xFE	; 254
    1c90:	f9 01       	movw	r30, r18
    1c92:	ec 0d       	add	r30, r12
    1c94:	fd 1d       	adc	r31, r13
    1c96:	89 ea       	ldi	r24, 0xA9	; 169
    1c98:	80 83       	st	Z, r24
	tvtext_buffer[bottom * TVTEXT_BUFFER_WIDTH + left] = FONT_ROUNDED_RECTANGLE_BOTTOM_LEFT;
    1c9a:	40 0f       	add	r20, r16
    1c9c:	51 1f       	adc	r21, r17
    1c9e:	8a ea       	ldi	r24, 0xAA	; 170
    1ca0:	fa 01       	movw	r30, r20
    1ca2:	80 83       	st	Z, r24
	tvtext_buffer[bottom * TVTEXT_BUFFER_WIDTH + right] = FONT_ROUNDED_RECTANGLE_BOTTOM_RIGHT;
    1ca4:	f9 01       	movw	r30, r18
    1ca6:	e0 0f       	add	r30, r16
    1ca8:	f1 1f       	adc	r31, r17
    1caa:	8b ea       	ldi	r24, 0xAB	; 171
    1cac:	80 83       	st	Z, r24
}
    1cae:	0f 90       	pop	r0
    1cb0:	0f 90       	pop	r0
    1cb2:	0f 90       	pop	r0
    1cb4:	df 91       	pop	r29
    1cb6:	cf 91       	pop	r28
    1cb8:	1f 91       	pop	r17
    1cba:	0f 91       	pop	r16
    1cbc:	ff 90       	pop	r15
    1cbe:	df 90       	pop	r13
    1cc0:	cf 90       	pop	r12
    1cc2:	bf 90       	pop	r11
    1cc4:	af 90       	pop	r10
    1cc6:	9f 90       	pop	r9
    1cc8:	8f 90       	pop	r8
    1cca:	7f 90       	pop	r7
    1ccc:	6f 90       	pop	r6
    1cce:	5f 90       	pop	r5
    1cd0:	4f 90       	pop	r4
    1cd2:	3f 90       	pop	r3
    1cd4:	2f 90       	pop	r2
    1cd6:	08 95       	ret

00001cd8 <clear_rectangle>:

// Clears an animated or rounded rectangle.
void clear_rectangle(uint8_t left, uint8_t top, uint8_t right, uint8_t bottom) {
    1cd8:	7f 92       	push	r7
    1cda:	8f 92       	push	r8
    1cdc:	9f 92       	push	r9
    1cde:	af 92       	push	r10
    1ce0:	bf 92       	push	r11
    1ce2:	cf 92       	push	r12
    1ce4:	df 92       	push	r13
    1ce6:	ff 92       	push	r15
    1ce8:	0f 93       	push	r16
    1cea:	1f 93       	push	r17
    1cec:	cf 93       	push	r28
    1cee:	df 93       	push	r29
    1cf0:	76 2e       	mov	r7, r22
    1cf2:	f2 2e       	mov	r15, r18
	memset(tvtext_buffer + top * TVTEXT_BUFFER_WIDTH + left, tvtext_cleared, right - left + 1);
    1cf4:	04 2f       	mov	r16, r20
    1cf6:	10 e0       	ldi	r17, 0x00	; 0
    1cf8:	c8 2e       	mov	r12, r24
    1cfa:	d1 2c       	mov	r13, r1
    1cfc:	0c 19       	sub	r16, r12
    1cfe:	1d 09       	sbc	r17, r13
    1d00:	58 01       	movw	r10, r16
    1d02:	2f ef       	ldi	r18, 0xFF	; 255
    1d04:	a2 1a       	sub	r10, r18
    1d06:	b2 0a       	sbc	r11, r18
    1d08:	80 90 10 01 	lds	r8, 0x0110
    1d0c:	99 24       	eor	r9, r9
    1d0e:	87 fc       	sbrc	r8, 7
    1d10:	90 94       	com	r9
    1d12:	e6 01       	movw	r28, r12
    1d14:	80 e2       	ldi	r24, 0x20	; 32
    1d16:	68 9f       	mul	r22, r24
    1d18:	c0 0d       	add	r28, r0
    1d1a:	d1 1d       	adc	r29, r1
    1d1c:	11 24       	eor	r1, r1
    1d1e:	c4 5e       	subi	r28, 0xE4	; 228
    1d20:	de 4f       	sbci	r29, 0xFE	; 254
    1d22:	a5 01       	movw	r20, r10
    1d24:	b4 01       	movw	r22, r8
    1d26:	ce 01       	movw	r24, r28
    1d28:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <memset>
	memset(tvtext_buffer + bottom * TVTEXT_BUFFER_WIDTH + left, tvtext_cleared, right - left + 1);
    1d2c:	c6 01       	movw	r24, r12
    1d2e:	20 e2       	ldi	r18, 0x20	; 32
    1d30:	f2 9e       	mul	r15, r18
    1d32:	80 0d       	add	r24, r0
    1d34:	91 1d       	adc	r25, r1
    1d36:	11 24       	eor	r1, r1
    1d38:	a5 01       	movw	r20, r10
    1d3a:	b4 01       	movw	r22, r8
    1d3c:	84 5e       	subi	r24, 0xE4	; 228
    1d3e:	9e 4f       	sbci	r25, 0xFE	; 254
    1d40:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <memset>
	{
		char* p = tvtext_buffer + top * TVTEXT_BUFFER_WIDTH + left;
		for (uint8_t row = top; row <= bottom; ++row, p += TVTEXT_BUFFER_WIDTH) {
    1d44:	67 2d       	mov	r22, r7
    1d46:	09 c0       	rjmp	.+18     	; 0x1d5a <clear_rectangle+0x82>
			*p = tvtext_cleared;
    1d48:	80 91 10 01 	lds	r24, 0x0110
    1d4c:	88 83       	st	Y, r24
	tvtext_buffer[bottom * TVTEXT_BUFFER_WIDTH + left] = FONT_ROUNDED_RECTANGLE_BOTTOM_LEFT;
	tvtext_buffer[bottom * TVTEXT_BUFFER_WIDTH + right] = FONT_ROUNDED_RECTANGLE_BOTTOM_RIGHT;
}

// Clears an animated or rounded rectangle.
void clear_rectangle(uint8_t left, uint8_t top, uint8_t right, uint8_t bottom) {
    1d4e:	fe 01       	movw	r30, r28
    1d50:	e0 0f       	add	r30, r16
    1d52:	f1 1f       	adc	r31, r17
	memset(tvtext_buffer + bottom * TVTEXT_BUFFER_WIDTH + left, tvtext_cleared, right - left + 1);
	{
		char* p = tvtext_buffer + top * TVTEXT_BUFFER_WIDTH + left;
		for (uint8_t row = top; row <= bottom; ++row, p += TVTEXT_BUFFER_WIDTH) {
			*p = tvtext_cleared;
			*(p + (right - left)) = tvtext_cleared;
    1d54:	80 83       	st	Z, r24
void clear_rectangle(uint8_t left, uint8_t top, uint8_t right, uint8_t bottom) {
	memset(tvtext_buffer + top * TVTEXT_BUFFER_WIDTH + left, tvtext_cleared, right - left + 1);
	memset(tvtext_buffer + bottom * TVTEXT_BUFFER_WIDTH + left, tvtext_cleared, right - left + 1);
	{
		char* p = tvtext_buffer + top * TVTEXT_BUFFER_WIDTH + left;
		for (uint8_t row = top; row <= bottom; ++row, p += TVTEXT_BUFFER_WIDTH) {
    1d56:	6f 5f       	subi	r22, 0xFF	; 255
    1d58:	a0 96       	adiw	r28, 0x20	; 32
    1d5a:	f6 16       	cp	r15, r22
    1d5c:	a8 f7       	brcc	.-22     	; 0x1d48 <clear_rectangle+0x70>
			*p = tvtext_cleared;
			*(p + (right - left)) = tvtext_cleared;
		}
	}
}
    1d5e:	df 91       	pop	r29
    1d60:	cf 91       	pop	r28
    1d62:	1f 91       	pop	r17
    1d64:	0f 91       	pop	r16
    1d66:	ff 90       	pop	r15
    1d68:	df 90       	pop	r13
    1d6a:	cf 90       	pop	r12
    1d6c:	bf 90       	pop	r11
    1d6e:	af 90       	pop	r10
    1d70:	9f 90       	pop	r9
    1d72:	8f 90       	pop	r8
    1d74:	7f 90       	pop	r7
    1d76:	08 95       	ret

00001d78 <delay_ms>:

#include "tvtext.h"
#include "common.h"

// Wait for a particular number of ms.
void delay_ms(int ms) {
    1d78:	cf 93       	push	r28
    1d7a:	df 93       	push	r29
    1d7c:	64 e1       	ldi	r22, 0x14	; 20
    1d7e:	70 e0       	ldi	r23, 0x00	; 0
    1d80:	0e 94 42 14 	call	0x2884	; 0x2884 <__divmodhi4>
    1d84:	eb 01       	movw	r28, r22
	ms /= 20; // At 50 frames per second, there are 20ms per frame.
	while (ms-- > 0) tvtext_wait_vsync();
    1d86:	03 c0       	rjmp	.+6      	; 0x1d8e <delay_ms+0x16>
    1d88:	0e 94 2e 12 	call	0x245c	; 0x245c <tvtext_wait_vsync>
    1d8c:	21 97       	sbiw	r28, 0x01	; 1
    1d8e:	1c 16       	cp	r1, r28
    1d90:	1d 06       	cpc	r1, r29
    1d92:	d4 f3       	brlt	.-12     	; 0x1d88 <delay_ms+0x10>
}
    1d94:	df 91       	pop	r29
    1d96:	cf 91       	pop	r28
    1d98:	08 95       	ret

00001d9a <type_string_P>:

// "Type" a string onto the screen (delays a little after each character).
void type_string_P(const char* s) {
    1d9a:	cf 93       	push	r28
    1d9c:	df 93       	push	r29
    1d9e:	ec 01       	movw	r28, r24
	char c;
	while ((c = pgm_read_byte(s++))) {
    1da0:	08 c0       	rjmp	.+16     	; 0x1db2 <type_string_P+0x18>
		tvtext_putc(c);
    1da2:	0e 94 d6 10 	call	0x21ac	; 0x21ac <tvtext_putc>
		for (uint8_t delay = 0; delay < 3; ++delay) {
			tvtext_wait_vsync();
    1da6:	0e 94 2e 12 	call	0x245c	; 0x245c <tvtext_wait_vsync>
    1daa:	0e 94 2e 12 	call	0x245c	; 0x245c <tvtext_wait_vsync>
    1dae:	0e 94 2e 12 	call	0x245c	; 0x245c <tvtext_wait_vsync>
}

// "Type" a string onto the screen (delays a little after each character).
void type_string_P(const char* s) {
	char c;
	while ((c = pgm_read_byte(s++))) {
    1db2:	fe 01       	movw	r30, r28
    1db4:	21 96       	adiw	r28, 0x01	; 1
    1db6:	84 91       	lpm	r24, Z+
    1db8:	81 11       	cpse	r24, r1
    1dba:	f3 cf       	rjmp	.-26     	; 0x1da2 <type_string_P+0x8>
		tvtext_putc(c);
		for (uint8_t delay = 0; delay < 3; ++delay) {
			tvtext_wait_vsync();
		}
	}
}
    1dbc:	df 91       	pop	r29
    1dbe:	cf 91       	pop	r28
    1dc0:	08 95       	ret

00001dc2 <tvtext_scroll_right>:
		memset(p, tvtext_cleared, tvtext_viewport_right - tvtext_viewport_left + 1);
	}
	tvtext_cursor_home();	
}

void tvtext_scroll_right(void) { // VDU 23,7,0,0,0;0;0;
    1dc2:	ff 92       	push	r15
    1dc4:	0f 93       	push	r16
    1dc6:	1f 93       	push	r17
    1dc8:	cf 93       	push	r28
    1dca:	df 93       	push	r29
	char* p = tvtext_buffer + tvtext_viewport_top * TVTEXT_BUFFER_WIDTH + tvtext_viewport_left;
    1dcc:	f0 90 1c 03 	lds	r15, 0x031C
    1dd0:	80 91 18 01 	lds	r24, 0x0118
    1dd4:	90 e0       	ldi	r25, 0x00	; 0
    1dd6:	ec 01       	movw	r28, r24
    1dd8:	20 e2       	ldi	r18, 0x20	; 32
    1dda:	f2 9e       	mul	r15, r18
    1ddc:	c0 0d       	add	r28, r0
    1dde:	d1 1d       	adc	r29, r1
    1de0:	11 24       	eor	r1, r1
    1de2:	c4 5e       	subi	r28, 0xE4	; 228
    1de4:	de 4f       	sbci	r29, 0xFE	; 254
	for (uint8_t r = tvtext_viewport_top; r <= tvtext_viewport_bottom; ++r, p += TVTEXT_BUFFER_WIDTH) {
		memmove(p + 1, p, tvtext_viewport_right - tvtext_viewport_left);
    1de6:	8c 01       	movw	r16, r24
	tvtext_cursor_home();	
}

void tvtext_scroll_right(void) { // VDU 23,7,0,0,0;0;0;
	char* p = tvtext_buffer + tvtext_viewport_top * TVTEXT_BUFFER_WIDTH + tvtext_viewport_left;
	for (uint8_t r = tvtext_viewport_top; r <= tvtext_viewport_bottom; ++r, p += TVTEXT_BUFFER_WIDTH) {
    1de8:	0f c0       	rjmp	.+30     	; 0x1e08 <tvtext_scroll_right+0x46>
		memmove(p + 1, p, tvtext_viewport_right - tvtext_viewport_left);
    1dea:	40 91 0e 01 	lds	r20, 0x010E
    1dee:	50 e0       	ldi	r21, 0x00	; 0
    1df0:	40 1b       	sub	r20, r16
    1df2:	51 0b       	sbc	r21, r17
    1df4:	be 01       	movw	r22, r28
    1df6:	ce 01       	movw	r24, r28
    1df8:	01 96       	adiw	r24, 0x01	; 1
    1dfa:	0e 94 6a 14 	call	0x28d4	; 0x28d4 <memmove>
		p[0] = tvtext_cleared;
    1dfe:	80 91 10 01 	lds	r24, 0x0110
    1e02:	88 83       	st	Y, r24
	tvtext_cursor_home();	
}

void tvtext_scroll_right(void) { // VDU 23,7,0,0,0;0;0;
	char* p = tvtext_buffer + tvtext_viewport_top * TVTEXT_BUFFER_WIDTH + tvtext_viewport_left;
	for (uint8_t r = tvtext_viewport_top; r <= tvtext_viewport_bottom; ++r, p += TVTEXT_BUFFER_WIDTH) {
    1e04:	f3 94       	inc	r15
    1e06:	a0 96       	adiw	r28, 0x20	; 32
    1e08:	80 91 11 01 	lds	r24, 0x0111
    1e0c:	8f 15       	cp	r24, r15
    1e0e:	68 f7       	brcc	.-38     	; 0x1dea <tvtext_scroll_right+0x28>
		memmove(p + 1, p, tvtext_viewport_right - tvtext_viewport_left);
		p[0] = tvtext_cleared;
	}
}
    1e10:	df 91       	pop	r29
    1e12:	cf 91       	pop	r28
    1e14:	1f 91       	pop	r17
    1e16:	0f 91       	pop	r16
    1e18:	ff 90       	pop	r15
    1e1a:	08 95       	ret

00001e1c <tvtext_scroll_left>:

void tvtext_scroll_left(void) { // VDU 23,7,0,1,0;0;0;
    1e1c:	cf 92       	push	r12
    1e1e:	df 92       	push	r13
    1e20:	ff 92       	push	r15
    1e22:	0f 93       	push	r16
    1e24:	1f 93       	push	r17
    1e26:	cf 93       	push	r28
    1e28:	df 93       	push	r29
	char* p = tvtext_buffer + tvtext_viewport_top * TVTEXT_BUFFER_WIDTH + tvtext_viewport_left;
    1e2a:	f0 90 1c 03 	lds	r15, 0x031C
    1e2e:	80 91 18 01 	lds	r24, 0x0118
    1e32:	90 e0       	ldi	r25, 0x00	; 0
    1e34:	ec 01       	movw	r28, r24
    1e36:	20 e2       	ldi	r18, 0x20	; 32
    1e38:	f2 9e       	mul	r15, r18
    1e3a:	c0 0d       	add	r28, r0
    1e3c:	d1 1d       	adc	r29, r1
    1e3e:	11 24       	eor	r1, r1
    1e40:	c4 5e       	subi	r28, 0xE4	; 228
    1e42:	de 4f       	sbci	r29, 0xFE	; 254
	for (uint8_t r = tvtext_viewport_top; r <= tvtext_viewport_bottom; ++r, p += TVTEXT_BUFFER_WIDTH) {
		memmove(p, p + 1, tvtext_viewport_right - tvtext_viewport_left);
    1e44:	6c 01       	movw	r12, r24
	}
}

void tvtext_scroll_left(void) { // VDU 23,7,0,1,0;0;0;
	char* p = tvtext_buffer + tvtext_viewport_top * TVTEXT_BUFFER_WIDTH + tvtext_viewport_left;
	for (uint8_t r = tvtext_viewport_top; r <= tvtext_viewport_bottom; ++r, p += TVTEXT_BUFFER_WIDTH) {
    1e46:	14 c0       	rjmp	.+40     	; 0x1e70 <tvtext_scroll_left+0x54>
		memmove(p, p + 1, tvtext_viewport_right - tvtext_viewport_left);
    1e48:	00 91 0e 01 	lds	r16, 0x010E
    1e4c:	10 e0       	ldi	r17, 0x00	; 0
    1e4e:	0c 19       	sub	r16, r12
    1e50:	1d 09       	sbc	r17, r13
		memmove(p + 1, p, tvtext_viewport_right - tvtext_viewport_left);
		p[0] = tvtext_cleared;
	}
}

void tvtext_scroll_left(void) { // VDU 23,7,0,1,0;0;0;
    1e52:	be 01       	movw	r22, r28
    1e54:	6f 5f       	subi	r22, 0xFF	; 255
    1e56:	7f 4f       	sbci	r23, 0xFF	; 255
	char* p = tvtext_buffer + tvtext_viewport_top * TVTEXT_BUFFER_WIDTH + tvtext_viewport_left;
	for (uint8_t r = tvtext_viewport_top; r <= tvtext_viewport_bottom; ++r, p += TVTEXT_BUFFER_WIDTH) {
		memmove(p, p + 1, tvtext_viewport_right - tvtext_viewport_left);
    1e58:	a8 01       	movw	r20, r16
    1e5a:	ce 01       	movw	r24, r28
    1e5c:	0e 94 6a 14 	call	0x28d4	; 0x28d4 <memmove>
		p[tvtext_viewport_right - tvtext_viewport_left] = tvtext_cleared;
    1e60:	fe 01       	movw	r30, r28
    1e62:	e0 0f       	add	r30, r16
    1e64:	f1 1f       	adc	r31, r17
    1e66:	80 91 10 01 	lds	r24, 0x0110
    1e6a:	80 83       	st	Z, r24
	}
}

void tvtext_scroll_left(void) { // VDU 23,7,0,1,0;0;0;
	char* p = tvtext_buffer + tvtext_viewport_top * TVTEXT_BUFFER_WIDTH + tvtext_viewport_left;
	for (uint8_t r = tvtext_viewport_top; r <= tvtext_viewport_bottom; ++r, p += TVTEXT_BUFFER_WIDTH) {
    1e6c:	f3 94       	inc	r15
    1e6e:	a0 96       	adiw	r28, 0x20	; 32
    1e70:	80 91 11 01 	lds	r24, 0x0111
    1e74:	8f 15       	cp	r24, r15
    1e76:	40 f7       	brcc	.-48     	; 0x1e48 <tvtext_scroll_left+0x2c>
		memmove(p, p + 1, tvtext_viewport_right - tvtext_viewport_left);
		p[tvtext_viewport_right - tvtext_viewport_left] = tvtext_cleared;
	}
}
    1e78:	df 91       	pop	r29
    1e7a:	cf 91       	pop	r28
    1e7c:	1f 91       	pop	r17
    1e7e:	0f 91       	pop	r16
    1e80:	ff 90       	pop	r15
    1e82:	df 90       	pop	r13
    1e84:	cf 90       	pop	r12
    1e86:	08 95       	ret

00001e88 <tvtext_scroll_down>:

void tvtext_scroll_down(void) { // VDU 23,7,0,2,0;0;0;
    1e88:	1f 93       	push	r17
    1e8a:	cf 93       	push	r28
    1e8c:	df 93       	push	r29
	char* p = tvtext_buffer + tvtext_viewport_bottom * TVTEXT_BUFFER_WIDTH + tvtext_viewport_left;
    1e8e:	20 91 11 01 	lds	r18, 0x0111
    1e92:	80 91 18 01 	lds	r24, 0x0118
    1e96:	90 e0       	ldi	r25, 0x00	; 0
    1e98:	30 e2       	ldi	r19, 0x20	; 32
    1e9a:	23 9f       	mul	r18, r19
    1e9c:	80 0d       	add	r24, r0
    1e9e:	91 1d       	adc	r25, r1
    1ea0:	11 24       	eor	r1, r1
    1ea2:	84 5e       	subi	r24, 0xE4	; 228
    1ea4:	9e 4f       	sbci	r25, 0xFE	; 254
	for (uint8_t r = tvtext_viewport_top; r < tvtext_viewport_bottom; ++r, p -= TVTEXT_BUFFER_WIDTH) {
    1ea6:	10 91 1c 03 	lds	r17, 0x031C
    1eaa:	0c c0       	rjmp	.+24     	; 0x1ec4 <tvtext_scroll_down+0x3c>
		memmove(p, p - TVTEXT_BUFFER_WIDTH, tvtext_viewport_right - tvtext_viewport_left + 1);
    1eac:	ec 01       	movw	r28, r24
    1eae:	a0 97       	sbiw	r28, 0x20	; 32
    1eb0:	50 e0       	ldi	r21, 0x00	; 0
    1eb2:	42 1b       	sub	r20, r18
    1eb4:	51 09       	sbc	r21, r1
    1eb6:	4f 5f       	subi	r20, 0xFF	; 255
    1eb8:	5f 4f       	sbci	r21, 0xFF	; 255
    1eba:	be 01       	movw	r22, r28
    1ebc:	0e 94 6a 14 	call	0x28d4	; 0x28d4 <memmove>
	}
}

void tvtext_scroll_down(void) { // VDU 23,7,0,2,0;0;0;
	char* p = tvtext_buffer + tvtext_viewport_bottom * TVTEXT_BUFFER_WIDTH + tvtext_viewport_left;
	for (uint8_t r = tvtext_viewport_top; r < tvtext_viewport_bottom; ++r, p -= TVTEXT_BUFFER_WIDTH) {
    1ec0:	1f 5f       	subi	r17, 0xFF	; 255
    1ec2:	ce 01       	movw	r24, r28
    1ec4:	30 91 11 01 	lds	r19, 0x0111
    1ec8:	20 91 18 01 	lds	r18, 0x0118
    1ecc:	40 91 0e 01 	lds	r20, 0x010E
    1ed0:	13 17       	cp	r17, r19
    1ed2:	60 f3       	brcs	.-40     	; 0x1eac <tvtext_scroll_down+0x24>
		memmove(p, p - TVTEXT_BUFFER_WIDTH, tvtext_viewport_right - tvtext_viewport_left + 1);
	}
	// Clear top line.
	memset(p, tvtext_cleared, tvtext_viewport_right - tvtext_viewport_left + 1);
    1ed4:	50 e0       	ldi	r21, 0x00	; 0
    1ed6:	42 1b       	sub	r20, r18
    1ed8:	51 09       	sbc	r21, r1
    1eda:	4f 5f       	subi	r20, 0xFF	; 255
    1edc:	5f 4f       	sbci	r21, 0xFF	; 255
    1ede:	60 91 10 01 	lds	r22, 0x0110
    1ee2:	77 27       	eor	r23, r23
    1ee4:	67 fd       	sbrc	r22, 7
    1ee6:	70 95       	com	r23
}
    1ee8:	df 91       	pop	r29
    1eea:	cf 91       	pop	r28
    1eec:	1f 91       	pop	r17
	char* p = tvtext_buffer + tvtext_viewport_bottom * TVTEXT_BUFFER_WIDTH + tvtext_viewport_left;
	for (uint8_t r = tvtext_viewport_top; r < tvtext_viewport_bottom; ++r, p -= TVTEXT_BUFFER_WIDTH) {
		memmove(p, p - TVTEXT_BUFFER_WIDTH, tvtext_viewport_right - tvtext_viewport_left + 1);
	}
	// Clear top line.
	memset(p, tvtext_cleared, tvtext_viewport_right - tvtext_viewport_left + 1);
    1eee:	0c 94 7c 14 	jmp	0x28f8	; 0x28f8 <memset>

00001ef2 <tvtext_scroll_up>:
}

void tvtext_scroll_up(void) { // VDU 23,7,0,3,0;0;0;
    1ef2:	1f 93       	push	r17
    1ef4:	cf 93       	push	r28
    1ef6:	df 93       	push	r29
	char* p = tvtext_buffer + tvtext_viewport_top * TVTEXT_BUFFER_WIDTH + tvtext_viewport_left;
    1ef8:	10 91 1c 03 	lds	r17, 0x031C
    1efc:	80 91 18 01 	lds	r24, 0x0118
    1f00:	90 e0       	ldi	r25, 0x00	; 0
    1f02:	20 e2       	ldi	r18, 0x20	; 32
    1f04:	12 9f       	mul	r17, r18
    1f06:	80 0d       	add	r24, r0
    1f08:	91 1d       	adc	r25, r1
    1f0a:	11 24       	eor	r1, r1
    1f0c:	84 5e       	subi	r24, 0xE4	; 228
    1f0e:	9e 4f       	sbci	r25, 0xFE	; 254
	for (uint8_t r = tvtext_viewport_top; r < tvtext_viewport_bottom; ++r, p += TVTEXT_BUFFER_WIDTH) {
    1f10:	0c c0       	rjmp	.+24     	; 0x1f2a <tvtext_scroll_up+0x38>
		memmove(p, p + TVTEXT_BUFFER_WIDTH, tvtext_viewport_right - tvtext_viewport_left + 1);
    1f12:	ec 01       	movw	r28, r24
    1f14:	a0 96       	adiw	r28, 0x20	; 32
    1f16:	50 e0       	ldi	r21, 0x00	; 0
    1f18:	42 1b       	sub	r20, r18
    1f1a:	51 09       	sbc	r21, r1
    1f1c:	4f 5f       	subi	r20, 0xFF	; 255
    1f1e:	5f 4f       	sbci	r21, 0xFF	; 255
    1f20:	be 01       	movw	r22, r28
    1f22:	0e 94 6a 14 	call	0x28d4	; 0x28d4 <memmove>
	memset(p, tvtext_cleared, tvtext_viewport_right - tvtext_viewport_left + 1);
}

void tvtext_scroll_up(void) { // VDU 23,7,0,3,0;0;0;
	char* p = tvtext_buffer + tvtext_viewport_top * TVTEXT_BUFFER_WIDTH + tvtext_viewport_left;
	for (uint8_t r = tvtext_viewport_top; r < tvtext_viewport_bottom; ++r, p += TVTEXT_BUFFER_WIDTH) {
    1f26:	1f 5f       	subi	r17, 0xFF	; 255
    1f28:	ce 01       	movw	r24, r28
    1f2a:	30 91 11 01 	lds	r19, 0x0111
    1f2e:	20 91 18 01 	lds	r18, 0x0118
    1f32:	40 91 0e 01 	lds	r20, 0x010E
    1f36:	13 17       	cp	r17, r19
    1f38:	60 f3       	brcs	.-40     	; 0x1f12 <tvtext_scroll_up+0x20>
		memmove(p, p + TVTEXT_BUFFER_WIDTH, tvtext_viewport_right - tvtext_viewport_left + 1);
	}
	// Clear bottom line.
	memset(p, tvtext_cleared, tvtext_viewport_right - tvtext_viewport_left + 1);
    1f3a:	50 e0       	ldi	r21, 0x00	; 0
    1f3c:	42 1b       	sub	r20, r18
    1f3e:	51 09       	sbc	r21, r1
    1f40:	4f 5f       	subi	r20, 0xFF	; 255
    1f42:	5f 4f       	sbci	r21, 0xFF	; 255
    1f44:	60 91 10 01 	lds	r22, 0x0110
    1f48:	77 27       	eor	r23, r23
    1f4a:	67 fd       	sbrc	r22, 7
    1f4c:	70 95       	com	r23
}
    1f4e:	df 91       	pop	r29
    1f50:	cf 91       	pop	r28
    1f52:	1f 91       	pop	r17
	char* p = tvtext_buffer + tvtext_viewport_top * TVTEXT_BUFFER_WIDTH + tvtext_viewport_left;
	for (uint8_t r = tvtext_viewport_top; r < tvtext_viewport_bottom; ++r, p += TVTEXT_BUFFER_WIDTH) {
		memmove(p, p + TVTEXT_BUFFER_WIDTH, tvtext_viewport_right - tvtext_viewport_left + 1);
	}
	// Clear bottom line.
	memset(p, tvtext_cleared, tvtext_viewport_right - tvtext_viewport_left + 1);
    1f54:	0c 94 7c 14 	jmp	0x28f8	; 0x28f8 <memset>

00001f58 <tvtext_cursor_reset_flash>:
	}
	tvtext_cursor_reset_flash();
}

void tvtext_cursor_reset_flash(void) {
	tvtext_cursor_flash_timer = tvtext_cursor_flash_period;
    1f58:	80 91 1a 01 	lds	r24, 0x011A
    1f5c:	80 93 0d 01 	sts	0x010D, r24
	tvtext_flags |= _BV(TVTEXT_CURSOR_VISIBLE);
    1f60:	80 91 14 01 	lds	r24, 0x0114
    1f64:	88 60       	ori	r24, 0x08	; 8
    1f66:	80 93 14 01 	sts	0x0114, r24
    1f6a:	08 95       	ret

00001f6c <tvtext_cursor_move>:
	tvtext_cursor_row = tvtext_viewport_top;
	tvtext_cursor_reset_flash();
}

void tvtext_cursor_move(uint8_t column, uint8_t row) { // VDU 31
	if (column >= tvtext_viewport_left && column <= tvtext_viewport_right) {
    1f6c:	90 91 18 01 	lds	r25, 0x0118
    1f70:	89 17       	cp	r24, r25
    1f72:	30 f0       	brcs	.+12     	; 0x1f80 <tvtext_cursor_move+0x14>
    1f74:	90 91 0e 01 	lds	r25, 0x010E
    1f78:	98 17       	cp	r25, r24
    1f7a:	10 f0       	brcs	.+4      	; 0x1f80 <tvtext_cursor_move+0x14>
		tvtext_cursor_column = column;
    1f7c:	80 93 0f 01 	sts	0x010F, r24
	}
	if (row >= tvtext_viewport_top && row <= tvtext_viewport_bottom) {
    1f80:	80 91 1c 03 	lds	r24, 0x031C
    1f84:	68 17       	cp	r22, r24
    1f86:	30 f0       	brcs	.+12     	; 0x1f94 <tvtext_cursor_move+0x28>
    1f88:	80 91 11 01 	lds	r24, 0x0111
    1f8c:	86 17       	cp	r24, r22
    1f8e:	10 f0       	brcs	.+4      	; 0x1f94 <tvtext_cursor_move+0x28>
		tvtext_cursor_row = row;
    1f90:	60 93 15 01 	sts	0x0115, r22
	}
	tvtext_cursor_reset_flash();
    1f94:	0c 94 ac 0f 	jmp	0x1f58	; 0x1f58 <tvtext_cursor_reset_flash>

00001f98 <tvtext_cursor_home>:
}



void tvtext_cursor_home(void) { // VDU 30
	tvtext_cursor_column = tvtext_viewport_left;
    1f98:	80 91 18 01 	lds	r24, 0x0118
    1f9c:	80 93 0f 01 	sts	0x010F, r24
	tvtext_cursor_row = tvtext_viewport_top;
    1fa0:	80 91 1c 03 	lds	r24, 0x031C
    1fa4:	80 93 15 01 	sts	0x0115, r24
	tvtext_cursor_reset_flash();
    1fa8:	0c 94 ac 0f 	jmp	0x1f58	; 0x1f58 <tvtext_cursor_reset_flash>

00001fac <tvtext_clear>:
		}
	}
	tvtext_cursor_reset_flash();
}

void tvtext_clear(void) { // VDU 12
    1fac:	1f 93       	push	r17
    1fae:	cf 93       	push	r28
    1fb0:	df 93       	push	r29
	char* p = tvtext_buffer + tvtext_viewport_top * TVTEXT_BUFFER_WIDTH + tvtext_viewport_left;
    1fb2:	10 91 1c 03 	lds	r17, 0x031C
    1fb6:	c0 91 18 01 	lds	r28, 0x0118
    1fba:	d0 e0       	ldi	r29, 0x00	; 0
    1fbc:	80 e2       	ldi	r24, 0x20	; 32
    1fbe:	18 9f       	mul	r17, r24
    1fc0:	c0 0d       	add	r28, r0
    1fc2:	d1 1d       	adc	r29, r1
    1fc4:	11 24       	eor	r1, r1
    1fc6:	c4 5e       	subi	r28, 0xE4	; 228
    1fc8:	de 4f       	sbci	r29, 0xFE	; 254
	for (uint8_t r = tvtext_viewport_top; r <= tvtext_viewport_bottom; ++r, p += TVTEXT_BUFFER_WIDTH) {
    1fca:	13 c0       	rjmp	.+38     	; 0x1ff2 <tvtext_clear+0x46>
		memset(p, tvtext_cleared, tvtext_viewport_right - tvtext_viewport_left + 1);
    1fcc:	40 91 0e 01 	lds	r20, 0x010E
    1fd0:	50 e0       	ldi	r21, 0x00	; 0
    1fd2:	80 91 18 01 	lds	r24, 0x0118
    1fd6:	48 1b       	sub	r20, r24
    1fd8:	51 09       	sbc	r21, r1
    1fda:	4f 5f       	subi	r20, 0xFF	; 255
    1fdc:	5f 4f       	sbci	r21, 0xFF	; 255
    1fde:	60 91 10 01 	lds	r22, 0x0110
    1fe2:	77 27       	eor	r23, r23
    1fe4:	67 fd       	sbrc	r22, 7
    1fe6:	70 95       	com	r23
    1fe8:	ce 01       	movw	r24, r28
    1fea:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <memset>
	tvtext_cursor_reset_flash();
}

void tvtext_clear(void) { // VDU 12
	char* p = tvtext_buffer + tvtext_viewport_top * TVTEXT_BUFFER_WIDTH + tvtext_viewport_left;
	for (uint8_t r = tvtext_viewport_top; r <= tvtext_viewport_bottom; ++r, p += TVTEXT_BUFFER_WIDTH) {
    1fee:	1f 5f       	subi	r17, 0xFF	; 255
    1ff0:	a0 96       	adiw	r28, 0x20	; 32
    1ff2:	80 91 11 01 	lds	r24, 0x0111
    1ff6:	81 17       	cp	r24, r17
    1ff8:	48 f7       	brcc	.-46     	; 0x1fcc <tvtext_clear+0x20>
		memset(p, tvtext_cleared, tvtext_viewport_right - tvtext_viewport_left + 1);
	}
	tvtext_cursor_home();	
}
    1ffa:	df 91       	pop	r29
    1ffc:	cf 91       	pop	r28
    1ffe:	1f 91       	pop	r17
void tvtext_clear(void) { // VDU 12
	char* p = tvtext_buffer + tvtext_viewport_top * TVTEXT_BUFFER_WIDTH + tvtext_viewport_left;
	for (uint8_t r = tvtext_viewport_top; r <= tvtext_viewport_bottom; ++r, p += TVTEXT_BUFFER_WIDTH) {
		memset(p, tvtext_cleared, tvtext_viewport_right - tvtext_viewport_left + 1);
	}
	tvtext_cursor_home();	
    2000:	0c 94 cc 0f 	jmp	0x1f98	; 0x1f98 <tvtext_cursor_home>

00002004 <tvtext_set_viewport>:
	tvtext_viewport_right = TVTEXT_BUFFER_WIDTH - 1;
	tvtext_viewport_bottom = TVTEXT_BUFFER_HEIGHT - 1;
	tvtext_cursor_reset_flash();
}

void tvtext_set_viewport(int8_t left, int8_t bottom, int8_t right, int8_t top) { // VDU 28
    2004:	80 32       	cpi	r24, 0x20	; 32
    2006:	0c f0       	brlt	.+2      	; 0x200a <tvtext_set_viewport+0x6>
    2008:	8f e1       	ldi	r24, 0x1F	; 31
    200a:	87 fd       	sbrc	r24, 7
    200c:	80 e0       	ldi	r24, 0x00	; 0
    200e:	60 31       	cpi	r22, 0x10	; 16
    2010:	0c f0       	brlt	.+2      	; 0x2014 <tvtext_set_viewport+0x10>
    2012:	6f e0       	ldi	r22, 0x0F	; 15
    2014:	67 fd       	sbrc	r22, 7
    2016:	60 e0       	ldi	r22, 0x00	; 0
    2018:	40 32       	cpi	r20, 0x20	; 32
    201a:	0c f0       	brlt	.+2      	; 0x201e <tvtext_set_viewport+0x1a>
    201c:	4f e1       	ldi	r20, 0x1F	; 31
    201e:	47 fd       	sbrc	r20, 7
    2020:	40 e0       	ldi	r20, 0x00	; 0
    2022:	20 31       	cpi	r18, 0x10	; 16
    2024:	0c f0       	brlt	.+2      	; 0x2028 <tvtext_set_viewport+0x24>
    2026:	2f e0       	ldi	r18, 0x0F	; 15
    2028:	27 fd       	sbrc	r18, 7
    202a:	20 e0       	ldi	r18, 0x00	; 0
	if (left < 0) { left = 0; } else if (left > TVTEXT_BUFFER_WIDTH - 1) { left = TVTEXT_BUFFER_WIDTH - 1; }
	if (bottom < 0) { bottom = 0; } else if (bottom > TVTEXT_BUFFER_HEIGHT - 1) { bottom = TVTEXT_BUFFER_HEIGHT - 1; }
	if (right < 0) { right = 0; } else if (right > TVTEXT_BUFFER_WIDTH - 1) { right = TVTEXT_BUFFER_WIDTH - 1; }
	if (top < 0) { top = 0; } else if (top > TVTEXT_BUFFER_HEIGHT - 1) { top = TVTEXT_BUFFER_HEIGHT - 1; }
	// Sort coordinates.
	if (left > right) {
    202c:	48 17       	cp	r20, r24
    202e:	1c f4       	brge	.+6      	; 0x2036 <tvtext_set_viewport+0x32>
    2030:	98 2f       	mov	r25, r24
    2032:	84 2f       	mov	r24, r20
    2034:	49 2f       	mov	r20, r25
		int8_t s = left;
		left = right;
		right = s;
	}
	if (top > bottom) {
    2036:	62 17       	cp	r22, r18
    2038:	1c f4       	brge	.+6      	; 0x2040 <tvtext_set_viewport+0x3c>
    203a:	96 2f       	mov	r25, r22
    203c:	62 2f       	mov	r22, r18
    203e:	29 2f       	mov	r18, r25
		int8_t s = top;
		top = bottom;
		bottom = s;
	}
	// Store new viewport coordinates.
	tvtext_viewport_left = left;
    2040:	80 93 18 01 	sts	0x0118, r24
	tvtext_viewport_bottom = bottom;
    2044:	60 93 11 01 	sts	0x0111, r22
	tvtext_viewport_right = right;
    2048:	40 93 0e 01 	sts	0x010E, r20
	tvtext_viewport_top = top;
    204c:	20 93 1c 03 	sts	0x031C, r18
	// Clip the cursor to the new viewport.
	if (tvtext_cursor_column < left || tvtext_cursor_column > right || tvtext_cursor_row < top || tvtext_cursor_row > bottom) {
    2050:	90 91 0f 01 	lds	r25, 0x010F
    2054:	98 17       	cp	r25, r24
    2056:	44 f0       	brlt	.+16     	; 0x2068 <tvtext_set_viewport+0x64>
    2058:	49 17       	cp	r20, r25
    205a:	34 f0       	brlt	.+12     	; 0x2068 <tvtext_set_viewport+0x64>
    205c:	80 91 15 01 	lds	r24, 0x0115
    2060:	82 17       	cp	r24, r18
    2062:	14 f0       	brlt	.+4      	; 0x2068 <tvtext_set_viewport+0x64>
    2064:	68 17       	cp	r22, r24
    2066:	14 f4       	brge	.+4      	; 0x206c <tvtext_set_viewport+0x68>
		tvtext_cursor_home();
    2068:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <tvtext_cursor_home>
	}
	tvtext_cursor_reset_flash();
    206c:	0c 94 ac 0f 	jmp	0x1f58	; 0x1f58 <tvtext_cursor_reset_flash>

00002070 <tvtext_reset_viewport_cursor_home>:
	// Clear bottom line.
	memset(p, tvtext_cleared, tvtext_viewport_right - tvtext_viewport_left + 1);
}

void tvtext_reset_viewport_cursor_home(void) { // VDU 26
	tvtext_cursor_row = tvtext_cursor_column = tvtext_viewport_top = tvtext_viewport_left = 0;
    2070:	10 92 18 01 	sts	0x0118, r1
    2074:	10 92 1c 03 	sts	0x031C, r1
    2078:	10 92 0f 01 	sts	0x010F, r1
    207c:	10 92 15 01 	sts	0x0115, r1
	tvtext_viewport_right = TVTEXT_BUFFER_WIDTH - 1;
    2080:	8f e1       	ldi	r24, 0x1F	; 31
    2082:	80 93 0e 01 	sts	0x010E, r24
	tvtext_viewport_bottom = TVTEXT_BUFFER_HEIGHT - 1;
    2086:	8f e0       	ldi	r24, 0x0F	; 15
    2088:	80 93 11 01 	sts	0x0111, r24
	tvtext_cursor_reset_flash();
    208c:	0c 94 ac 0f 	jmp	0x1f58	; 0x1f58 <tvtext_cursor_reset_flash>

00002090 <tvtext_init>:
//
extern void tvtext_driver_init(void);

void tvtext_init(void) {
	// Initialise the assembly driver.
	tvtext_driver_init();
    2090:	0e 94 45 12 	call	0x248a	; 0x248a <tvtext_driver_init>

	// Set up I/O pins.
	TVTEXT_PICTURE_DDR |= _BV(TVTEXT_PICTURE_BIT);
    2094:	57 9a       	sbi	0x0a, 7	; 10
	TVTEXT_SYNC_DDR |= _BV(TVTEXT_SYNC_BIT);
    2096:	20 9a       	sbi	0x04, 0	; 4

	// Set up timer.
	TCCR1B |= (0b001 << CS10); // Run at native clock speed, no prescaling.
    2098:	e1 e8       	ldi	r30, 0x81	; 129
    209a:	f0 e0       	ldi	r31, 0x00	; 0
    209c:	80 81       	ld	r24, Z
    209e:	81 60       	ori	r24, 0x01	; 1
    20a0:	80 83       	st	Z, r24
	TIMSK1 |= _BV(OCIE1A);     // Interrupt on match A.
    20a2:	af e6       	ldi	r26, 0x6F	; 111
    20a4:	b0 e0       	ldi	r27, 0x00	; 0
    20a6:	8c 91       	ld	r24, X
    20a8:	82 60       	ori	r24, 0x02	; 2
    20aa:	8c 93       	st	X, r24
	TCCR1B |= _BV(WGM12);      // Mode 4 (TOP=OCR1A, CTC).
    20ac:	80 81       	ld	r24, Z
    20ae:	88 60       	ori	r24, 0x08	; 8
    20b0:	80 83       	st	Z, r24

	// Set up default flags.
	tvtext_flags = _BV(TVTEXT_VISIBLE) | _BV(TVTEXT_AUTO_SCROLL) | _BV(TVTEXT_CURSOR_ENABLED);
    20b2:	87 e0       	ldi	r24, 0x07	; 7
    20b4:	80 93 14 01 	sts	0x0114, r24

	// Set the default cleared and cursor characters.
	tvtext_cleared = ' ';
    20b8:	80 e2       	ldi	r24, 0x20	; 32
    20ba:	80 93 10 01 	sts	0x0110, r24
	tvtext_cursor = '_';
    20be:	8f e5       	ldi	r24, 0x5F	; 95
    20c0:	80 93 19 01 	sts	0x0119, r24

	// Invert the cursor every 16 frames.
	tvtext_cursor_flash_period = 16;
    20c4:	80 e1       	ldi	r24, 0x10	; 16
    20c6:	80 93 1a 01 	sts	0x011A, r24

	// Reset the viewport.
	tvtext_reset_viewport_cursor_home();
    20ca:	0e 94 38 10 	call	0x2070	; 0x2070 <tvtext_reset_viewport_cursor_home>

	// Reset the offset.
	tvtext_offset_x = TVTEXT_OFFSET_X_DEFAULT;
    20ce:	8f e0       	ldi	r24, 0x0F	; 15
    20d0:	80 93 1b 01 	sts	0x011B, r24
	tvtext_offset_y = 0;
    20d4:	10 92 17 01 	sts	0x0117, r1
    20d8:	10 92 16 01 	sts	0x0116, r1

	// Enable interrupts.
	sei();
    20dc:	78 94       	sei
    20de:	08 95       	ret

000020e0 <tvtext_cursor_up>:
	}
	tvtext_cursor_reset_flash();
}

void tvtext_cursor_up(void) { // VDU 11
	if (--tvtext_cursor_row < tvtext_viewport_top) {
    20e0:	20 91 15 01 	lds	r18, 0x0115
    20e4:	21 50       	subi	r18, 0x01	; 1
    20e6:	20 93 15 01 	sts	0x0115, r18
    20ea:	33 27       	eor	r19, r19
    20ec:	27 fd       	sbrc	r18, 7
    20ee:	30 95       	com	r19
    20f0:	80 91 1c 03 	lds	r24, 0x031C
    20f4:	90 e0       	ldi	r25, 0x00	; 0
    20f6:	28 17       	cp	r18, r24
    20f8:	39 07       	cpc	r19, r25
    20fa:	6c f4       	brge	.+26     	; 0x2116 <tvtext_cursor_up+0x36>
		if (bit_is_set(tvtext_flags, TVTEXT_AUTO_SCROLL)) {
    20fc:	80 91 14 01 	lds	r24, 0x0114
    2100:	81 ff       	sbrs	r24, 1
    2102:	05 c0       	rjmp	.+10     	; 0x210e <tvtext_cursor_up+0x2e>
			tvtext_scroll_down();
    2104:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <tvtext_scroll_down>
			tvtext_cursor_row = tvtext_viewport_top;
    2108:	80 91 1c 03 	lds	r24, 0x031C
    210c:	02 c0       	rjmp	.+4      	; 0x2112 <tvtext_cursor_up+0x32>
		} else {
			// Just put the cursor back on the bottom line.
			tvtext_cursor_row = tvtext_viewport_bottom;
    210e:	80 91 11 01 	lds	r24, 0x0111
    2112:	80 93 15 01 	sts	0x0115, r24
		}
	}
	tvtext_cursor_reset_flash();
    2116:	0c 94 ac 0f 	jmp	0x1f58	; 0x1f58 <tvtext_cursor_reset_flash>

0000211a <tvtext_cursor_left>:
	}
	tvtext_cursor_reset_flash();
}

void tvtext_cursor_left(void) { // VDU 10
	if (--tvtext_cursor_column < tvtext_viewport_left) {
    211a:	20 91 0f 01 	lds	r18, 0x010F
    211e:	21 50       	subi	r18, 0x01	; 1
    2120:	20 93 0f 01 	sts	0x010F, r18
    2124:	33 27       	eor	r19, r19
    2126:	27 fd       	sbrc	r18, 7
    2128:	30 95       	com	r19
    212a:	80 91 18 01 	lds	r24, 0x0118
    212e:	90 e0       	ldi	r25, 0x00	; 0
    2130:	28 17       	cp	r18, r24
    2132:	39 07       	cpc	r19, r25
    2134:	34 f4       	brge	.+12     	; 0x2142 <tvtext_cursor_left+0x28>
		tvtext_cursor_column = tvtext_viewport_right;
    2136:	80 91 0e 01 	lds	r24, 0x010E
    213a:	80 93 0f 01 	sts	0x010F, r24
		tvtext_cursor_up();
    213e:	0e 94 70 10 	call	0x20e0	; 0x20e0 <tvtext_cursor_up>
	}
	tvtext_cursor_reset_flash();
    2142:	0c 94 ac 0f 	jmp	0x1f58	; 0x1f58 <tvtext_cursor_reset_flash>

00002146 <tvtext_cursor_down>:
	}
	tvtext_cursor_reset_flash();
}

void tvtext_cursor_down(void) { // VDU 9
	if (++tvtext_cursor_row > tvtext_viewport_bottom) {
    2146:	20 91 15 01 	lds	r18, 0x0115
    214a:	2f 5f       	subi	r18, 0xFF	; 255
    214c:	20 93 15 01 	sts	0x0115, r18
    2150:	33 27       	eor	r19, r19
    2152:	27 fd       	sbrc	r18, 7
    2154:	30 95       	com	r19
    2156:	80 91 11 01 	lds	r24, 0x0111
    215a:	90 e0       	ldi	r25, 0x00	; 0
    215c:	82 17       	cp	r24, r18
    215e:	93 07       	cpc	r25, r19
    2160:	6c f4       	brge	.+26     	; 0x217c <tvtext_cursor_down+0x36>
		if (bit_is_set(tvtext_flags, TVTEXT_AUTO_SCROLL)) {
    2162:	80 91 14 01 	lds	r24, 0x0114
    2166:	81 ff       	sbrs	r24, 1
    2168:	05 c0       	rjmp	.+10     	; 0x2174 <tvtext_cursor_down+0x2e>
			tvtext_scroll_up();
    216a:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <tvtext_scroll_up>
			tvtext_cursor_row = tvtext_viewport_bottom;
    216e:	80 91 11 01 	lds	r24, 0x0111
    2172:	02 c0       	rjmp	.+4      	; 0x2178 <tvtext_cursor_down+0x32>
		} else {
			// Just put cursor back on the top line.
			tvtext_cursor_row = tvtext_viewport_top;
    2174:	80 91 1c 03 	lds	r24, 0x031C
    2178:	80 93 15 01 	sts	0x0115, r24
		}
	}
	tvtext_cursor_reset_flash();
    217c:	0c 94 ac 0f 	jmp	0x1f58	; 0x1f58 <tvtext_cursor_reset_flash>

00002180 <tvtext_cursor_right>:
		tvtext_putc(c);
	}
}

void tvtext_cursor_right(void) { // VDU 8
	if (++tvtext_cursor_column > tvtext_viewport_right) {
    2180:	20 91 0f 01 	lds	r18, 0x010F
    2184:	2f 5f       	subi	r18, 0xFF	; 255
    2186:	20 93 0f 01 	sts	0x010F, r18
    218a:	33 27       	eor	r19, r19
    218c:	27 fd       	sbrc	r18, 7
    218e:	30 95       	com	r19
    2190:	80 91 0e 01 	lds	r24, 0x010E
    2194:	90 e0       	ldi	r25, 0x00	; 0
    2196:	82 17       	cp	r24, r18
    2198:	93 07       	cpc	r25, r19
    219a:	34 f4       	brge	.+12     	; 0x21a8 <tvtext_cursor_right+0x28>
		tvtext_cursor_column = tvtext_viewport_left;
    219c:	80 91 18 01 	lds	r24, 0x0118
    21a0:	80 93 0f 01 	sts	0x010F, r24
		tvtext_cursor_down();
    21a4:	0e 94 a3 10 	call	0x2146	; 0x2146 <tvtext_cursor_down>
	}
	tvtext_cursor_reset_flash();
    21a8:	0c 94 ac 0f 	jmp	0x1f58	; 0x1f58 <tvtext_cursor_reset_flash>

000021ac <tvtext_putc>:

uint8_t command_queue[9];
uint8_t command_queue_length;
uint8_t command_queue_command;

void tvtext_putc(char c) {
    21ac:	0f 93       	push	r16
    21ae:	1f 93       	push	r17
    21b0:	cf 93       	push	r28
    21b2:	df 93       	push	r29
	// Are we handling a command that relies on queued data?
	if (command_queue_length > 0) {
    21b4:	90 91 1d 03 	lds	r25, 0x031D
    21b8:	99 23       	and	r25, r25
    21ba:	09 f4       	brne	.+2      	; 0x21be <tvtext_putc+0x12>
    21bc:	96 c0       	rjmp	.+300    	; 0x22ea <tvtext_putc+0x13e>
		--command_queue_length;
    21be:	91 50       	subi	r25, 0x01	; 1
    21c0:	90 93 1d 03 	sts	0x031D, r25
		command_queue[command_queue_length] = c;
    21c4:	e9 2f       	mov	r30, r25
    21c6:	f0 e0       	ldi	r31, 0x00	; 0
    21c8:	e1 5e       	subi	r30, 0xE1	; 225
    21ca:	fc 4f       	sbci	r31, 0xFC	; 252
    21cc:	80 83       	st	Z, r24
		if (command_queue_length == 0) {
    21ce:	91 11       	cpse	r25, r1
    21d0:	26 c1       	rjmp	.+588    	; 0x241e <tvtext_putc+0x272>
			// We've received all the data for the queued command.
			switch (command_queue_command) {
    21d2:	80 91 1e 03 	lds	r24, 0x031E
    21d6:	8b 31       	cpi	r24, 0x1B	; 27
    21d8:	09 f4       	brne	.+2      	; 0x21dc <tvtext_putc+0x30>
    21da:	5e c0       	rjmp	.+188    	; 0x2298 <tvtext_putc+0xec>
    21dc:	20 f4       	brcc	.+8      	; 0x21e6 <tvtext_putc+0x3a>
    21de:	87 31       	cpi	r24, 0x17	; 23
    21e0:	09 f0       	breq	.+2      	; 0x21e4 <tvtext_putc+0x38>
    21e2:	1d c1       	rjmp	.+570    	; 0x241e <tvtext_putc+0x272>
    21e4:	07 c0       	rjmp	.+14     	; 0x21f4 <tvtext_putc+0x48>
    21e6:	8c 31       	cpi	r24, 0x1C	; 28
    21e8:	09 f4       	brne	.+2      	; 0x21ec <tvtext_putc+0x40>
    21ea:	67 c0       	rjmp	.+206    	; 0x22ba <tvtext_putc+0x10e>
    21ec:	8f 31       	cpi	r24, 0x1F	; 31
    21ee:	09 f0       	breq	.+2      	; 0x21f2 <tvtext_putc+0x46>
    21f0:	16 c1       	rjmp	.+556    	; 0x241e <tvtext_putc+0x272>
    21f2:	71 c0       	rjmp	.+226    	; 0x22d6 <tvtext_putc+0x12a>
				case 23:
					switch (command_queue[8]) {
    21f4:	80 91 27 03 	lds	r24, 0x0327
    21f8:	81 30       	cpi	r24, 0x01	; 1
    21fa:	21 f0       	breq	.+8      	; 0x2204 <tvtext_putc+0x58>
    21fc:	87 30       	cpi	r24, 0x07	; 7
    21fe:	09 f0       	breq	.+2      	; 0x2202 <tvtext_putc+0x56>
    2200:	0e c1       	rjmp	.+540    	; 0x241e <tvtext_putc+0x272>
    2202:	11 c0       	rjmp	.+34     	; 0x2226 <tvtext_putc+0x7a>
						case 1:
							if (command_queue[7]) {
    2204:	90 91 26 03 	lds	r25, 0x0326
    2208:	80 91 14 01 	lds	r24, 0x0114
    220c:	99 23       	and	r25, r25
    220e:	49 f0       	breq	.+18     	; 0x2222 <tvtext_putc+0x76>
								tvtext_flags |= _BV(TVTEXT_CURSOR_ENABLED);
    2210:	84 60       	ori	r24, 0x04	; 4
    2212:	80 93 14 01 	sts	0x0114, r24
		tvtext_buffer[tvtext_cursor_row * TVTEXT_BUFFER_WIDTH + tvtext_cursor_column] = tvtext_cleared;
	} else {
		tvtext_buffer[tvtext_cursor_row * TVTEXT_BUFFER_WIDTH + tvtext_cursor_column] = c;
		tvtext_cursor_right();
	}
}
    2216:	df 91       	pop	r29
    2218:	cf 91       	pop	r28
    221a:	1f 91       	pop	r17
    221c:	0f 91       	pop	r16
				case 23:
					switch (command_queue[8]) {
						case 1:
							if (command_queue[7]) {
								tvtext_flags |= _BV(TVTEXT_CURSOR_ENABLED);
								tvtext_cursor_reset_flash();
    221e:	0c 94 ac 0f 	jmp	0x1f58	; 0x1f58 <tvtext_cursor_reset_flash>
							} else {
								tvtext_flags &= ~_BV(TVTEXT_CURSOR_ENABLED);
    2222:	8b 7f       	andi	r24, 0xFB	; 251
    2224:	8f c0       	rjmp	.+286    	; 0x2344 <tvtext_putc+0x198>
							break;
						case 7:
							{
								// Preserve the old viewport coordinates.
								int8_t
									l = tvtext_viewport_left,
    2226:	00 91 18 01 	lds	r16, 0x0118
									b = tvtext_viewport_bottom,
    222a:	10 91 11 01 	lds	r17, 0x0111
									t = tvtext_viewport_top,
    222e:	d0 91 1c 03 	lds	r29, 0x031C
									r = tvtext_viewport_right;
    2232:	c0 91 0e 01 	lds	r28, 0x010E

								if (command_queue[7]) {
    2236:	80 91 26 03 	lds	r24, 0x0326
    223a:	88 23       	and	r24, r24
    223c:	51 f0       	breq	.+20     	; 0x2252 <tvtext_putc+0xa6>
									// We're scrolling the entire screen, so expand the current viewport to fill it.
									tvtext_viewport_left = tvtext_viewport_top = 0;
    223e:	10 92 1c 03 	sts	0x031C, r1
    2242:	10 92 18 01 	sts	0x0118, r1
									tvtext_viewport_right = TVTEXT_BUFFER_WIDTH - 1;
    2246:	8f e1       	ldi	r24, 0x1F	; 31
    2248:	80 93 0e 01 	sts	0x010E, r24
									tvtext_viewport_bottom = TVTEXT_BUFFER_HEIGHT - 1;
    224c:	8f e0       	ldi	r24, 0x0F	; 15
    224e:	80 93 11 01 	sts	0x0111, r24
									
								}
								switch (command_queue[6]) {
    2252:	80 91 25 03 	lds	r24, 0x0325
    2256:	81 30       	cpi	r24, 0x01	; 1
    2258:	49 f0       	breq	.+18     	; 0x226c <tvtext_putc+0xc0>
    225a:	28 f0       	brcs	.+10     	; 0x2266 <tvtext_putc+0xba>
    225c:	82 30       	cpi	r24, 0x02	; 2
    225e:	49 f0       	breq	.+18     	; 0x2272 <tvtext_putc+0xc6>
    2260:	83 30       	cpi	r24, 0x03	; 3
    2262:	61 f4       	brne	.+24     	; 0x227c <tvtext_putc+0xd0>
    2264:	09 c0       	rjmp	.+18     	; 0x2278 <tvtext_putc+0xcc>
									case 0:
										tvtext_scroll_right();
    2266:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <tvtext_scroll_right>
										break;
    226a:	08 c0       	rjmp	.+16     	; 0x227c <tvtext_putc+0xd0>
									case 1:
										tvtext_scroll_left();
    226c:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <tvtext_scroll_left>
										break;
    2270:	05 c0       	rjmp	.+10     	; 0x227c <tvtext_putc+0xd0>
									case 2:
										tvtext_scroll_down();
    2272:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <tvtext_scroll_down>
										break;
    2276:	02 c0       	rjmp	.+4      	; 0x227c <tvtext_putc+0xd0>
									case 3:
										tvtext_scroll_up();
    2278:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <tvtext_scroll_up>
										break;
								}
								if (command_queue[7]) {
    227c:	80 91 26 03 	lds	r24, 0x0326
    2280:	88 23       	and	r24, r24
    2282:	09 f4       	brne	.+2      	; 0x2286 <tvtext_putc+0xda>
    2284:	cc c0       	rjmp	.+408    	; 0x241e <tvtext_putc+0x272>
									// We've just scrolled the entire screen, so restore the old viewport values.
									tvtext_viewport_left = l;
    2286:	00 93 18 01 	sts	0x0118, r16
									tvtext_viewport_bottom = b;
    228a:	10 93 11 01 	sts	0x0111, r17
									tvtext_viewport_top = t;
    228e:	d0 93 1c 03 	sts	0x031C, r29
									tvtext_viewport_right = r;
    2292:	c0 93 0e 01 	sts	0x010E, r28
    2296:	c3 c0       	rjmp	.+390    	; 0x241e <tvtext_putc+0x272>
							}
							break;
					}
					break;
				case 27:
					tvtext_buffer[tvtext_cursor_row * TVTEXT_BUFFER_WIDTH + tvtext_cursor_column] = command_queue[0];
    2298:	e0 91 15 01 	lds	r30, 0x0115
    229c:	80 e2       	ldi	r24, 0x20	; 32
    229e:	e8 02       	muls	r30, r24
    22a0:	f0 01       	movw	r30, r0
    22a2:	11 24       	eor	r1, r1
    22a4:	80 91 0f 01 	lds	r24, 0x010F
    22a8:	e4 5e       	subi	r30, 0xE4	; 228
    22aa:	fe 4f       	sbci	r31, 0xFE	; 254
    22ac:	e8 0f       	add	r30, r24
    22ae:	f1 1d       	adc	r31, r1
    22b0:	87 fd       	sbrc	r24, 7
    22b2:	fa 95       	dec	r31
    22b4:	80 91 1f 03 	lds	r24, 0x031F
    22b8:	ab c0       	rjmp	.+342    	; 0x2410 <tvtext_putc+0x264>
					tvtext_cursor_right();
					break;
				case 28:
					tvtext_set_viewport(command_queue[3], command_queue[2], command_queue[1], command_queue[0]);
    22ba:	20 91 1f 03 	lds	r18, 0x031F
    22be:	40 91 20 03 	lds	r20, 0x0320
    22c2:	60 91 21 03 	lds	r22, 0x0321
    22c6:	80 91 22 03 	lds	r24, 0x0322
		tvtext_buffer[tvtext_cursor_row * TVTEXT_BUFFER_WIDTH + tvtext_cursor_column] = tvtext_cleared;
	} else {
		tvtext_buffer[tvtext_cursor_row * TVTEXT_BUFFER_WIDTH + tvtext_cursor_column] = c;
		tvtext_cursor_right();
	}
}
    22ca:	df 91       	pop	r29
    22cc:	cf 91       	pop	r28
    22ce:	1f 91       	pop	r17
    22d0:	0f 91       	pop	r16
				case 27:
					tvtext_buffer[tvtext_cursor_row * TVTEXT_BUFFER_WIDTH + tvtext_cursor_column] = command_queue[0];
					tvtext_cursor_right();
					break;
				case 28:
					tvtext_set_viewport(command_queue[3], command_queue[2], command_queue[1], command_queue[0]);
    22d2:	0c 94 02 10 	jmp	0x2004	; 0x2004 <tvtext_set_viewport>
					break;
				case 31:
					tvtext_cursor_move(command_queue[1], command_queue[0]);
    22d6:	60 91 1f 03 	lds	r22, 0x031F
    22da:	80 91 20 03 	lds	r24, 0x0320
		tvtext_buffer[tvtext_cursor_row * TVTEXT_BUFFER_WIDTH + tvtext_cursor_column] = tvtext_cleared;
	} else {
		tvtext_buffer[tvtext_cursor_row * TVTEXT_BUFFER_WIDTH + tvtext_cursor_column] = c;
		tvtext_cursor_right();
	}
}
    22de:	df 91       	pop	r29
    22e0:	cf 91       	pop	r28
    22e2:	1f 91       	pop	r17
    22e4:	0f 91       	pop	r16
					break;
				case 28:
					tvtext_set_viewport(command_queue[3], command_queue[2], command_queue[1], command_queue[0]);
					break;
				case 31:
					tvtext_cursor_move(command_queue[1], command_queue[0]);
    22e6:	0c 94 b6 0f 	jmp	0x1f6c	; 0x1f6c <tvtext_cursor_move>
					break;
			}
		}
	} else if (c < 32) {
    22ea:	80 32       	cpi	r24, 0x20	; 32
    22ec:	0c f0       	brlt	.+2      	; 0x22f0 <tvtext_putc+0x144>
    22ee:	6c c0       	rjmp	.+216    	; 0x23c8 <tvtext_putc+0x21c>
		switch (c) {
    22f0:	8c 30       	cpi	r24, 0x0C	; 12
    22f2:	09 f4       	brne	.+2      	; 0x22f6 <tvtext_putc+0x14a>
    22f4:	40 c0       	rjmp	.+128    	; 0x2376 <tvtext_putc+0x1ca>
    22f6:	6c f4       	brge	.+26     	; 0x2312 <tvtext_putc+0x166>
    22f8:	88 30       	cpi	r24, 0x08	; 8
    22fa:	59 f1       	breq	.+86     	; 0x2352 <tvtext_putc+0x1a6>
    22fc:	34 f4       	brge	.+12     	; 0x230a <tvtext_putc+0x15e>
    22fe:	84 30       	cpi	r24, 0x04	; 4
    2300:	f1 f0       	breq	.+60     	; 0x233e <tvtext_putc+0x192>
    2302:	85 30       	cpi	r24, 0x05	; 5
    2304:	09 f0       	breq	.+2      	; 0x2308 <tvtext_putc+0x15c>
    2306:	8b c0       	rjmp	.+278    	; 0x241e <tvtext_putc+0x272>
    2308:	20 c0       	rjmp	.+64     	; 0x234a <tvtext_putc+0x19e>
    230a:	8a 30       	cpi	r24, 0x0A	; 10
    230c:	41 f1       	breq	.+80     	; 0x235e <tvtext_putc+0x1b2>
    230e:	6c f5       	brge	.+90     	; 0x236a <tvtext_putc+0x1be>
    2310:	80 c0       	rjmp	.+256    	; 0x2412 <tvtext_putc+0x266>
    2312:	8b 31       	cpi	r24, 0x1B	; 27
    2314:	09 f4       	brne	.+2      	; 0x2318 <tvtext_putc+0x16c>
    2316:	44 c0       	rjmp	.+136    	; 0x23a0 <tvtext_putc+0x1f4>
    2318:	44 f4       	brge	.+16     	; 0x232a <tvtext_putc+0x17e>
    231a:	87 31       	cpi	r24, 0x17	; 23
    231c:	b9 f1       	breq	.+110    	; 0x238c <tvtext_putc+0x1e0>
    231e:	8a 31       	cpi	r24, 0x1A	; 26
    2320:	c9 f1       	breq	.+114    	; 0x2394 <tvtext_putc+0x1e8>
    2322:	8d 30       	cpi	r24, 0x0D	; 13
    2324:	09 f0       	breq	.+2      	; 0x2328 <tvtext_putc+0x17c>
    2326:	7b c0       	rjmp	.+246    	; 0x241e <tvtext_putc+0x272>
    2328:	2c c0       	rjmp	.+88     	; 0x2382 <tvtext_putc+0x1d6>
    232a:	8e 31       	cpi	r24, 0x1E	; 30
    232c:	09 f4       	brne	.+2      	; 0x2330 <tvtext_putc+0x184>
    232e:	40 c0       	rjmp	.+128    	; 0x23b0 <tvtext_putc+0x204>
    2330:	8f 31       	cpi	r24, 0x1F	; 31
    2332:	09 f4       	brne	.+2      	; 0x2336 <tvtext_putc+0x18a>
    2334:	43 c0       	rjmp	.+134    	; 0x23bc <tvtext_putc+0x210>
    2336:	8c 31       	cpi	r24, 0x1C	; 28
    2338:	09 f0       	breq	.+2      	; 0x233c <tvtext_putc+0x190>
    233a:	71 c0       	rjmp	.+226    	; 0x241e <tvtext_putc+0x272>
    233c:	35 c0       	rjmp	.+106    	; 0x23a8 <tvtext_putc+0x1fc>
			case 0:
				break;
			case 4:
				tvtext_flags |= _BV(TVTEXT_AUTO_SCROLL);
    233e:	80 91 14 01 	lds	r24, 0x0114
    2342:	82 60       	ori	r24, 0x02	; 2
    2344:	80 93 14 01 	sts	0x0114, r24
				break;
    2348:	6a c0       	rjmp	.+212    	; 0x241e <tvtext_putc+0x272>
			case 5:
				tvtext_flags &= ~_BV(TVTEXT_AUTO_SCROLL);
    234a:	80 91 14 01 	lds	r24, 0x0114
    234e:	8d 7f       	andi	r24, 0xFD	; 253
    2350:	f9 cf       	rjmp	.-14     	; 0x2344 <tvtext_putc+0x198>
		tvtext_buffer[tvtext_cursor_row * TVTEXT_BUFFER_WIDTH + tvtext_cursor_column] = tvtext_cleared;
	} else {
		tvtext_buffer[tvtext_cursor_row * TVTEXT_BUFFER_WIDTH + tvtext_cursor_column] = c;
		tvtext_cursor_right();
	}
}
    2352:	df 91       	pop	r29
    2354:	cf 91       	pop	r28
    2356:	1f 91       	pop	r17
    2358:	0f 91       	pop	r16
				break;
			case 5:
				tvtext_flags &= ~_BV(TVTEXT_AUTO_SCROLL);
				break;
			case 8:
				tvtext_cursor_left();
    235a:	0c 94 8d 10 	jmp	0x211a	; 0x211a <tvtext_cursor_left>
		tvtext_buffer[tvtext_cursor_row * TVTEXT_BUFFER_WIDTH + tvtext_cursor_column] = tvtext_cleared;
	} else {
		tvtext_buffer[tvtext_cursor_row * TVTEXT_BUFFER_WIDTH + tvtext_cursor_column] = c;
		tvtext_cursor_right();
	}
}
    235e:	df 91       	pop	r29
    2360:	cf 91       	pop	r28
    2362:	1f 91       	pop	r17
    2364:	0f 91       	pop	r16
				break;
			case 9:
				tvtext_cursor_right();
				break;
			case 10:
				tvtext_cursor_down();
    2366:	0c 94 a3 10 	jmp	0x2146	; 0x2146 <tvtext_cursor_down>
		tvtext_buffer[tvtext_cursor_row * TVTEXT_BUFFER_WIDTH + tvtext_cursor_column] = tvtext_cleared;
	} else {
		tvtext_buffer[tvtext_cursor_row * TVTEXT_BUFFER_WIDTH + tvtext_cursor_column] = c;
		tvtext_cursor_right();
	}
}
    236a:	df 91       	pop	r29
    236c:	cf 91       	pop	r28
    236e:	1f 91       	pop	r17
    2370:	0f 91       	pop	r16
				break;
			case 10:
				tvtext_cursor_down();
				break;
			case 11:
				tvtext_cursor_up();
    2372:	0c 94 70 10 	jmp	0x20e0	; 0x20e0 <tvtext_cursor_up>
		tvtext_buffer[tvtext_cursor_row * TVTEXT_BUFFER_WIDTH + tvtext_cursor_column] = tvtext_cleared;
	} else {
		tvtext_buffer[tvtext_cursor_row * TVTEXT_BUFFER_WIDTH + tvtext_cursor_column] = c;
		tvtext_cursor_right();
	}
}
    2376:	df 91       	pop	r29
    2378:	cf 91       	pop	r28
    237a:	1f 91       	pop	r17
    237c:	0f 91       	pop	r16
				break;
			case 11:
				tvtext_cursor_up();
				break;
			case 12:
				tvtext_clear();
    237e:	0c 94 d6 0f 	jmp	0x1fac	; 0x1fac <tvtext_clear>
				break;
			case 13:
				tvtext_cursor_column = tvtext_viewport_left;
    2382:	80 91 18 01 	lds	r24, 0x0118
    2386:	80 93 0f 01 	sts	0x010F, r24
				break;
    238a:	49 c0       	rjmp	.+146    	; 0x241e <tvtext_putc+0x272>
			case 23:
				command_queue_command = c;
    238c:	80 93 1e 03 	sts	0x031E, r24
				command_queue_length = 9;
    2390:	89 e0       	ldi	r24, 0x09	; 9
    2392:	17 c0       	rjmp	.+46     	; 0x23c2 <tvtext_putc+0x216>
		tvtext_buffer[tvtext_cursor_row * TVTEXT_BUFFER_WIDTH + tvtext_cursor_column] = tvtext_cleared;
	} else {
		tvtext_buffer[tvtext_cursor_row * TVTEXT_BUFFER_WIDTH + tvtext_cursor_column] = c;
		tvtext_cursor_right();
	}
}
    2394:	df 91       	pop	r29
    2396:	cf 91       	pop	r28
    2398:	1f 91       	pop	r17
    239a:	0f 91       	pop	r16
			case 23:
				command_queue_command = c;
				command_queue_length = 9;
				break;
			case 26:
				tvtext_reset_viewport_cursor_home();
    239c:	0c 94 38 10 	jmp	0x2070	; 0x2070 <tvtext_reset_viewport_cursor_home>
				break;
			case 27:
				command_queue_command = c;
    23a0:	80 93 1e 03 	sts	0x031E, r24
				command_queue_length = 1;
    23a4:	81 e0       	ldi	r24, 0x01	; 1
    23a6:	0d c0       	rjmp	.+26     	; 0x23c2 <tvtext_putc+0x216>
				break;
			case 28:
				command_queue_command = c;
    23a8:	80 93 1e 03 	sts	0x031E, r24
				command_queue_length = 4;
    23ac:	84 e0       	ldi	r24, 0x04	; 4
    23ae:	09 c0       	rjmp	.+18     	; 0x23c2 <tvtext_putc+0x216>
		tvtext_buffer[tvtext_cursor_row * TVTEXT_BUFFER_WIDTH + tvtext_cursor_column] = tvtext_cleared;
	} else {
		tvtext_buffer[tvtext_cursor_row * TVTEXT_BUFFER_WIDTH + tvtext_cursor_column] = c;
		tvtext_cursor_right();
	}
}
    23b0:	df 91       	pop	r29
    23b2:	cf 91       	pop	r28
    23b4:	1f 91       	pop	r17
    23b6:	0f 91       	pop	r16
			case 28:
				command_queue_command = c;
				command_queue_length = 4;
				break;
			case 30:
				tvtext_cursor_home();
    23b8:	0c 94 cc 0f 	jmp	0x1f98	; 0x1f98 <tvtext_cursor_home>
				break;
			case 31:
				command_queue_command = c;
    23bc:	80 93 1e 03 	sts	0x031E, r24
				command_queue_length = 2;
    23c0:	82 e0       	ldi	r24, 0x02	; 2
    23c2:	80 93 1d 03 	sts	0x031D, r24
				break;
    23c6:	2b c0       	rjmp	.+86     	; 0x241e <tvtext_putc+0x272>
		}
	} else if (c == 127) {
    23c8:	8f 37       	cpi	r24, 0x7F	; 127
    23ca:	a1 f4       	brne	.+40     	; 0x23f4 <tvtext_putc+0x248>
		tvtext_cursor_left();
    23cc:	0e 94 8d 10 	call	0x211a	; 0x211a <tvtext_cursor_left>
		tvtext_buffer[tvtext_cursor_row * TVTEXT_BUFFER_WIDTH + tvtext_cursor_column] = tvtext_cleared;
    23d0:	e0 91 15 01 	lds	r30, 0x0115
    23d4:	90 e2       	ldi	r25, 0x20	; 32
    23d6:	e9 02       	muls	r30, r25
    23d8:	f0 01       	movw	r30, r0
    23da:	11 24       	eor	r1, r1
    23dc:	80 91 0f 01 	lds	r24, 0x010F
    23e0:	e4 5e       	subi	r30, 0xE4	; 228
    23e2:	fe 4f       	sbci	r31, 0xFE	; 254
    23e4:	e8 0f       	add	r30, r24
    23e6:	f1 1d       	adc	r31, r1
    23e8:	87 fd       	sbrc	r24, 7
    23ea:	fa 95       	dec	r31
    23ec:	80 91 10 01 	lds	r24, 0x0110
    23f0:	80 83       	st	Z, r24
    23f2:	15 c0       	rjmp	.+42     	; 0x241e <tvtext_putc+0x272>
	} else {
		tvtext_buffer[tvtext_cursor_row * TVTEXT_BUFFER_WIDTH + tvtext_cursor_column] = c;
    23f4:	e0 91 15 01 	lds	r30, 0x0115
    23f8:	90 e2       	ldi	r25, 0x20	; 32
    23fa:	e9 02       	muls	r30, r25
    23fc:	f0 01       	movw	r30, r0
    23fe:	11 24       	eor	r1, r1
    2400:	90 91 0f 01 	lds	r25, 0x010F
    2404:	e4 5e       	subi	r30, 0xE4	; 228
    2406:	fe 4f       	sbci	r31, 0xFE	; 254
    2408:	e9 0f       	add	r30, r25
    240a:	f1 1d       	adc	r31, r1
    240c:	97 fd       	sbrc	r25, 7
    240e:	fa 95       	dec	r31
    2410:	80 83       	st	Z, r24
		tvtext_cursor_right();
	}
}
    2412:	df 91       	pop	r29
    2414:	cf 91       	pop	r28
    2416:	1f 91       	pop	r17
    2418:	0f 91       	pop	r16
	} else if (c == 127) {
		tvtext_cursor_left();
		tvtext_buffer[tvtext_cursor_row * TVTEXT_BUFFER_WIDTH + tvtext_cursor_column] = tvtext_cleared;
	} else {
		tvtext_buffer[tvtext_cursor_row * TVTEXT_BUFFER_WIDTH + tvtext_cursor_column] = c;
		tvtext_cursor_right();
    241a:	0c 94 c0 10 	jmp	0x2180	; 0x2180 <tvtext_cursor_right>
	}
}
    241e:	df 91       	pop	r29
    2420:	cf 91       	pop	r28
    2422:	1f 91       	pop	r17
    2424:	0f 91       	pop	r16
    2426:	08 95       	ret

00002428 <tvtext_puts_P>:
	while ((c = *(s++))) {
		tvtext_putc(c);
	}
}

void tvtext_puts_P(const char* s) {
    2428:	cf 93       	push	r28
    242a:	df 93       	push	r29
    242c:	ec 01       	movw	r28, r24
	char c;
	while ((c = pgm_read_byte(s++))) {
    242e:	02 c0       	rjmp	.+4      	; 0x2434 <tvtext_puts_P+0xc>
		tvtext_putc(c);
    2430:	0e 94 d6 10 	call	0x21ac	; 0x21ac <tvtext_putc>
	}
}

void tvtext_puts_P(const char* s) {
	char c;
	while ((c = pgm_read_byte(s++))) {
    2434:	fe 01       	movw	r30, r28
    2436:	21 96       	adiw	r28, 0x01	; 1
    2438:	84 91       	lpm	r24, Z+
    243a:	81 11       	cpse	r24, r1
    243c:	f9 cf       	rjmp	.-14     	; 0x2430 <tvtext_puts_P+0x8>
		tvtext_putc(c);
	}
}
    243e:	df 91       	pop	r29
    2440:	cf 91       	pop	r28
    2442:	08 95       	ret

00002444 <tvtext_puts>:
		tvtext_buffer[tvtext_cursor_row * TVTEXT_BUFFER_WIDTH + tvtext_cursor_column] = c;
		tvtext_cursor_right();
	}
}

void tvtext_puts(const char* s) {
    2444:	cf 93       	push	r28
    2446:	df 93       	push	r29
    2448:	ec 01       	movw	r28, r24
	char c;
	while ((c = *(s++))) {
    244a:	02 c0       	rjmp	.+4      	; 0x2450 <tvtext_puts+0xc>
		tvtext_putc(c);
    244c:	0e 94 d6 10 	call	0x21ac	; 0x21ac <tvtext_putc>
	}
}

void tvtext_puts(const char* s) {
	char c;
	while ((c = *(s++))) {
    2450:	89 91       	ld	r24, Y+
    2452:	81 11       	cpse	r24, r1
    2454:	fb cf       	rjmp	.-10     	; 0x244c <tvtext_puts+0x8>
		tvtext_putc(c);
	}
}
    2456:	df 91       	pop	r29
    2458:	cf 91       	pop	r28
    245a:	08 95       	ret

0000245c <tvtext_wait_vsync>:
	tvtext_cursor_flash_timer = tvtext_cursor_flash_period;
	tvtext_flags |= _BV(TVTEXT_CURSOR_VISIBLE);
}

void tvtext_wait_vsync(void) {
	int16_t frame_counter = tvtext_frame_counter;
    245c:	80 91 12 01 	lds	r24, 0x0112
    2460:	90 91 13 01 	lds	r25, 0x0113
	while (tvtext_frame_counter == frame_counter);
    2464:	20 91 12 01 	lds	r18, 0x0112
    2468:	30 91 13 01 	lds	r19, 0x0113
    246c:	28 17       	cp	r18, r24
    246e:	39 07       	cpc	r19, r25
    2470:	c9 f3       	breq	.-14     	; 0x2464 <tvtext_wait_vsync+0x8>
}
    2472:	08 95       	ret

00002474 <tvtext_get_font_row>:

uint8_t tvtext_get_font_row(char c, uint8_t row) {
	return pgm_read_byte(tvtext_font_data + c * 8 + row);
    2474:	e6 2f       	mov	r30, r22
    2476:	f0 e0       	ldi	r31, 0x00	; 0
    2478:	98 e0       	ldi	r25, 0x08	; 8
    247a:	89 02       	muls	r24, r25
    247c:	e0 0d       	add	r30, r0
    247e:	f1 1d       	adc	r31, r1
    2480:	11 24       	eor	r1, r1
    2482:	e3 56       	subi	r30, 0x63	; 99
    2484:	f8 4f       	sbci	r31, 0xF8	; 248
    2486:	84 91       	lpm	r24, Z+
}
    2488:	08 95       	ret

0000248a <tvtext_driver_init>:
    248a:	4f 93       	push	r20
    248c:	46 e7       	ldi	r20, 0x76	; 118
    248e:	40 93 04 01 	sts	0x0104, r20
    2492:	42 e1       	ldi	r20, 0x12	; 18
    2494:	40 93 05 01 	sts	0x0105, r20
    2498:	45 e0       	ldi	r20, 0x05	; 5
    249a:	40 93 06 01 	sts	0x0106, r20
    249e:	4f 91       	pop	r20
    24a0:	08 95       	ret

000024a2 <__vector_11>:
    24a2:	ef b6       	in	r14, 0x3f	; 63
    24a4:	ef 93       	push	r30
    24a6:	ff 93       	push	r31
    24a8:	cf 93       	push	r28
    24aa:	df 93       	push	r29
    24ac:	e1 e0       	ldi	r30, 0x01	; 1
    24ae:	e0 93 81 00 	sts	0x0081, r30
    24b2:	e0 91 84 00 	lds	r30, 0x0084
    24b6:	e0 ff       	sbrs	r30, 0
    24b8:	00 c0       	rjmp	.+0      	; 0x24ba <__vector_11+0x18>
    24ba:	e1 ff       	sbrs	r30, 1
    24bc:	e4 91       	lpm	r30, Z+
    24be:	e0 91 04 01 	lds	r30, 0x0104
    24c2:	f0 91 05 01 	lds	r31, 0x0105
    24c6:	09 94       	ijmp

000024c8 <exit_timer1_compa_vect>:
    24c8:	e0 93 04 01 	sts	0x0104, r30
    24cc:	f0 93 05 01 	sts	0x0105, r31
    24d0:	d0 93 89 00 	sts	0x0089, r29
    24d4:	c0 93 88 00 	sts	0x0088, r28

000024d8 <exit_timer1_compa_vect_no_store>:
    24d8:	e9 e0       	ldi	r30, 0x09	; 9
    24da:	e0 93 81 00 	sts	0x0081, r30
    24de:	b1 9a       	sbi	0x16, 1	; 22
    24e0:	df 91       	pop	r29
    24e2:	cf 91       	pop	r28
    24e4:	ff 91       	pop	r31
    24e6:	ef 91       	pop	r30
    24e8:	ef be       	out	0x3f, r14	; 63
    24ea:	18 95       	reti

000024ec <long_vsync_sync>:
    24ec:	28 98       	cbi	0x05, 0	; 5
    24ee:	cf e2       	ldi	r28, 0x2F	; 47
    24f0:	d2 e0       	ldi	r29, 0x02	; 2
    24f2:	ed e7       	ldi	r30, 0x7D	; 125
    24f4:	f2 e1       	ldi	r31, 0x12	; 18
    24f6:	0c 94 64 12 	jmp	0x24c8	; 0x24c8 <exit_timer1_compa_vect>

000024fa <long_vsync_black>:
    24fa:	28 9a       	sbi	0x05, 0	; 5
    24fc:	c0 91 06 01 	lds	r28, 0x0106
    2500:	ca 95       	dec	r28
    2502:	41 f4       	brne	.+16     	; 0x2514 <long_vsync_not_finished>
    2504:	cf ef       	ldi	r28, 0xFF	; 255
    2506:	c0 93 07 01 	sts	0x0107, r28
    250a:	c5 e0       	ldi	r28, 0x05	; 5
    250c:	e2 e9       	ldi	r30, 0x92	; 146
    250e:	f2 e1       	ldi	r31, 0x12	; 18
    2510:	0c 94 8c 12 	jmp	0x2518	; 0x2518 <long_vsync_finished>

00002514 <long_vsync_not_finished>:
    2514:	e6 e7       	ldi	r30, 0x76	; 118
    2516:	f2 e1       	ldi	r31, 0x12	; 18

00002518 <long_vsync_finished>:
    2518:	c0 93 06 01 	sts	0x0106, r28
    251c:	cf e4       	ldi	r28, 0x4F	; 79
    251e:	d0 e0       	ldi	r29, 0x00	; 0
    2520:	0c 94 64 12 	jmp	0x24c8	; 0x24c8 <exit_timer1_compa_vect>

00002524 <short_vsync_sync>:
    2524:	28 98       	cbi	0x05, 0	; 5
    2526:	5f 98       	cbi	0x0b, 7	; 11
    2528:	cf e4       	ldi	r28, 0x4F	; 79
    252a:	d0 e0       	ldi	r29, 0x00	; 0
    252c:	ea e9       	ldi	r30, 0x9A	; 154
    252e:	f2 e1       	ldi	r31, 0x12	; 18
    2530:	0c 94 64 12 	jmp	0x24c8	; 0x24c8 <exit_timer1_compa_vect>

00002534 <short_vsync_black>:
    2534:	28 9a       	sbi	0x05, 0	; 5
    2536:	c0 91 06 01 	lds	r28, 0x0106
    253a:	ca 95       	dec	r28
    253c:	61 f5       	brne	.+88     	; 0x2596 <short_vsync_not_finished>
    253e:	c0 91 07 01 	lds	r28, 0x0107
    2542:	c3 95       	inc	r28
    2544:	71 f0       	breq	.+28     	; 0x2562 <short_vsync_enter_active_display>

00002546 <short_vsync_enter_long_sync>:
    2546:	e0 91 12 01 	lds	r30, 0x0112
    254a:	f0 91 13 01 	lds	r31, 0x0113
    254e:	31 96       	adiw	r30, 0x01	; 1
    2550:	e0 93 12 01 	sts	0x0112, r30
    2554:	f0 93 13 01 	sts	0x0113, r31
    2558:	c5 e0       	ldi	r28, 0x05	; 5
    255a:	e6 e7       	ldi	r30, 0x76	; 118
    255c:	f2 e1       	ldi	r31, 0x12	; 18
    255e:	0c 94 cd 12 	jmp	0x259a	; 0x259a <short_vsync_finished>

00002562 <short_vsync_enter_active_display>:
    2562:	0e 94 d3 12 	call	0x25a6	; 0x25a6 <set_up_cursor>
    2566:	cf ed       	ldi	r28, 0xDF	; 223
    2568:	df ef       	ldi	r29, 0xFF	; 255
    256a:	e0 91 16 01 	lds	r30, 0x0116
    256e:	f0 91 17 01 	lds	r31, 0x0117
    2572:	ce 1b       	sub	r28, r30
    2574:	df 0b       	sbc	r29, r31
    2576:	e0 91 14 01 	lds	r30, 0x0114
    257a:	e0 ff       	sbrs	r30, 0
    257c:	d0 e8       	ldi	r29, 0x80	; 128
    257e:	c0 93 0b 01 	sts	0x010B, r28
    2582:	d0 93 0c 01 	sts	0x010C, r29
    2586:	de ef       	ldi	r29, 0xFE	; 254
    2588:	d0 93 07 01 	sts	0x0107, r29
    258c:	c0 ed       	ldi	r28, 0xD0	; 208
    258e:	e1 e0       	ldi	r30, 0x01	; 1
    2590:	f3 e1       	ldi	r31, 0x13	; 19
    2592:	0c 94 cd 12 	jmp	0x259a	; 0x259a <short_vsync_finished>

00002596 <short_vsync_not_finished>:
    2596:	e2 e9       	ldi	r30, 0x92	; 146
    2598:	f2 e1       	ldi	r31, 0x12	; 18

0000259a <short_vsync_finished>:
    259a:	c0 93 06 01 	sts	0x0106, r28
    259e:	cf e2       	ldi	r28, 0x2F	; 47
    25a0:	d2 e0       	ldi	r29, 0x02	; 2
    25a2:	0c 94 64 12 	jmp	0x24c8	; 0x24c8 <exit_timer1_compa_vect>

000025a6 <set_up_cursor>:
    25a6:	0f 92       	push	r0
    25a8:	1f 92       	push	r1
    25aa:	00 90 15 01 	lds	r0, 0x0115
    25ae:	c0 e2       	ldi	r28, 0x20	; 32
    25b0:	0c 9e       	mul	r0, r28
    25b2:	c0 91 0f 01 	lds	r28, 0x010F
    25b6:	dd 27       	eor	r29, r29
    25b8:	0c 0e       	add	r0, r28
    25ba:	1d 1e       	adc	r1, r29
    25bc:	cc e1       	ldi	r28, 0x1C	; 28
    25be:	d1 e0       	ldi	r29, 0x01	; 1
    25c0:	0c 0e       	add	r0, r28
    25c2:	1d 1e       	adc	r1, r29
    25c4:	00 92 08 01 	sts	0x0108, r0
    25c8:	10 92 09 01 	sts	0x0109, r1
    25cc:	e0 01       	movw	r28, r0
    25ce:	c8 81       	ld	r28, Y
    25d0:	d0 91 14 01 	lds	r29, 0x0114
    25d4:	d2 ff       	sbrs	r29, 2
    25d6:	04 c0       	rjmp	.+8      	; 0x25e0 <found_cursor_char>
    25d8:	d3 ff       	sbrs	r29, 3
    25da:	02 c0       	rjmp	.+4      	; 0x25e0 <found_cursor_char>
    25dc:	c0 91 19 01 	lds	r28, 0x0119

000025e0 <found_cursor_char>:
    25e0:	c0 93 0a 01 	sts	0x010A, r28
    25e4:	c0 91 0d 01 	lds	r28, 0x010D
    25e8:	ca 95       	dec	r28
    25ea:	31 f4       	brne	.+12     	; 0x25f8 <no_flash_cursor>
    25ec:	c8 e0       	ldi	r28, 0x08	; 8
    25ee:	dc 27       	eor	r29, r28
    25f0:	d0 93 14 01 	sts	0x0114, r29
    25f4:	c0 91 1a 01 	lds	r28, 0x011A

000025f8 <no_flash_cursor>:
    25f8:	c0 93 0d 01 	sts	0x010D, r28
    25fc:	1f 90       	pop	r1
    25fe:	0f 90       	pop	r0
    2600:	08 95       	ret

00002602 <active_sync>:
    2602:	28 98       	cbi	0x05, 0	; 5
    2604:	5f 98       	cbi	0x0b, 7	; 11
    2606:	c0 91 0b 01 	lds	r28, 0x010B
    260a:	d0 91 0c 01 	lds	r29, 0x010C
    260e:	21 96       	adiw	r28, 0x01	; 1
    2610:	c0 93 0b 01 	sts	0x010B, r28
    2614:	d0 93 0c 01 	sts	0x010C, r29
    2618:	cf e4       	ldi	r28, 0x4F	; 79
    261a:	d0 e0       	ldi	r29, 0x00	; 0
    261c:	e2 e1       	ldi	r30, 0x12	; 18
    261e:	f3 e1       	ldi	r31, 0x13	; 19
    2620:	0c 94 64 12 	jmp	0x24c8	; 0x24c8 <exit_timer1_compa_vect>

00002624 <active_back_porch>:
    2624:	28 9a       	sbi	0x05, 0	; 5
    2626:	c0 91 06 01 	lds	r28, 0x0106
    262a:	d0 91 07 01 	lds	r29, 0x0107
    262e:	21 96       	adiw	r28, 0x01	; 1
    2630:	c0 93 06 01 	sts	0x0106, r28
    2634:	d0 93 07 01 	sts	0x0107, r29
    2638:	51 f4       	brne	.+20     	; 0x264e <active_display_not_finished>

0000263a <active_display_finished>:
    263a:	e2 e9       	ldi	r30, 0x92	; 146
    263c:	f2 e1       	ldi	r31, 0x12	; 18
    263e:	c6 e0       	ldi	r28, 0x06	; 6
    2640:	c0 93 06 01 	sts	0x0106, r28
    2644:	0c 94 2c 13 	jmp	0x2658	; 0x2658 <active_display_exit>

00002648 <active_display_not_finished_delay>:
    2648:	00 c0       	rjmp	.+0      	; 0x264a <active_display_not_finished_delay+0x2>
    264a:	00 c0       	rjmp	.+0      	; 0x264c <active_display_not_finished_delay+0x4>
    264c:	00 c0       	rjmp	.+0      	; 0x264e <active_display_not_finished>

0000264e <active_display_not_finished>:
    264e:	e1 e0       	ldi	r30, 0x01	; 1
    2650:	f3 e1       	ldi	r31, 0x13	; 19
    2652:	00 c0       	rjmp	.+0      	; 0x2654 <active_display_not_finished+0x6>
    2654:	00 c0       	rjmp	.+0      	; 0x2656 <active_display_not_finished+0x8>
	...

00002658 <active_display_exit>:
    2658:	cf ea       	ldi	r28, 0xAF	; 175
    265a:	d4 e0       	ldi	r29, 0x04	; 4
    265c:	e0 93 04 01 	sts	0x0104, r30
    2660:	f0 93 05 01 	sts	0x0105, r31
    2664:	d0 93 89 00 	sts	0x0089, r29
    2668:	c0 93 88 00 	sts	0x0088, r28
    266c:	0f 92       	push	r0
    266e:	1f 92       	push	r1
    2670:	1f 93       	push	r17
    2672:	2f 93       	push	r18
    2674:	0f 93       	push	r16
    2676:	ff 92       	push	r15
    2678:	3f 93       	push	r19
    267a:	af 93       	push	r26
    267c:	bf 93       	push	r27

0000267e <active_display>:
    267e:	00 91 1b 01 	lds	r16, 0x011B
    2682:	03 95       	inc	r16
    2684:	0a 95       	dec	r16
    2686:	f1 f7       	brne	.-4      	; 0x2684 <active_display+0x6>
    2688:	f0 90 14 01 	lds	r15, 0x0114
    268c:	33 27       	eor	r19, r19
    268e:	f4 fc       	sbrc	r15, 4
    2690:	3f ef       	ldi	r19, 0xFF	; 255
    2692:	3b b9       	out	0x0b, r19	; 11
    2694:	00 91 0c 01 	lds	r16, 0x010C
    2698:	00 2b       	or	r16, r16
    269a:	11 f0       	breq	.+4      	; 0x26a0 <active_display+0x22>
    269c:	0c 94 a7 13 	jmp	0x274e	; 0x274e <active_display_skip_scanline>
    26a0:	c0 91 08 01 	lds	r28, 0x0108
    26a4:	d0 91 09 01 	lds	r29, 0x0109
    26a8:	08 80       	ld	r0, Y
    26aa:	0f 92       	push	r0
    26ac:	00 90 0a 01 	lds	r0, 0x010A
    26b0:	08 82       	st	Y, r0
    26b2:	1d e9       	ldi	r17, 0x9D	; 157
    26b4:	27 e0       	ldi	r18, 0x07	; 7
    26b6:	a0 91 0b 01 	lds	r26, 0x010B
    26ba:	a6 95       	lsr	r26
    26bc:	a7 70       	andi	r26, 0x07	; 7
    26be:	bb 27       	eor	r27, r27
    26c0:	1a 0f       	add	r17, r26
    26c2:	2b 1f       	adc	r18, r27
    26c4:	a0 91 0b 01 	lds	r26, 0x010B
    26c8:	a2 95       	swap	r26
    26ca:	af 70       	andi	r26, 0x0F	; 15
    26cc:	b0 e2       	ldi	r27, 0x20	; 32
    26ce:	ba 9f       	mul	r27, r26
    26d0:	ac e1       	ldi	r26, 0x1C	; 28
    26d2:	b1 e0       	ldi	r27, 0x01	; 1
    26d4:	a0 0d       	add	r26, r0
    26d6:	b1 1d       	adc	r27, r1
    26d8:	e8 e0       	ldi	r30, 0x08	; 8
    26da:	0d 90       	ld	r0, X+
    26dc:	0e 9e       	mul	r0, r30
    26de:	01 0e       	add	r0, r17
    26e0:	12 1e       	adc	r1, r18
    26e2:	f0 01       	movw	r30, r0
    26e4:	f4 90       	lpm	r15, Z+
    26e6:	f3 26       	eor	r15, r19
    26e8:	fb b8       	out	0x0b, r15	; 11
    26ea:	00 00       	nop
    26ec:	ff 1c       	adc	r15, r15
    26ee:	00 c0       	rjmp	.+0      	; 0x26f0 <active_display+0x72>
    26f0:	fb b8       	out	0x0b, r15	; 11
    26f2:	e8 e0       	ldi	r30, 0x08	; 8
    26f4:	ff 1c       	adc	r15, r15
    26f6:	0d 90       	ld	r0, X+
    26f8:	fb b8       	out	0x0b, r15	; 11
    26fa:	0e 9e       	mul	r0, r30
    26fc:	ff 1c       	adc	r15, r15
    26fe:	01 0e       	add	r0, r17
    2700:	fb b8       	out	0x0b, r15	; 11
    2702:	00 00       	nop
    2704:	12 1e       	adc	r1, r18
    2706:	f0 01       	movw	r30, r0
    2708:	ff 1c       	adc	r15, r15
    270a:	fb b8       	out	0x0b, r15	; 11
    270c:	0f e1       	ldi	r16, 0x1F	; 31
	...

00002710 <output_scanline_loop>:
    2710:	00 00       	nop
    2712:	ff 1c       	adc	r15, r15
    2714:	fb b8       	out	0x0b, r15	; 11
    2716:	f4 90       	lpm	r15, Z+
    2718:	f3 26       	eor	r15, r19
    271a:	fb b8       	out	0x0b, r15	; 11
    271c:	e8 e0       	ldi	r30, 0x08	; 8
    271e:	ff 1c       	adc	r15, r15
    2720:	0d 90       	ld	r0, X+
    2722:	fb b8       	out	0x0b, r15	; 11
    2724:	0e 9e       	mul	r0, r30
    2726:	ff 1c       	adc	r15, r15
    2728:	00 00       	nop
    272a:	fb b8       	out	0x0b, r15	; 11
    272c:	01 0e       	add	r0, r17
    272e:	12 1e       	adc	r1, r18
    2730:	f0 01       	movw	r30, r0
    2732:	ff 1c       	adc	r15, r15
    2734:	fb b8       	out	0x0b, r15	; 11
    2736:	00 c0       	rjmp	.+0      	; 0x2738 <output_scanline_loop+0x28>
    2738:	ff 1c       	adc	r15, r15
    273a:	0a 95       	dec	r16
    273c:	fb b8       	out	0x0b, r15	; 11
    273e:	41 f7       	brne	.-48     	; 0x2710 <output_scanline_loop>
    2740:	00 00       	nop
    2742:	00 00       	nop
    2744:	ff 1c       	adc	r15, r15
    2746:	fb b8       	out	0x0b, r15	; 11
    2748:	0f 90       	pop	r0
    274a:	08 82       	st	Y, r0
    274c:	3b b9       	out	0x0b, r19	; 11

0000274e <active_display_skip_scanline>:
    274e:	bf 91       	pop	r27
    2750:	af 91       	pop	r26
    2752:	3f 91       	pop	r19
    2754:	ff 90       	pop	r15
    2756:	0f 91       	pop	r16
    2758:	2f 91       	pop	r18
    275a:	1f 91       	pop	r17
    275c:	1f 90       	pop	r1
    275e:	0f 90       	pop	r0
    2760:	0c 94 6c 12 	jmp	0x24d8	; 0x24d8 <exit_timer1_compa_vect_no_store>

00002764 <main>:
    2764:	88 b1       	in	r24, 0x08	; 8
    2766:	8f 63       	ori	r24, 0x3F	; 63
    2768:	88 b9       	out	0x08, r24	; 8
    276a:	0e 94 48 10 	call	0x2090	; 0x2090 <tvtext_init>
    276e:	81 e1       	ldi	r24, 0x11	; 17
    2770:	80 93 14 01 	sts	0x0114, r24
    2774:	0e 94 23 08 	call	0x1046	; 0x1046 <countdown>
    2778:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <tvtext_clear>
    277c:	c0 e0       	ldi	r28, 0x00	; 0
    277e:	26 b1       	in	r18, 0x06	; 6
    2780:	30 e0       	ldi	r19, 0x00	; 0
    2782:	20 95       	com	r18
    2784:	30 95       	com	r19
    2786:	2f 73       	andi	r18, 0x3F	; 63
    2788:	33 27       	eor	r19, r19
    278a:	23 2b       	or	r18, r19
    278c:	c1 f7       	brne	.-16     	; 0x277e <main+0x1a>
    278e:	24 e0       	ldi	r18, 0x04	; 4
    2790:	43 e1       	ldi	r20, 0x13	; 19
    2792:	6f e0       	ldi	r22, 0x0F	; 15
    2794:	8d e0       	ldi	r24, 0x0D	; 13
    2796:	0e 94 02 10 	call	0x2004	; 0x2004 <tvtext_set_viewport>
    279a:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <tvtext_clear>
    279e:	84 ef       	ldi	r24, 0xF4	; 244
    27a0:	90 e0       	ldi	r25, 0x00	; 0
    27a2:	0e 94 14 12 	call	0x2428	; 0x2428 <tvtext_puts_P>
    27a6:	0e 94 38 10 	call	0x2070	; 0x2070 <tvtext_reset_viewport_cursor_home>
    27aa:	2c e0       	ldi	r18, 0x0C	; 12
    27ac:	45 e1       	ldi	r20, 0x15	; 21
    27ae:	62 e0       	ldi	r22, 0x02	; 2
    27b0:	8b e0       	ldi	r24, 0x0B	; 11
    27b2:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <draw_rounded_rectangle>
    27b6:	16 b1       	in	r17, 0x06	; 6
    27b8:	10 95       	com	r17
    27ba:	1f 73       	andi	r17, 0x3F	; 63
    27bc:	d0 e0       	ldi	r29, 0x00	; 0
    27be:	0e 94 2e 12 	call	0x245c	; 0x245c <tvtext_wait_vsync>
    27c2:	6c 2f       	mov	r22, r28
    27c4:	66 0f       	add	r22, r22
    27c6:	26 2f       	mov	r18, r22
    27c8:	2b 5f       	subi	r18, 0xFB	; 251
    27ca:	6d 5f       	subi	r22, 0xFD	; 253
    27cc:	44 e1       	ldi	r20, 0x14	; 20
    27ce:	8c e0       	ldi	r24, 0x0C	; 12
    27d0:	0e 94 6c 0e 	call	0x1cd8	; 0x1cd8 <clear_rectangle>
    27d4:	86 b1       	in	r24, 0x06	; 6
    27d6:	80 95       	com	r24
    27d8:	8f 73       	andi	r24, 0x3F	; 63
    27da:	81 17       	cp	r24, r17
    27dc:	11 f0       	breq	.+4      	; 0x27e2 <main+0x7e>
    27de:	dd 23       	and	r29, r29
    27e0:	11 f0       	breq	.+4      	; 0x27e6 <main+0x82>
    27e2:	80 e0       	ldi	r24, 0x00	; 0
    27e4:	01 c0       	rjmp	.+2      	; 0x27e8 <main+0x84>
    27e6:	18 2f       	mov	r17, r24
    27e8:	82 ff       	sbrs	r24, 2
    27ea:	02 c0       	rjmp	.+4      	; 0x27f0 <main+0x8c>
    27ec:	cd 5f       	subi	r28, 0xFD	; 253
    27ee:	d0 ef       	ldi	r29, 0xF0	; 240
    27f0:	83 ff       	sbrs	r24, 3
    27f2:	02 c0       	rjmp	.+4      	; 0x27f8 <main+0x94>
    27f4:	cf 5f       	subi	r28, 0xFF	; 255
    27f6:	d0 e1       	ldi	r29, 0x10	; 16
    27f8:	c3 70       	andi	r28, 0x03	; 3
    27fa:	08 2f       	mov	r16, r24
    27fc:	00 71       	andi	r16, 0x10	; 16
    27fe:	6c 2f       	mov	r22, r28
    2800:	66 0f       	add	r22, r22
    2802:	26 2f       	mov	r18, r22
    2804:	2b 5f       	subi	r18, 0xFB	; 251
    2806:	6d 5f       	subi	r22, 0xFD	; 253
    2808:	44 e1       	ldi	r20, 0x14	; 20
    280a:	8c e0       	ldi	r24, 0x0C	; 12
    280c:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <draw_animated_rectangle>
    2810:	6d 2f       	mov	r22, r29
    2812:	8c 2f       	mov	r24, r28
    2814:	0e 94 ee 07 	call	0xfdc	; 0xfdc <draw_game_preview>
    2818:	6d 2f       	mov	r22, r29
    281a:	1d 16       	cp	r1, r29
    281c:	2c f4       	brge	.+10     	; 0x2828 <main+0xc4>
    281e:	d1 50       	subi	r29, 0x01	; 1
    2820:	8c 2f       	mov	r24, r28
    2822:	8d 5f       	subi	r24, 0xFD	; 253
    2824:	60 51       	subi	r22, 0x10	; 16
    2826:	08 c0       	rjmp	.+16     	; 0x2838 <main+0xd4>
    2828:	dd 23       	and	r29, r29
    282a:	29 f0       	breq	.+10     	; 0x2836 <main+0xd2>
    282c:	df 5f       	subi	r29, 0xFF	; 255
    282e:	8c 2f       	mov	r24, r28
    2830:	8f 5f       	subi	r24, 0xFF	; 255
    2832:	60 5f       	subi	r22, 0xF0	; 240
    2834:	01 c0       	rjmp	.+2      	; 0x2838 <main+0xd4>
    2836:	8c 2f       	mov	r24, r28
    2838:	83 70       	andi	r24, 0x03	; 3
    283a:	0e 94 ee 07 	call	0xfdc	; 0xfdc <draw_game_preview>
    283e:	00 23       	and	r16, r16
    2840:	09 f4       	brne	.+2      	; 0x2844 <main+0xe0>
    2842:	bd cf       	rjmp	.-134    	; 0x27be <main+0x5a>
    2844:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <scroll_out>
    2848:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <tvtext_clear>
    284c:	20 91 16 01 	lds	r18, 0x0116
    2850:	30 91 17 01 	lds	r19, 0x0117
    2854:	20 51       	subi	r18, 0x10	; 16
    2856:	31 40       	sbci	r19, 0x01	; 1
    2858:	30 93 17 01 	sts	0x0117, r19
    285c:	20 93 16 01 	sts	0x0116, r18
    2860:	c2 30       	cpi	r28, 0x02	; 2
    2862:	51 f0       	breq	.+20     	; 0x2878 <main+0x114>
    2864:	c3 30       	cpi	r28, 0x03	; 3
    2866:	59 f0       	breq	.+22     	; 0x287e <main+0x11a>
    2868:	c1 30       	cpi	r28, 0x01	; 1
    286a:	19 f0       	breq	.+6      	; 0x2872 <main+0x10e>
    286c:	0e 94 46 09 	call	0x128c	; 0x128c <slides1>
    2870:	85 cf       	rjmp	.-246    	; 0x277c <main+0x18>
    2872:	0e 94 c6 0c 	call	0x198c	; 0x198c <demo>
    2876:	83 cf       	rjmp	.-250    	; 0x277e <main+0x1a>
    2878:	0e 94 9c 08 	call	0x1138	; 0x1138 <setup>
    287c:	80 cf       	rjmp	.-256    	; 0x277e <main+0x1a>
    287e:	0e 94 08 09 	call	0x1210	; 0x1210 <credit>
    2882:	7d cf       	rjmp	.-262    	; 0x277e <main+0x1a>

00002884 <__divmodhi4>:
    2884:	97 fb       	bst	r25, 7
    2886:	07 2e       	mov	r0, r23
    2888:	16 f4       	brtc	.+4      	; 0x288e <__divmodhi4+0xa>
    288a:	00 94       	com	r0
    288c:	07 d0       	rcall	.+14     	; 0x289c <__divmodhi4_neg1>
    288e:	77 fd       	sbrc	r23, 7
    2890:	09 d0       	rcall	.+18     	; 0x28a4 <__divmodhi4_neg2>
    2892:	0e 94 56 14 	call	0x28ac	; 0x28ac <__udivmodhi4>
    2896:	07 fc       	sbrc	r0, 7
    2898:	05 d0       	rcall	.+10     	; 0x28a4 <__divmodhi4_neg2>
    289a:	3e f4       	brtc	.+14     	; 0x28aa <__divmodhi4_exit>

0000289c <__divmodhi4_neg1>:
    289c:	90 95       	com	r25
    289e:	81 95       	neg	r24
    28a0:	9f 4f       	sbci	r25, 0xFF	; 255
    28a2:	08 95       	ret

000028a4 <__divmodhi4_neg2>:
    28a4:	70 95       	com	r23
    28a6:	61 95       	neg	r22
    28a8:	7f 4f       	sbci	r23, 0xFF	; 255

000028aa <__divmodhi4_exit>:
    28aa:	08 95       	ret

000028ac <__udivmodhi4>:
    28ac:	aa 1b       	sub	r26, r26
    28ae:	bb 1b       	sub	r27, r27
    28b0:	51 e1       	ldi	r21, 0x11	; 17
    28b2:	07 c0       	rjmp	.+14     	; 0x28c2 <__udivmodhi4_ep>

000028b4 <__udivmodhi4_loop>:
    28b4:	aa 1f       	adc	r26, r26
    28b6:	bb 1f       	adc	r27, r27
    28b8:	a6 17       	cp	r26, r22
    28ba:	b7 07       	cpc	r27, r23
    28bc:	10 f0       	brcs	.+4      	; 0x28c2 <__udivmodhi4_ep>
    28be:	a6 1b       	sub	r26, r22
    28c0:	b7 0b       	sbc	r27, r23

000028c2 <__udivmodhi4_ep>:
    28c2:	88 1f       	adc	r24, r24
    28c4:	99 1f       	adc	r25, r25
    28c6:	5a 95       	dec	r21
    28c8:	a9 f7       	brne	.-22     	; 0x28b4 <__udivmodhi4_loop>
    28ca:	80 95       	com	r24
    28cc:	90 95       	com	r25
    28ce:	bc 01       	movw	r22, r24
    28d0:	cd 01       	movw	r24, r26
    28d2:	08 95       	ret

000028d4 <memmove>:
    28d4:	68 17       	cp	r22, r24
    28d6:	79 07       	cpc	r23, r25
    28d8:	68 f4       	brcc	.+26     	; 0x28f4 <memmove+0x20>
    28da:	fb 01       	movw	r30, r22
    28dc:	dc 01       	movw	r26, r24
    28de:	e4 0f       	add	r30, r20
    28e0:	f5 1f       	adc	r31, r21
    28e2:	a4 0f       	add	r26, r20
    28e4:	b5 1f       	adc	r27, r21
    28e6:	02 c0       	rjmp	.+4      	; 0x28ec <memmove+0x18>
    28e8:	02 90       	ld	r0, -Z
    28ea:	0e 92       	st	-X, r0
    28ec:	41 50       	subi	r20, 0x01	; 1
    28ee:	50 40       	sbci	r21, 0x00	; 0
    28f0:	d8 f7       	brcc	.-10     	; 0x28e8 <memmove+0x14>
    28f2:	08 95       	ret
    28f4:	0c 94 83 14 	jmp	0x2906	; 0x2906 <memcpy>

000028f8 <memset>:
    28f8:	dc 01       	movw	r26, r24
    28fa:	01 c0       	rjmp	.+2      	; 0x28fe <memset+0x6>
    28fc:	6d 93       	st	X+, r22
    28fe:	41 50       	subi	r20, 0x01	; 1
    2900:	50 40       	sbci	r21, 0x00	; 0
    2902:	e0 f7       	brcc	.-8      	; 0x28fc <memset+0x4>
    2904:	08 95       	ret

00002906 <memcpy>:
    2906:	fb 01       	movw	r30, r22
    2908:	dc 01       	movw	r26, r24
    290a:	02 c0       	rjmp	.+4      	; 0x2910 <memcpy+0xa>
    290c:	01 90       	ld	r0, Z+
    290e:	0d 92       	st	X+, r0
    2910:	41 50       	subi	r20, 0x01	; 1
    2912:	50 40       	sbci	r21, 0x00	; 0
    2914:	d8 f7       	brcc	.-10     	; 0x290c <memcpy+0x6>
    2916:	08 95       	ret

00002918 <_exit>:
    2918:	f8 94       	cli

0000291a <__stop_program>:
    291a:	ff cf       	rjmp	.-2      	; 0x291a <__stop_program>
